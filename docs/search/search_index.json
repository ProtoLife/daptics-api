{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Daptics API Index This is the index page for documentation about the daptics API and about the daptics API Python client. The daptics API exposes all the functionality of the Daptics web interface , allowing you to incorporate daptics' machine learning algorithms to optimize the design of complex experiments. You can read more about the daptics system in our overview white paper . Other information is also available at that website. The currently released version of this page is hosted on GitHub Pages at https://ProtoLife.github.io/daptics-api Daptics API Resources The daptics-api GitHub repository contains the following public resources in the python_client folder for you to download, examine and use: The daptics_client.py Python API client module exposes the DapticsClient class, that allows you to create or connect to a session, set up your experimental space, generate optimized experiments, and obtain analytics results. There are six interactive Jupyter notebooks in .ipynb files that provide how-tos on installation, explanations of the terminology used by daptics, and tutorials that explore design of experiments solutions using the Python API client module. Documentation Visit the Python API Client link for descriptions of the classes and methods exposed by the daptics_client Python module. Visit the Daptics GraphQL API link for descriptions of all the objects available in the low-level GraphQL API. Setup and Installation To use the daptics API, you must first sign up by clicking on the Get Started For Free button on the daptics home page at https://daptics.ai Please contact support@daptics.ai if you need assistance setting up a daptics account. Visit the Jupyter Notebooks link for instructions on how you can set up a local Jupyter Notebook server if you do not have access to a server that can open .ipynb files. Copyright Notice Daptics API Version 0.12.0 Copyright (c) 2020 Daptics Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), the rights to use, copy, modify, merge, publish, and/or distribute, copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: You do not have the right to sub-license or sell copies of the Software. The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Daptics API Index"},{"location":"#daptics-api-index","text":"This is the index page for documentation about the daptics API and about the daptics API Python client. The daptics API exposes all the functionality of the Daptics web interface , allowing you to incorporate daptics' machine learning algorithms to optimize the design of complex experiments. You can read more about the daptics system in our overview white paper . Other information is also available at that website. The currently released version of this page is hosted on GitHub Pages at https://ProtoLife.github.io/daptics-api","title":"Daptics API Index"},{"location":"#daptics-api-resources","text":"The daptics-api GitHub repository contains the following public resources in the python_client folder for you to download, examine and use: The daptics_client.py Python API client module exposes the DapticsClient class, that allows you to create or connect to a session, set up your experimental space, generate optimized experiments, and obtain analytics results. There are six interactive Jupyter notebooks in .ipynb files that provide how-tos on installation, explanations of the terminology used by daptics, and tutorials that explore design of experiments solutions using the Python API client module.","title":"Daptics API Resources"},{"location":"#documentation","text":"Visit the Python API Client link for descriptions of the classes and methods exposed by the daptics_client Python module. Visit the Daptics GraphQL API link for descriptions of all the objects available in the low-level GraphQL API.","title":"Documentation"},{"location":"#setup-and-installation","text":"To use the daptics API, you must first sign up by clicking on the Get Started For Free button on the daptics home page at https://daptics.ai Please contact support@daptics.ai if you need assistance setting up a daptics account. Visit the Jupyter Notebooks link for instructions on how you can set up a local Jupyter Notebook server if you do not have access to a server that can open .ipynb files.","title":"Setup and Installation"},{"location":"#copyright-notice","text":"Daptics API Version 0.12.0 Copyright (c) 2020 Daptics Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), the rights to use, copy, modify, merge, publish, and/or distribute, copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: You do not have the right to sub-license or sell copies of the Software. The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright Notice"},{"location":"daptics_client/","text":"<<<<<<< HEAD <<<<<<< HEAD Module daptics_client ======= Module daptics_client v0.10.0 v0.10.0 Python API Client See comments and docstrings for the DapticsClient class in the code below for suggestions for using this class. For additional help or information, please visit or contact daptics: On the web at https://daptics.ai By email at support@daptics.ai Daptics API Version 0.12.0 Copyright (c) 2020 Daptics Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), the rights to use, copy, modify, merge, publish, and/or distribute, copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: You do not have the right to sub-license or sell copies of the Software. The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. <<<<<<< HEAD Functions ======= Functions v0.10.0 <<<<<<< HEAD Function can_set_result ======= Function can_set_result v0.10.0 def can_set_result(future) Helper function to see if a future is done or canceled. <<<<<<< HEAD Function default_task_coroutine ======= Function default_task_coroutine v0.10.0 async def default_task_coroutine(task, **kwargs) The default coroutine (callback) that will be called asynchronously if the \"run_tasks_async\" option has been set in the client. This coroutine logs progress information to a file named daptics_task.log in the current directory. <<<<<<< HEAD Classes ======= Classes v0.10.0 <<<<<<< HEAD Class CsvFileEmptyError ======= Class CsvFileEmptyError v0.10.0 class CsvFileEmptyError(fname) An error raised if there were no rows that could be read from the specified CSV file. <<<<<<< HEAD Class CsvNoDataRowsError ======= Class CsvNoDataRowsError v0.10.0 class CsvNoDataRowsError(fname) An error raised if there were no rows after the header row that could be read from the specified CSV file. <<<<<<< HEAD Class DapticsClient ======= Class DapticsClient v0.10.0 class DapticsClient(host=None, config=None) A Python GraphQL client for maintaining the state of a Daptics optimization session. Between API invocations, data such as the user id, access token, session id, last generated design, etc. are retained in the object's attributes. host (str): The host part of the API endpoint, as read from configuration, or set manually prior to calling connect . config (str): File path to a JSON configuration file, used to read the host, login credentials and runtime options. Defaults to daptics.conf . The items in the JSON file are: host - host part of the API endpoint user - email of the database user to login with password - password for the database user to login with auto_export_path - see options below auto_generate_next_design - see options below auto_task_timeout - see options below run_tasks_async - see options below If `config is set to None, configuration can be read from OS environment variables, if they exist. The environment variable names are: DAPTICS_HOST - host part of the API endpoint DAPTICS_USER - email of the database user to login with DAPTICS_PASSWORD - password for the database user to login with DAPTICS_AUTO_EXPORT_PATH - see options below DAPTICS_AUTO_GENERATE_NEXT_DESIGN - see options below DAPTICS_AUTO_TASK_TIMEOUT - see options below DAPTICS_RUN_TASKS_ASYNC - see options below options (dict): A Python dict containing runtime options. As of this version, there are four available options: auto_export_path - If not None, a string indicating the relative or absolute directory where the validated experimental space and generated design files will be saved, so that the user will not have to explicitly call the export functions. auto_generate_next_design - If set (True), uploading (initial or later) experiment responses will automatically start a generate task for the next design generation. If not set (None or False), the uploading will only validate the responses, and the user will have to call the generate task manually after a successful validation. auto_task_timeout - If set to a positive number indicating the number of seconds to wait, this option will immediately start to wait on a just-created task, so that the user will not have to explicitly call poll_for_current_task or wait_for_current_task . Setting this option to a negative number, means to wait indefinitely. Setting the option to zero will poll the task just once. The default, None, means that the user wants to explicitly call poll_for_current_task or wait_for_current_task . run_tasks_async - If set (True), methods that start long-running tasks ( put_experimental_parameters , put_experiments , generate_design , run_simulation , and create_analytics ) will be run in an asynchronous event loop. Normally you will only set this flag if you want to receive progress information via a coroutine (callback) function. <<<<<<< HEAD Class variables ======= Class variables v0.10.0 <<<<<<< HEAD Variable DEFAULT_CONFIG ======= Variable DEFAULT_CONFIG v0.10.0 The default location for the option configuration file. <<<<<<< HEAD Variable REQUIRED_SPACE_PARAMS ======= Variable REQUIRED_SPACE_PARAMS v0.10.0 The names of required experimental space parameters. <<<<<<< HEAD Variable TASK_FRAGMENT ======= Variable TASK_FRAGMENT v0.10.0 <<<<<<< HEAD Instance variables ======= Instance variables v0.10.0 <<<<<<< HEAD Variable analytics ======= Variable analytics v0.10.0 A Python dict containing information and links to available analytics files, as updated by the result of a \"analytics\" task. <<<<<<< HEAD Variable api_url ======= Variable api_url v0.10.0 The full API endpoint URL. <<<<<<< HEAD Variable auth ======= Variable auth v0.10.0 A requests.auth object used to insert the required authorization header in API requests. The auth object's token attribute is set by the login method. <<<<<<< HEAD Variable completed ======= Variable completed v0.10.0 A boolean indicating whether the design space has been completely explored. <<<<<<< HEAD Variable config ======= Variable config v0.10.0 The file path to the JSON configuration file used to read the host, login credentials and runtime options. <<<<<<< HEAD Variable credentials ======= Variable credentials v0.10.0 A tuple of ( username , password ), as read from configuration, or set manually prior to calling login . <<<<<<< HEAD Variable design ======= Variable design v0.10.0 A Python dict containing the current generated design, as updated by the result of a \"generate\" task. <<<<<<< HEAD Variable experiments_history ======= Variable experiments_history v0.10.0 A list of Python dict s containing all the experiments and responses that have been simulated, as updated by the result of a \"simulate\" task. <<<<<<< HEAD Variable gen ======= Variable gen v0.10.0 An integer storing the current design \"generation number\" for the session. This is -1 for a new session, 0 when the session's experimental space has been validated, and greater than zero when a design has been generated by the system. <<<<<<< HEAD Variable gql ======= Variable gql v0.10.0 The gql.Client object used to make GraphQL requests to the API. <<<<<<< HEAD Variable host ======= Variable host v0.10.0 The host part of the API endpoint, as read from configuration, or set manually prior to calling connect . <<<<<<< HEAD Variable initial_params ======= Variable initial_params v0.10.0 A Python dict containing the experimental space parameters defaults as initially returned by the create_session method. <<<<<<< HEAD Variable options ======= Variable options v0.10.0 A Python dict containing the runtime options. <<<<<<< HEAD Variable pp ======= Variable pp v0.10.0 A pprint.PrettyPrinter object used for printing Python dict s. <<<<<<< HEAD Variable remaining ======= Variable remaining v0.10.0 If not None, an integer representing the number of possible generations that can be generated until the entire design space has been explored. <<<<<<< HEAD Variable session_id ======= Variable session_id v0.10.0 The session id for a connected Daptics session, as set by the create_session method. <<<<<<< HEAD Variable session_name ======= Variable session_name v0.10.0 The name of the connected Daptics session, as set by the create_session method. <<<<<<< HEAD Variable task_info ======= Variable task_info v0.10.0 A Python dict that holds information about the polling status for running tasks in the session. <<<<<<< HEAD Variable task_updated_coroutine ======= Variable task_updated_coroutine v0.10.0 A user-specified coroutine (callback) that will be called with information on task progress. The coroutine will be called with a Python dict containing progress and status items. Optional keyword arguments that the coroutine will receive can be specified by setting the client's task_updated_kwargs attribute. If you supply a coroutine, the coroutine MUST be defined as async and MUST return a boolean value. The return value of your coroutine indicates whether you wish to continue receiving the callback for the current task. Generally, you should return False if the status value of the task does not have the value \"running\", meaning that the the task has completed or failed. Here's a simple example of a coroutine. See the code for default_task_coroutine() in this module for another example. async def my_coroutine(task, **kwargs): if 'progress' in task: print(task['progress']['message']) if task['status'] == 'running': # Return True to continue receiving callbacks return True # Return False to stop receiving callbacks return False <<<<<<< HEAD Variable task_updated_kwargs ======= Variable task_updated_kwargs v0.10.0 User-specified keyword dictionary to be passed to the async task updated coroutine. <<<<<<< HEAD Variable user_id ======= Variable user_id v0.10.0 The user id for the authenticated user, set by the login method. <<<<<<< HEAD Variable validated_params ======= Variable validated_params v0.10.0 A Python dict containing the experimental space parameters as updated from the result of a \"space\" task. <<<<<<< HEAD Variable websocket_url ======= Variable websocket_url v0.10.0 The full websocket endpoint URL. <<<<<<< HEAD Methods ======= Methods v0.10.0 <<<<<<< HEAD Method call_api ======= Method call_api v0.10.0 def call_api(self, document, vars, timeout=None) Performs validation on the GraphQL query or mutation document and then executes the query, returning both the data and errors items from the JSON response. Arguments document (str): The GraphQL query document, as a string. vars (dict): A python 'dict' containing the variables for the query. timeout (float, optional): The maximum number of seconds to wait before a response is returned. Returns data (dict): The data item of the GraphQL response, a Python dict with an item whose key is the GraphQL query name for the request. errors (list): The errors item of the GraphQL response. Each item in the list is guaranteed to have a message item. Notes Either data or errors may be None . Exceptions encountered during the request are converted into an item in the errors list. <<<<<<< HEAD Method connect ======= Method connect v0.10.0 def connect(self) Reads and processes client configuration, and instantiates the client if it has not been done before. Creates an HTTP transport instance from the client's api_url attribute, and attempts to connect to the introspection interface. The gql.Client value is stored in the client's gql attribute. Raises MissingConfigError If the config file specified does not exist. InvalidConfigError If the config file specified cannot be parsed, or does not have a 'host' value. NoHostError If there is no config file specifed and no host has been set. requests.exceptions.ConnectionError If the connection cannot be made. Notes There is nothing returned by this method. <<<<<<< HEAD Method create_session ======= Method create_session v0.10.0 def create_session(self, name, description) Creates a new daptics session. Arguments name (str): The unique name for the session among the authenticated user's sessions. description (str): A description for the session. Returns data (dict): The JSON response from the GraphQL request, a Python dict with a createSession item. Notes On successful creation, the session id, session name and initial parameters are stored in the client's attributes. <<<<<<< HEAD Method download_all_analytics_files ======= Method download_all_analytics_files v0.10.0 def download_all_analytics_files(self, analytics, directory='.', name_by_gen=False) Processes the result of an \"analytics\" task for all the available analytics by downloading the contents of each file, and saving them to the specified directory. For each file, download its contents and save it in the specified directory. Arguments analytics (dict): The analytics dict from the results of an \"analytics\" task, with gen , and files items. You can use self.analytics to use the most recent analytics results. directory (str, optional): If supplied, the target directory to save the files to. If the directory does not exist, attempt to create it. name_by_gen (bool, optional): If true, auto_genN_ will be prefixed to each file name. Returns file_count (int): The number of files created. Raises PermissionError If the user does not have permission to create directories or files in the specified directory. <<<<<<< HEAD Method download_analytics_file ======= Method download_analytics_file v0.10.0 def download_analytics_file(self, url, fname) Gets the contents of an analytics file. Once a URL to a particular analytics file has been obtained from the result of an \"analytics\" task, specify the url and filename values from the result as the arguments to this convenience method to request the file's contents over HTTP, submitting a request with the authentication token that was stored in the client. Arguments url (str): The URL for the file, as returned from the result of an \"analytics\" task. fname (str): Save the file's contents to this file system location. The directory that the file will be created in must exist and the user must have permission to create files in that directory. Returns response ( requests.Response ) The requests library's response object for the authenticated HTTP request. Raises PermissionError If the user does not have permission to create a file at the specified file system location. <<<<<<< HEAD Method error_messages ======= Method error_messages v0.10.0 def error_messages(self, errors) Extracts the message values from the errors list returned in a GraphQL response. Arguments errors (list): The list of GraphQL errors. Each error must have a message value, and can optionally have key , path and locations values. Returns message (str or list): The message (or messages) extracted from the GraphQL response. <<<<<<< HEAD Method execute_query ======= Method execute_query v0.10.0 def execute_query(self, document, vars, timeout=None) Performs validation on the GraphQL query or mutation document and then executes the query. Converts errors returned by gql into GraphQLError errors. Arguments document (str): The GraphQL query document, as a string. vars (dict): A python 'dict' containing the variables for the query. timeout (float, optional): The maximum number of seconds to wait before a response is returned. Returns data (dict): The data item of the GraphQL response, a Python dict with an item whose key is the GraphQL query name for the request. errors (list): The errors item of the GraphQL response. Each item in the list is guaranteed to have a message item. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. <<<<<<< HEAD Method experiment_with_random_response ======= Method experiment_with_random_response v0.10.0 def experiment_with_random_response(self, experiment, max_response_value) Uses a random number generator to generate a numerical response value in the range [0, n] and then replaces any existing response value with the generated value. Arguments experiment (list): A list of values representing an experiment, including a (possibly empty) response value. max_response_value (float): The maximum random response value to be generated for the experiment. Returns experiment (list): The list of parameter values for the specified experiment, and a generated response value. Each value is encoded as a string. <<<<<<< HEAD Method experiments_table_column_names ======= Method experiments_table_column_names v0.10.0 def experiments_table_column_names(self, space) Generates the required header for the experiments table, including the names of each parameter in the experimental space, and the reserved name \"Response\" for the experiment response value. Arguments space (dict): A Python dict that defines the experimental space. Returns column_headers (list): The list is made up from the names of all parameters, and the additional string \"Response\". <<<<<<< HEAD Method experiments_table_template ======= Method experiments_table_template v0.10.0 def experiments_table_template(self, space) Generates the column header for the experiments table, with no data rows. Can be used to export an empty experiments table template CSV file, or to submit \"empty\" initial experiments. Arguments space (dict): A Python dict that defines the experimental space. Returns table (dict): A Python dict with with a colHeaders item containing the column header row, and an empty data list item. <<<<<<< HEAD Method export_csv ======= Method export_csv v0.10.0 def export_csv(self, fname, table, headers=True) Writes an experimental space or experiments table to a CSV file on disk. Arguments fname (str): The filesystem path where the file will be written. table (dict): A Python dict with colHeaders and data items, representing an experimental space or experiments table. headers (bool, optional): If False , no header row will be written (this is the standard for experimental space CSV files). If True , the header row will be written to the file. Notes There is nothing returned by this method. <<<<<<< HEAD Method export_experimental_space_csv ======= Method export_experimental_space_csv v0.10.0 def export_experimental_space_csv(self, fname) Gets the validated experimental space table and writes the table to a CSV file on disk. Arguments fname (str): The filesystem path where the file will be written. Returns space (dict): A Python dict representing the validated experimental space. <<<<<<< HEAD Method export_experiments_history_csv ======= Method export_experiments_history_csv v0.10.0 def export_experiments_history_csv(self, fname) Gets and returns the experiments and responses for all generations in the session, and writes them to a summary CSV file on disk. Also updates the experiments_history attribute in the client. Arguments fname (str): The filesystem path where the file will be written. Returns experiments_history (list): or None The value of the client's experiments_history attribute, which may be None if no experiments have been submitted or designed, or is a list of dict s. See the documentation for the get_experiments_history method for a description of this value. Notes The CSV file for the experiments history contains three extra columns, \"Seq_\", \"Gen_\", and \"Designed_\", in addition to the standard experiments CSV columns (the input arameters for the experimental space, and the \"Response\" column). For each data row in the CSV file, \"Seq_\" will be a sequential index, starting at 1, \"Gen_\" will contain the generation number for the experiment, and \"Designed_\" will be \"Y\" if the experiment was designed by the daptics process, or \"N\" if the experiment was an initial or extra experiment submitted by the user. <<<<<<< HEAD Method export_generated_design_csv ======= Method export_generated_design_csv v0.10.0 def export_generated_design_csv(self, fname, gen=None) Gets a design generation from the session, and writes the table (with empty responses) to a CSV file on disk. Arguments fname (str): The filesystem path where the file will be written. gen (int, optional): The generation number for the design to be retrieved. If None, retreive the design for the current generation. Returns design_table (dict): The generated design, a Python dict representing an experiments table with empty responses with colHeaders , and data keys. <<<<<<< HEAD Method export_initial_experiments_template_csv ======= Method export_initial_experiments_template_csv v0.10.0 def export_initial_experiments_template_csv(self, fname) Gets the validated experimental space table and writes an empty initial experiments table to a CSV file on disk. Arguments fname (str): The filesystem path where the file will be written. Returns column_headers (list): The experiments table header row that was written to disk, as a list of strings. <<<<<<< HEAD Method generate_analytics ======= Method generate_analytics v0.10.0 def generate_analytics(self) Starts an \"analytics\" task that will create and return a list of all the available analytics files for the session at the current design generation. Returns data (dict): The JSON response from the GraphQL request, a Python dict with a createAnalytics item. The createAnalytics value will contain information on the \"analytics\" task that was started, as described in the return value for the poll_for_current_task method. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. # Notes If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"analytics\" task completes successfully, the result of the task can be accessed at data['createAnalytics']['result'] . If the task completes successfully and the auto_export_path option is set, the set of all available PDF analytics files for the generation will be downloaded to that directory. The file name for each of the downloaded files will have the prefix auto_genN_ where N is the generation number. <<<<<<< HEAD Method generate_design ======= Method generate_design v0.10.0 def generate_design(self, gen=None) If (initial or subsequent) experiments have been successfully validated against the experimental parameters, a \"generate\" task is started. Arguments gen (int, optional): The current generation number for the experiments that have successfully validated. Use zero for initial experiments. Use None to use the gen attribute stored in the client. Returns data (dict): The JSON response from the GraphQL request, a Python dict with a generateDesign item. The generateDesign contains information on the \"generate\" task that was started, as described in the return value for the poll_for_current_task method. Raises GraphQLError If the task failed or timed out. Notes If the auto_export_path option is set, a CSV file of the generated design is saved at auto_genN_design.csv . If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"generate\" task completes successfully, the result of the task can be accessed at data['generateDesign']['result'] . See the documentation on the \"generate\" task result in the poll_for_current_task method for information on the CSV file generated if the auto_export_path option is set. <<<<<<< HEAD Method get_experimental_space ======= Method get_experimental_space v0.10.0 def get_experimental_space(self) Utility method to retrieve the validated experimental space from the session. If the session was restarted and the experimental space had been previously validated, it will be in the validated_params attribute of the client, and this method will return it. Returns space (dict): The validated space, a Python dict with type , and table items, and a totalUnits item if the space type is \"mixture\", or None if the space has not been validated. <<<<<<< HEAD Method get_experiments ======= Method get_experiments v0.10.0 def get_experiments(self, design_only=False, gen=None) Gets the designed or completed experiments for the current or any previous generation. Arguments design_only (bool): If gen is specified, and this argument is set to True , only return the designed experiments (without responses). gen (int): The generation number to search for. Use 0 to specify initial experiments. Use None to search for the last designed generation. Returns data (dict): The JSON response from the GraphQL request, a Python dict with an experiments item. The experiments value is a dict containing these items: validated (bool): True if these experiments have been validated. hasResponses (bool): True if at least some of these experiments have responses. designRows (int): The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table (dict): A Python dict with colHeaders and data items, representing the experiments submitted or designed for the generation. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. <<<<<<< HEAD Method get_experiments_history ======= Method get_experiments_history v0.10.0 def get_experiments_history(self) Gets all of the experiments and any responses for all the generations in the session. Returns data (dict): The JSON response from the GraphQL request, a Python dict with an experimentsHistory item. The experimentsHistory value is either None if no experiments have been submitted or designed, or a list. Each item in the list is either None , or a dict with information about a generation. The first item in the list is for generation \"zero\", the initial experiments. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. Notes Each generation available in the list (not None ), is a Python dict with the following items: gen (int): The generation number (zero meaning initial experiments). validated (bool): True if these experiments have been validated. hasResponses (bool): True if at least some of these experiments have responses. designRows (int): The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table (dict): A Python dict with colHeaders and data values, representing the experiments submitted or designed for the generation. This method also updates the client's experiments_history attribute. <<<<<<< HEAD Method get_generated_design ======= Method get_generated_design v0.10.0 def get_generated_design(self, gen=None) Gets a design generation from the session. Arguments gen (int): The generation number for the design to be retrieved. If None , retreive the design for the current generation. Returns experiments (dict): The value of the experiments item from the GraphQL response, a Python dict with these items: validated (bool): True if these experiments have been validated. hasResponses (bool): True if at least some of these experiments have responses. designRows (int): The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table (dict): A Python dict with colHeaders and data values, representing the experiments submitted or designed for the generation. <<<<<<< HEAD Method halt_session ======= Method halt_session v0.10.0 def halt_session(self, session_id) Closes an connected session, to release all resources. Arguments session_id (str): The session id to close. Returns data (dict): The JSON response from the GraphQL request, a Python dict with a haltSession item. The 'haltSession' value is a dict containing these items: action (str): The action taken, either 'close' (if the session was connected) or 'none' if had previously been closed. status (str): The session status, which should always be 'closed', if the action was successful, or if the sesson had previously been closed. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. <<<<<<< HEAD Method init_config ======= Method init_config v0.10.0 def init_config(self) Reads and processes the client configuration from either a configuration file or from environment variables. Raises MissingConfigError If the config file specified does not exist. InvalidConfigError If the config file specified cannot be parsed, or does not have a 'host' value. Notes There is nothing returned by this method. <<<<<<< HEAD Method list_sessions ======= Method list_sessions v0.10.0 def list_sessions(self, user_id=None, name=None) Returns a list of all the user's sessions. Arguments user_id (str): (optional) Limit the results to the user with this id. Omitting this argument is normal for regular users. name (str): (optional) Limit the results to any session whose name, description, tag or id contains this string. Returns data (list): The JSON response from the GraphQL request, a Python dict with a sessions item. The sessions value is a list, where each item in the list is a Python dict containing summary information about the session`s identifier, name, and description. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. <<<<<<< HEAD Method load ======= Method load v0.10.0 def load(self, fname) Restores a previously saved client from a JSON file. Arguments fname (str): The file path to restore the client state from. Notes There is nothing returned by this method. <<<<<<< HEAD Method login ======= Method login v0.10.0 def login(self, email=None, password=None) Authenticates to a user record in the database as identified in the client's email and password attributes, and create an access token. Arguments email (str): The email adddress of the database user that will be used for authentication. password (str): The cleartext password of the database user that will be used for authentication. If called with default ( None ) arguments, the email and password will be retrieved from the credentials attribute. Returns data (dict): The JSON response from the GraphQL request, a Python dict with a login item. The login item is a dict with these items: token (str): The access token to be used for user access to the API. user (dict): A Python dict with one string item, userId , that can be used to create sessions. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. Notes On successful authentication, the user id and access token are stored in the client's user_id and auth attributes. <<<<<<< HEAD Method poll_for_current_task ======= Method poll_for_current_task v0.10.0 def poll_for_current_task(self, task_type=None) If there is a currently running task saved in the client, poll the session to see if a result is ready. Arguments task_type ( DapticsTaskType ): SPACE , UPDATE , GENERATE , SIMULATE , ANALYTICS , or None. If None is supplied (the default), find the most recently started task of any type. Returns data (dict): The data item of the GraphQL response, a Python dict with a currentTask item, described below. errors (list): The errors item of the GraphQL response. Each item in the list is guaranteed to have a message item. Notes Either data or errors may be None. The currentTask value returned is a Python dict containing information on the task (if found). The items in the dict are as follows: taskId (str): The unique identifier for the task. type (str): The type of task, either \"space\", \"update\", \"generate\", \"simulate\", or \"analytics\". description (str): A user-friendly description of what the task is. startedAt (str): An ISO 8601 string value of the UTC time at which the task was started. status (str): The status of the task, either new , running , success , failed , or canceled . result (dict): If the status of the task is success , the value of the result is another Python dict . The results for each type of task are as follows: Result for \"space\" Tasks The result for all tasks is a Python dict . For the \"space\" task, the dict has two items, campaign and params : campaign (dict): A Python dict with these items: gen (int): The generation number for the session (0). remaining (int): If available, how many more generations can be performed. completed (bool): If available, whether the campaign has been completed. params (dict): A Python dict with these items: validated (bool): True if the space was validated. designCost (int): If available, the cost in daptics credit that will be deducted from the user's account for each design generation. populationSize, replicates, and space: See the description for these values in the documentation for the arguments for the put_experimetal_parameters method. If a \"space\" task has successfully completed, the client's gen attribute is set to zero. Also, if the auto_export_path option is set, a CSV file named \"auto_validated_space.csv\" is written at that directory, containing the experimental space parameters. Result for \"update\" Tasks The result for an \"update\" task will contain all the items as the result for a \"space\" task, described above, with an additional experiments item: experiments (dict): A Python dict with these items: gen (int): The generation number for this set of experiments. validated (bool): True if the experiments validated successfully. hasResponses (bool): True if any of the experiments in this set were submitted with responses. designRows (int): The number of rows of daptics-designed experiments in this set of experiments. designRows will be zero if these are initial experiments. table (dict): A Python dict with colHeaders and data items, as described in the arguments for the put_experiments method. If the auto_generate_next_design option has been set on the client, when an \"update\" task completes, a \"generate\" task will be automatically started. The information on the \"generate\" task will be returned in the location data['currentTask']['autoGenerateTask'] . If the auto_task_timeout option has also been set, and the \"generate\" task result has completed, the result (containing the next generation design), will be available at the location data['currentTask']['autoGenerateTask']['result'] , formatted as described below. Also, if the auto_export_path option is set, a CSV file named \"auto_genN_experiments.csv\" is written at that directory, containing the validated experiments, where \"N\" is the generation number. Result for \"generate\" Tasks The result for a \"generate\" task has the same structure as the result for a \"update\" task, described above. The experiments value will contain the generated design, and the hasResponses value within the design will be False , as the generated design returned in the result will not have responses. If the \"generate\" task has successfully completed, the client's gen attribute is updated to a number greater than zero, and the generated design from the experiments value will be stored in the client's design attribute. Also, if the auto_export_path option is set, a CSV file named \"auto_genN_design.csv\" is written at that directory, containing the designed experiments, where \"N\" is the generation number. Result for \"simulate\" Tasks The result for a \"simulate\" task will contain all the items as the result for a \"space\" task, described above, with one additional item, experimentsHistory : experimentsHistory (list): A list of all the experiments in generations 1 through N, that were simulated. Each element of the list will be a Python dict with gen , validated , hasResponses , designRows and table items as described above in the documentation for the result of an \"update\" task. If the auto_export_path option is set, a CSV file named \"auto_history.csv\" is written at that directory, containing all the simulated experiments. See the documentation for the export_experiments_history_csv method for a description of this file's contents. Result for \"analytics\" Tasks The result dict will have one item, analytics : analytics (dict): A Python dict with these items: gen (int): The current generation number that the analytics were generated for. files (list): A list of Python dict s, with information about each analytics file generated. Information about each file is contained in a Python dict with these items: title (str): The title (caption) describing the file. filename (str): The suggested filename to save the file to. url (str): The HTTP URL where the file can be downloaded. A valid authentication token for the user must be included as the value of a token query string parameter added to the URL for the download request. If the \"analytics\" task has successfully completed, the analytics Python dict , containing the generation number and file list, will be stored in the client's analytics attribute. If the auto_export_path option is set, the set of all available PDF analytics files for the generation will be downloaded to that directory. The file name for each of the downloaded files will have the prefix auto_genN_ where N is the generation number. <<<<<<< HEAD Method print ======= Method print v0.10.0 def print(self) Prints out debugging information about the session. <<<<<<< HEAD Method put_experimental_parameters ======= Method put_experimental_parameters v0.10.0 def put_experimental_parameters(self, params) Validates the experimental parameters at the beginning of a session, and starts a \"space\" task. The individual experimental parameter names, types and permissible values in the space definition are specified at the ['space']['table'] key of the params dict . Arguments params (dict): A Python dict containing the experimental parameters to be used for the session. See the Notes section that describes the required items for the params dict . Returns data (dict): The JSON response from the GraphQL request, a Python dict with a putExperimentalParameters item. The putExperimentalParameters value is a Python dict with information about the \"space\" task. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. Notes If the task was successfully started, the task information is stored in the client's task_info attribute. If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"space\" task completes successfully, the result of the task can be accessed at data['putExperimentalParameters']['result'] . See the documentation on the \"space\" task result in the poll_for_current_task method for information on the CSV file generated if the auto_export_path option is set. These are the required items for the params dict : populationSize (int): The number of experiments per replicate. A positive integer. replicates (int): The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space (dict): The experimental space definition. The required items for the space dict are: type (str): The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits (int): For \"mixture\" type spaces, this is the mixture constraint parameter, a non-negative integer. table (dict): The (optional) column headers and rows of parameter data. See an example below. the colHeaders value is ignored when importing or validating the experimental space definition. To maintain uniformity, header and data row elements should be Python strings, even if they represent numeric values. For \"mixture\" type spaces, there should only be 4 columns of data in each row: the name of the parameter, the type of the parameter (which must always be the string \"unit\"), the minimum value of the parameter (a non-negative integer) and the maximum value of the parameter (a positive integer, less than or equal to the totalUnits constraint parameter). For \"factorial\" type spaces, there must be at least 4 columns of data in each row: the name of the parameter, the type of the parameter (a string, either \"numerical\" or \"categorical\"), and at least two possible distinct values that the parameter can have in an experiment. Different parameters can have either 2 or more than 2 possible values. The rows must be all be of the same size, so make sure to pad the rows with fewer values with empty strings at the end. In addition to the required params listed above, optional additional parameters may be submitted. Please contact daptics for more information about these advanced parameters. Examples Here is a mixture space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'mixture', 'totalUnits': 25, 'table': { 'colHeaders': [ 'Name', 'Type', 'Min', 'Max' ], 'data': [ [ 'param1', 'unit', '1', '10' ], [ 'param2', 'unit', '2', '10' ], [ 'param3', 'unit', '4', '8' ], [ 'param4', 'unit', '2', '5' ] ] } } } Here is a factorial space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'factorial', 'table': { 'colHeaders': [ 'Name', 'Type', 'Value.1', 'Value.2', 'Value.3', 'Value.4' ], 'data': [ [ 'param1', 'numerical', '0', '1', '2', '3' ], [ 'param2', 'numerical', '2', '3', '', '' ], [ 'param3', 'numerical', '0', '1', '2', '' ], [ 'param4', 'numerical', '0', '1', '2', '3' ] ] } } } <<<<<<< HEAD Method put_experimental_parameters_csv ======= Method put_experimental_parameters_csv v0.10.0 def put_experimental_parameters_csv(self, fname, params) Validates the experimental parameters at the beginning of a session, and starts a \"space\" task. The individual experimental parameter names, types and permissible values in the space definition are read from a CSV file. Arguments fname (str): The location on the filesystem for a CSV file that will define the experimental space definition. See the Examples section below for an example. params (dict): A Python dict containing the experimental parameters to be used for the session. See the Notes section for more information. Returns data (dict): The JSON response from the GraphQL request, a Python dict with a putExperimentalParameters item. The putExperimentalParameters value is a Python dict with information about the \"space\" task. Raises csv.Error If the specified CSV file is incorrectly formatted. Notes If the task was successfully started, the task information is stored in the client's task_info attribute. If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"space\" task completes successfully, the result of the task can be accessed at data['putExperimentalParameters']['result'] . See the documentation on the \"space\" task result in the poll_for_current_task method for information on the CSV file generated if the auto_export_path option is set. Items for the params dict are: populationSize (int): The number of experiments per replicate. A positive integer. replicates (int): The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space (dict): The experimental space definition. The single required item for the space dict is: type (str): \"factorial\" or \"mixture\" In addition to the required params listed above, optional additional parameters may be submitted. Please contact daptics for more information about these advanced parameters. Examples Here is a space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'factorial', } } The contents of an example CSV file for a \"factorial\" space might be: param1,numerical,0,1,2,3 param2,numerical,2,3,4, param3,numerical,0,1,, param4,numerical,0,1,2,3 Each parameter row in a factorial space definition should have the same number of columns. Parameter rows with fewer than the maximum number of values should have the empty columns at the end of the row, as shown above. The contents of an example CSV file for a \"mixture\" space might be: param1,unit,0,10 param2,unit,5,10 param3,unit,0,10 param4,unit,0,5 Each parameter fow in a mixture space defintion must specify a minimum and maximum unit volume, as shown above. Do not supply a header row for the space definition (for any type), just the parameter rows. <<<<<<< HEAD Method put_experiments ======= Method put_experiments v0.10.0 def put_experiments(self, experiments_type, experiments) Validate the responses for designed experiments, and any extra experiments for the current generation in the session. This method, or the put_experiments_responses_csv method, must be called before generating the next design, or finalizing the campaign. Arguments experiments_type ( DapticsExperimentsType ): Describes the types of experiments that are being added to the session. If you wish to submit calibrating or existing experimental responses prior to the first design generartion, use INITIAL_EXTRAS_ONLY . If you are submitting the responses for a daptics-generated design, along with any extra experiments, use DESIGNED_WITH_OPTIONAL_EXTRAS . If you wish to submit any final extra experiments when you are satisified with the session's optimization but do not want to include the last generated experimental design use FINAL_EXTRAS_ONLY . Note that this will end the session's optimization and that no more designs will be generated. experiments (dict): A \"table\" of experiments that includes columns, defined in the colHeaders value of the table, for each of the defined space parameters, and a column named 'Response' to record the result of experiments. Each row in the data value for the table represents an individual experiment. If the experiments type is DESIGNED_WITH_OPTIONAL_EXTRAS , you must sumbit at least as many rows as exist in the currently generated design, and the parameter values for these rows must match the design exactly. Additional \"extra\" experiment rows, that use any valid experimental parameter values, can also be provided. For the INITIAL_EXTRAS_ONLY and FINAL_EXTRAS_ONLY experiments types, rows that use any valid experimental parameter values can be provided. Returns data (dict): The JSON response from the GraphQL request, a Python dict with a putExperiments item. The putExperiments value will contain information on the \"update\" task that was started, as described in the return value for the poll_for_current_task method. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. Notes If the task was successfully started, the task information is stored in the client's task_info attribute. If the experiments were successfully validated, the following actions may be automatically performed: If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"update\" task completes successfully, the result of the task can be accessed at data['putExperiments']['result'] . If the auto_generate_next_design option is set, a \"generate\" task is started, and the autoGenerateTask item of the putExperiments item will contain information on the \"generate\" task that was started. If the auto_generate_next_design AND auto_task_timeout options are set, the \"generate\" task will be polled until it completes, fails, or times out. If the \"generate\" task completes, the generated design can be accessed at data['putExperiments']['autoGenerateTask']['result']['experiments'] . See the documentation for the poll_for_current_task for more information. See the documentation on the \"update\" and \"generate\" task results in the poll_for_current_task method for information on the CSV files generated if the auto_export_path option is set. Examples Here's an expamle of an experiments table: >>> experiments = { 'colHeaders': ['param1', 'param2', 'param3', 'param4', 'Response'], 'data': [ ['0', '4', '1', '1', '3.25'], ['1', '4', '1', '1', '4.5'], ... etc, matching generated design rows ] } <<<<<<< HEAD Method put_experiments_csv ======= Method put_experiments_csv v0.10.0 def put_experiments_csv(self, experiments_type, fname) Validate the responses for designed experiments, and any extra experiments for the current generation in the session. This method, or the put_experiments_responses method, must be called before generating the next design, or finalizing the campaign. Arguments experiments_type ( DapticsExperimentsType ): Describes the types of experiments that are being added to the session. If you wish to submit calibrating or existing experimental responses prior to the first design generartion, use <code>INITIAL\\_EXTRAS\\_ONLY</code>. If you are submitting the responses for a daptics-generated design, along with any extra experiments, use <code>DESIGNED\\_WITH\\_OPTIONAL\\_EXTRAS</code>. If you wish to submit any final extra experiments when you are satisified with the session's optimization but do not want to include the last generated experimental design use <code>FINAL\\_EXTRAS\\_ONLY</code>. Note that this will end the session's optimization and that no more designs will be generated. fname (str): The location on the filesystem for a CSV file that will define the results of the designed and any extra experiments. See the Examples section below for an example. Returns data (dict): The JSON response from the GraphQL request, a Python dict with a putExperiments item. The putExperiments value will contain information on the \"update\" task that was started, as described in the return value for the poll_for_current_task method. Notes If the experiments were successfully validated, the following actions may be automatically performed: If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"update\" task completes successfully, the result of the task can be accessed at data['putExperiments']['result'] . If the auto_generate_next_design option is set, a \"generate\" task is started, and the autoGenerateTask item of the putExperiments item will contain information on the \"generate\" task that was started. If the auto_generate_next_design AND auto_task_timeout options are set, the \"generate\" task will be polled until it completes, fails, or times out. If the \"generate\" task completes, the generated design can be accessed at data['putExperiments']['autoGenerateTask']['result']['experiments'] . See the documentation for the poll_for_current_task for more information. See the documentation on the \"update\" and \"generate\" task results in the poll_for_current_task method for information on the CSV files generated if the auto_export_path option is set. Examples A header row must be provided, the columns in the header row must match the names of the parameters defined by the experimental space definition exactly, and a final column named Response must be filled with the results of each experiment row. param1,param2,param3,param4,Response 0,4,1,1,3.25 1,4,1,1,4.5 Each non-header row in the file represents an individual experiment. There must be at least as many experiment rows as the current design has, and the parameter values for these rows must match the design exactly. Additional \"extra\" experiment rows can also be provided. <<<<<<< HEAD Method random_experiment_for_space ======= Method random_experiment_for_space v0.10.0 def random_experiment_for_space(self, space, max_response_value=None) Uses a random number generator to select parameter values and optionally to create a random response value. Arguments space (dict): A Python dict that defines the experimental space. max_response_value (float, optional): If omiited, the experiment is generated with an empty response. If a number, the response value is a randomly generated number in the range [0.0, max_response_value]. Returns experiment (list): The list of randomly generated parameter values for an experiment, and the optionally generated response value. Each value is encoded as a string. If max_response_value is not given, the response value will be the empty string. <<<<<<< HEAD Method random_experiments_with_responses ======= Method random_experiments_with_responses v0.10.0 def random_experiments_with_responses(self, space, design, num_extras=0, max_response_value=5.0) Generates an experiments table where each experiment row contains a randomly generated response value. The experiment rows are optionally composed of \"designed\" rows and \"extra\" rows. The \"designed\" rows have one experiment row for each row in the currently generated design. And the \"extra\" rows contain randomly generated parameter values as well as responses. Arguments space (dict): A Python dict that defines the experimental space. design (dict, optional): If supplied, a Python dict that defines the currently generated design as a table. The dict has colHeaders and data items. num_extras: int, optional If non-zero, generate this number of extra rows. The extra rows will be appended to any designed rows. max_response_value (float): The maximum value for generated responses. Each genreated response value is a randomly generated number in the range [0.0, max_response_value]. Returns table (dict): A Python dict with colHeaders and data values, representing an experiments table. <<<<<<< HEAD Method random_parameter_value ======= Method random_parameter_value v0.10.0 def random_parameter_value(self, space_type, param) Uses a random number generator to select a parameter value that is valid for the space type and specified parameter definition. Arguments space_type (str): The space type, either \"mixture\" or \"factorial\". param (list): The row from the experimental space definition table that defines a particular parameter in the space (name, type, and min / max or allowed values for the parameter). Each element in the list is encoded as a string. Returns param_value (str): A valid value for the parameter, encoded as a string. <<<<<<< HEAD Method reconnect_session ======= Method reconnect_session v0.10.0 def reconnect_session(self, session_id) Finds an existing session and returns session information. Arguments session_id (str): The session id to find. Returns data (dict): The JSON response from the GraphQL request, a Python dict with a session item. The session value is a Python dict containing information about the session's name, description, experimental space parameters, experiments history, and any active tasks. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. Notes Sets client attributes for the reconnected session. <<<<<<< HEAD Method run_task_async ======= Method run_task_async v0.10.0 def run_task_async(self, document, vars) Performs validation on the GraphQL mutation document and then executes the query, returning both the data and errors items from the JSON response. Before submitting the query, a \"taskUpdated\" subscription is set up, and the asynchronous loop processes subscription data messages, eventually passing task progress and status information to the coroutine specified by the client's task_updated_coroutine attribute. <<<<<<< HEAD Method save ======= Method save v0.10.0 def save(self, fname) Saves the user and session id to a JSON file. Arguments fname (str): The file path to save the client state to. Notes There is nothing returned by this method. <<<<<<< HEAD Method simulate_experiment_responses ======= Method simulate_experiment_responses v0.10.0 def simulate_experiment_responses(self, experiments=None) Generates values for the \"Response\" column. The values are a substitute for actual experimental results, computed with a synthetic data generator that takes as an input each experiment (i.e. each row of the experiments argument) and gives as output a single number, added as a 'Response'. The data generator samples a complex surface, constructed to have several peaks that are randomly placed in the space. There is a global optimum (highest peak), but optimization runs often will find one of the lower peaks. Arguments experiments (dict): A \"table\" of experiments that includes columns, defined in the colHeaders value of the table, for each of the defined space parameters, and a column named 'Response' to record the result of experiments. Each row in the data value for the table represents an individual experiment. Returns data (dict): The JSON response from the GraphQL request, a Python dict with a simulateExperiments item. See the documentation for the get_experiments method for a description of the values returned. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. <<<<<<< HEAD Method simulate_experiment_responses_csv ======= Method simulate_experiment_responses_csv v0.10.0 def simulate_experiment_responses_csv(self, fname) Generates values for the \"Response\" column. The values are a substitute for actual experimental results, computed with a synthetic data generator that takes as an input each experiment (i.e. each row of the experiments argument) and gives as output a single number, added as a 'Response'. The data generator samples a complex surface, constructed to have several peaks that are randomly placed in the space. There is a global optimum (highest peak), but optimization runs often will find one of the lower peaks. Arguments fname (str): The location on the filesystem for a CSV file that will define the parameters for designed and any extra experiments. Returns data (dict): The JSON response from the GraphQL request, a Python dict with a simulateExperiments item. <<<<<<< HEAD Method space_table_column_names ======= Method space_table_column_names v0.10.0 def space_table_column_names(self, space) Generates the canonically formatted column header names for the experimental space table. Arguments space (dict): A Python dict that defines the experimental space. Returns column_headers (list): A list of strings to build the column header for an experimental space. The list will contain \"Name\", \"Type\", \"Min\" and \"Max\" for a \"mixture\" space, or \"Name\", \"Type\", \"Value.1\", \"Value.2\", etc. for a \"factorial\" space. <<<<<<< HEAD Method space_table_value_column_name ======= Method space_table_value_column_name v0.10.0 def space_table_value_column_name(self, space_type, i) Formats a single column name for the header row in an experimental space table. Arguments space_type (str): \"mixture\" or \"factorial\" i (int): Index of the value column (starting at zero). Returns column_name (str): \"Min\" or \"Max\" for a \"mixture\" space type, or \"Value.1\", \"Value.2\", etc. for a \"factorial\" space type. <<<<<<< HEAD Method start_simulation ======= Method start_simulation v0.10.0 def start_simulation(self, ngens, params) Starts a simulation task for several design generations, specifying the desired experimental parameters and the number of generations to run. Arguments ngens (int): The number of generations to attempt to design. Must be greater than zero. If the experimental space is exhausted the actual number of generations designed may be less than this number. params (dict): A Python dict containing the experimental parameters to be used for the session. See the Notes section that describes the required items for the params dict . Returns data (dict): The JSON response from the GraphQL request, a Python dict with a runSimulation item. The runSimulation value contains information on the \"simulate\" task that was started, as described in the return value for the poll_for_current_task method. Raises GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. Notes Items to be specified in the params dict are: populationSize (int): The number of experiments per replicate. A positive integer. replicates (int): The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space (dict): The experimental space definition. Items in the space dict are: type (str): The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits (int): For \"mixture\" type spaces, this is the mixture constraint parameter, a non-negative integer. table (dict): The (optional) column headers and rows of parameter data. See an example below. the colHeaders value is ignored when importing or validating the experimental space definition. If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"simulate\" task completes successfully, the result of the task can be accessed at data['runSimulation']['result'] . See the documentation on the \"simulate\" task result in the poll_for_current_task method for information on the CSV file generated if the auto_export_path option is set. For more examples of how to submit space parameters, please see the documentation for the put_experimental_parameters method. <<<<<<< HEAD Method start_simulation_csv ======= Method start_simulation_csv v0.10.0 def start_simulation_csv(self, ngens, fname, params) Run a simulation for several design generations, specifying the desired experimental parameters and the number of generations to run. The experimental space is read from a CSV file. If the space parameters are successfully validated a \"simulate\" task is started. Arguments ngens (int): The number of generations to attempt to design. Must be greater than zero. If the experimental space is exhausted the actual number of generations designed may be less than this number. fname (str): The location on the filesystem for a CSV file that will define the experimental space definition. See the Examples section below for an example. params (dict): A Python dict containing the experimental parameters to be used for the session. See the Notes section that describes the required items for the params dict . Returns data (dict): The JSON response from the GraphQL request, a Python dict with a runSimulation item. The runSimulation value will contain information on the \"simulate\" task that was started, as described in the return value for the poll_for_current_task method. Raises csv.Error If the specified CSV file is incorrectly formatted. Notes Items to be specified in the params dict are: populationSize (int): The number of experiments per replicate. A positive integer. replicates (int): The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space (dict): The experimental space definition. Items in the space dict are: type (str): The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits (int): For \"mixture\" type spaces, this is the mixture constraint parameter, a non-negative integer. If the auto_export_path option is set, a CSV file of each generation of simulated experiments is saved at auto_genN_experiments.csv . If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"simulate\" task completes successfully, the result of the task can be accessed at data['runSimulation']['result'] . See the documentation on the \"simulate\" task result in the poll_for_current_task method for information on the CSV file generated if the auto_export_path option is set. For more examples of how to submit space parameters, please see the documentation for the put_experimental_parameters method. <<<<<<< HEAD Method wait_for_current_task ======= Method wait_for_current_task v0.10.0 def wait_for_current_task(self, task_type=None, timeout=None) Wraps poll_for_current_task in a loop. Repeat until task disappears, when status is success or failure . Arguments task_type ( DapticsTaskType , optional): SPACE , UPDATE , GENERATE , SIMULATE , ANALYTICS , or None. If None is supplied (the default), find the most recently started task of any type. timeout (float, optional): Maximum number of seconds to wait. If None or a negative number, wait forever. Returns data (dict): The data item of the GraphQL response, a Python dict with a currentTask item, described below. errors (list): The errors item of the GraphQL response. Each item in the list is guaranteed to have a message item. Notes Either data or errors may be None. See the documentation on the poll_for_current_task method for more information about the data item returned for different types of tasks, and for how task completion affects attributes of the client instance. <<<<<<< HEAD Class DapticsExperimentsType ======= Class DapticsExperimentsType v0.10.0 class DapticsExperimentsType(value, names=None, *, module=None, qualname=None, type=None, start=1) Enumerates the purpose for the experiments that are being uploaded to the session via the put_experiments or put_experiments_csv methods. <<<<<<< HEAD Class variables ======= Class variables v0.10.0 <<<<<<< HEAD Variable DESIGNED_WITH_OPTIONAL_EXTRAS ======= Variable DESIGNED_WITH_OPTIONAL_EXTRAS v0.10.0 The experiments submitted are designed experiments, and may also include optional extra experiments. <<<<<<< HEAD Variable INITIAL_EXTRAS_ONLY ======= Variable INITIAL_EXTRAS_ONLY v0.10.0 The experiments submitted are initial experiments. No designed experiments are included. <<<<<<< HEAD Class DapticsTaskType ======= Class DapticsTaskType v0.10.0 class DapticsTaskType(value, names=None, *, module=None, qualname=None, type=None, start=1) Enumerates the different asynchronous tasks that the daptics system can create and that can be searched for using the poll_for_current_task or wait_for_current_task methods. <<<<<<< HEAD Class variables ======= Class variables v0.10.0 <<<<<<< HEAD Variable ANALYTICS ======= Variable ANALYTICS v0.10.0 A task that generates analytics files at the current generation. <<<<<<< HEAD Variable GENERATE ======= Variable GENERATE v0.10.0 The task type to be searched was created by the generate_design method. <<<<<<< HEAD Variable SIMULATE ======= Variable SIMULATE v0.10.0 A task that simulates a given number of experimental generations. <<<<<<< HEAD Variable SPACE ======= Variable SPACE v0.10.0 The task type to be searched was created by the put_experimental_parameters or put_experimental_parameters_csv methods. <<<<<<< HEAD Variable UPDATE ======= Variable UPDATE v0.10.0 The task type to be searched was created by the put_experiments or put_experimens_csv methods. <<<<<<< HEAD Class GraphQLError ======= Class GraphQLError v0.10.0 class GraphQLError(message) An error raised by converting the first item in the errors item of the GraphQL response. <<<<<<< HEAD Class InvalidConfigError ======= Class InvalidConfigError v0.10.0 class InvalidConfigError(path) An error raised if the option configuration file cannot be parsed. <<<<<<< HEAD Class InvalidExperimentsTypeError ======= Class InvalidExperimentsTypeError v0.10.0 class InvalidExperimentsTypeError(experiments_type) An error raised if the type of experiments is not a valid type. <<<<<<< HEAD Class InvalidSpaceParameterError ======= Class InvalidSpaceParameterError v0.10.0 class InvalidSpaceParameterError(space_type, param) An error raised if the specified experimental space parameters are missing or invalid. <<<<<<< HEAD Class InvalidTaskTypeError ======= Class InvalidTaskTypeError v0.10.0 class InvalidTaskTypeError(task_type) An error raised if the task type specified was not a valid type. <<<<<<< HEAD Class MissingConfigError ======= Class MissingConfigError v0.10.0 class MissingConfigError(path) An error raised if the option configuration file cannot be found. <<<<<<< HEAD Class NextGenerationError ======= Class NextGenerationError v0.10.0 class NextGenerationError(gen) An error raised if the generation number specified is not the next generation number for the session. <<<<<<< HEAD Class NoCredentialsError ======= Class NoCredentialsError v0.10.0 class NoCredentialsError() An error raised if no login credentials were specified. <<<<<<< HEAD Class NoCurrentTaskError ======= Class NoCurrentTaskError v0.10.0 class NoCurrentTaskError() An error raised if no current task could be found, when one was expected. <<<<<<< HEAD Class NoHostError ======= Class NoHostError v0.10.0 class NoHostError() An error raised if no host value was specified. <<<<<<< HEAD Class SessionParametersNotValidatedError ======= Class SessionParametersNotValidatedError v0.10.0 class SessionParametersNotValidatedError() An error raised if the method cannot be completed, because the experimental space parameters for the session have not been saved and validated yet. <<<<<<< HEAD Class SpaceOrDesignRequiredError ======= Class SpaceOrDesignRequiredError v0.10.0 class SpaceOrDesignRequiredError() An error raised if neither an experimental space nor an experimental design was submitted for generating random experiments. <<<<<<< HEAD Class TaskFailedError ======= Class TaskFailedError v0.10.0 class TaskFailedError(type_) An error raised if a completed task did not return a valid result. <<<<<<< HEAD Class TaskTimeoutError ======= Class TaskTimeoutError v0.10.0 class TaskTimeoutError() An error raised if a task was not completed within the specified timeout. <<<<<<< HEAD Class TokenAuth ======= Class TokenAuth v0.10.0 class TokenAuth() A callable authentication object for the Python requests moudule. If the token attribute is set, the __call__ method will insert an \"Authorization\" header with a \"Bearer\" token into the HTTP request. Attributes token (str): An access token obtained from the API for the authenticated user. Generated by pdoc 0.8.3 ( https://pdoc3.github.io ).","title":"Python API Client"},{"location":"daptics_client/#head","text":"<<<<<<< HEAD","title":"&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"},{"location":"daptics_client/#module-daptics_client","text":"=======","title":"Module daptics_client"},{"location":"daptics_client/#module-daptics_client_1","text":"v0.10.0 v0.10.0","title":"Module daptics_client"},{"location":"daptics_client/#python-api-client","text":"See comments and docstrings for the DapticsClient class in the code below for suggestions for using this class. For additional help or information, please visit or contact daptics: On the web at https://daptics.ai By email at support@daptics.ai Daptics API Version 0.12.0 Copyright (c) 2020 Daptics Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), the rights to use, copy, modify, merge, publish, and/or distribute, copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: You do not have the right to sub-license or sell copies of the Software. The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. <<<<<<< HEAD","title":"Python API Client"},{"location":"daptics_client/#functions","text":"=======","title":"Functions"},{"location":"daptics_client/#functions_1","text":"v0.10.0 <<<<<<< HEAD","title":"Functions"},{"location":"daptics_client/#function-can_set_result","text":"=======","title":"Function can_set_result"},{"location":"daptics_client/#function-can_set_result_1","text":"v0.10.0 def can_set_result(future) Helper function to see if a future is done or canceled. <<<<<<< HEAD","title":"Function can_set_result"},{"location":"daptics_client/#function-default_task_coroutine","text":"=======","title":"Function default_task_coroutine"},{"location":"daptics_client/#function-default_task_coroutine_1","text":"v0.10.0 async def default_task_coroutine(task, **kwargs) The default coroutine (callback) that will be called asynchronously if the \"run_tasks_async\" option has been set in the client. This coroutine logs progress information to a file named daptics_task.log in the current directory. <<<<<<< HEAD","title":"Function default_task_coroutine"},{"location":"daptics_client/#classes","text":"=======","title":"Classes"},{"location":"daptics_client/#classes_1","text":"v0.10.0 <<<<<<< HEAD","title":"Classes"},{"location":"daptics_client/#class-csvfileemptyerror","text":"=======","title":"Class CsvFileEmptyError"},{"location":"daptics_client/#class-csvfileemptyerror_1","text":"v0.10.0 class CsvFileEmptyError(fname) An error raised if there were no rows that could be read from the specified CSV file. <<<<<<< HEAD","title":"Class CsvFileEmptyError"},{"location":"daptics_client/#class-csvnodatarowserror","text":"=======","title":"Class CsvNoDataRowsError"},{"location":"daptics_client/#class-csvnodatarowserror_1","text":"v0.10.0 class CsvNoDataRowsError(fname) An error raised if there were no rows after the header row that could be read from the specified CSV file. <<<<<<< HEAD","title":"Class CsvNoDataRowsError"},{"location":"daptics_client/#class-dapticsclient","text":"=======","title":"Class DapticsClient"},{"location":"daptics_client/#class-dapticsclient_1","text":"v0.10.0 class DapticsClient(host=None, config=None) A Python GraphQL client for maintaining the state of a Daptics optimization session. Between API invocations, data such as the user id, access token, session id, last generated design, etc. are retained in the object's attributes. host (str): The host part of the API endpoint, as read from configuration, or set manually prior to calling connect . config (str): File path to a JSON configuration file, used to read the host, login credentials and runtime options. Defaults to daptics.conf . The items in the JSON file are: host - host part of the API endpoint user - email of the database user to login with password - password for the database user to login with auto_export_path - see options below auto_generate_next_design - see options below auto_task_timeout - see options below run_tasks_async - see options below If `config is set to None, configuration can be read from OS environment variables, if they exist. The environment variable names are: DAPTICS_HOST - host part of the API endpoint DAPTICS_USER - email of the database user to login with DAPTICS_PASSWORD - password for the database user to login with DAPTICS_AUTO_EXPORT_PATH - see options below DAPTICS_AUTO_GENERATE_NEXT_DESIGN - see options below DAPTICS_AUTO_TASK_TIMEOUT - see options below DAPTICS_RUN_TASKS_ASYNC - see options below options (dict): A Python dict containing runtime options. As of this version, there are four available options: auto_export_path - If not None, a string indicating the relative or absolute directory where the validated experimental space and generated design files will be saved, so that the user will not have to explicitly call the export functions. auto_generate_next_design - If set (True), uploading (initial or later) experiment responses will automatically start a generate task for the next design generation. If not set (None or False), the uploading will only validate the responses, and the user will have to call the generate task manually after a successful validation. auto_task_timeout - If set to a positive number indicating the number of seconds to wait, this option will immediately start to wait on a just-created task, so that the user will not have to explicitly call poll_for_current_task or wait_for_current_task . Setting this option to a negative number, means to wait indefinitely. Setting the option to zero will poll the task just once. The default, None, means that the user wants to explicitly call poll_for_current_task or wait_for_current_task . run_tasks_async - If set (True), methods that start long-running tasks ( put_experimental_parameters , put_experiments , generate_design , run_simulation , and create_analytics ) will be run in an asynchronous event loop. Normally you will only set this flag if you want to receive progress information via a coroutine (callback) function. <<<<<<< HEAD","title":"Class DapticsClient"},{"location":"daptics_client/#class-variables","text":"=======","title":"Class variables"},{"location":"daptics_client/#class-variables_1","text":"v0.10.0 <<<<<<< HEAD","title":"Class variables"},{"location":"daptics_client/#variable-default_config","text":"=======","title":"Variable DEFAULT_CONFIG"},{"location":"daptics_client/#variable-default_config_1","text":"v0.10.0 The default location for the option configuration file. <<<<<<< HEAD","title":"Variable DEFAULT_CONFIG"},{"location":"daptics_client/#variable-required_space_params","text":"=======","title":"Variable REQUIRED_SPACE_PARAMS"},{"location":"daptics_client/#variable-required_space_params_1","text":"v0.10.0 The names of required experimental space parameters. <<<<<<< HEAD","title":"Variable REQUIRED_SPACE_PARAMS"},{"location":"daptics_client/#variable-task_fragment","text":"=======","title":"Variable TASK_FRAGMENT"},{"location":"daptics_client/#variable-task_fragment_1","text":"v0.10.0 <<<<<<< HEAD","title":"Variable TASK_FRAGMENT"},{"location":"daptics_client/#instance-variables","text":"=======","title":"Instance variables"},{"location":"daptics_client/#instance-variables_1","text":"v0.10.0 <<<<<<< HEAD","title":"Instance variables"},{"location":"daptics_client/#variable-analytics","text":"=======","title":"Variable analytics"},{"location":"daptics_client/#variable-analytics_1","text":"v0.10.0 A Python dict containing information and links to available analytics files, as updated by the result of a \"analytics\" task. <<<<<<< HEAD","title":"Variable analytics"},{"location":"daptics_client/#variable-api_url","text":"=======","title":"Variable api_url"},{"location":"daptics_client/#variable-api_url_1","text":"v0.10.0 The full API endpoint URL. <<<<<<< HEAD","title":"Variable api_url"},{"location":"daptics_client/#variable-auth","text":"=======","title":"Variable auth"},{"location":"daptics_client/#variable-auth_1","text":"v0.10.0 A requests.auth object used to insert the required authorization header in API requests. The auth object's token attribute is set by the login method. <<<<<<< HEAD","title":"Variable auth"},{"location":"daptics_client/#variable-completed","text":"=======","title":"Variable completed"},{"location":"daptics_client/#variable-completed_1","text":"v0.10.0 A boolean indicating whether the design space has been completely explored. <<<<<<< HEAD","title":"Variable completed"},{"location":"daptics_client/#variable-config","text":"=======","title":"Variable config"},{"location":"daptics_client/#variable-config_1","text":"v0.10.0 The file path to the JSON configuration file used to read the host, login credentials and runtime options. <<<<<<< HEAD","title":"Variable config"},{"location":"daptics_client/#variable-credentials","text":"=======","title":"Variable credentials"},{"location":"daptics_client/#variable-credentials_1","text":"v0.10.0 A tuple of ( username , password ), as read from configuration, or set manually prior to calling login . <<<<<<< HEAD","title":"Variable credentials"},{"location":"daptics_client/#variable-design","text":"=======","title":"Variable design"},{"location":"daptics_client/#variable-design_1","text":"v0.10.0 A Python dict containing the current generated design, as updated by the result of a \"generate\" task. <<<<<<< HEAD","title":"Variable design"},{"location":"daptics_client/#variable-experiments_history","text":"=======","title":"Variable experiments_history"},{"location":"daptics_client/#variable-experiments_history_1","text":"v0.10.0 A list of Python dict s containing all the experiments and responses that have been simulated, as updated by the result of a \"simulate\" task. <<<<<<< HEAD","title":"Variable experiments_history"},{"location":"daptics_client/#variable-gen","text":"=======","title":"Variable gen"},{"location":"daptics_client/#variable-gen_1","text":"v0.10.0 An integer storing the current design \"generation number\" for the session. This is -1 for a new session, 0 when the session's experimental space has been validated, and greater than zero when a design has been generated by the system. <<<<<<< HEAD","title":"Variable gen"},{"location":"daptics_client/#variable-gql","text":"=======","title":"Variable gql"},{"location":"daptics_client/#variable-gql_1","text":"v0.10.0 The gql.Client object used to make GraphQL requests to the API. <<<<<<< HEAD","title":"Variable gql"},{"location":"daptics_client/#variable-host","text":"=======","title":"Variable host"},{"location":"daptics_client/#variable-host_1","text":"v0.10.0 The host part of the API endpoint, as read from configuration, or set manually prior to calling connect . <<<<<<< HEAD","title":"Variable host"},{"location":"daptics_client/#variable-initial_params","text":"=======","title":"Variable initial_params"},{"location":"daptics_client/#variable-initial_params_1","text":"v0.10.0 A Python dict containing the experimental space parameters defaults as initially returned by the create_session method. <<<<<<< HEAD","title":"Variable initial_params"},{"location":"daptics_client/#variable-options","text":"=======","title":"Variable options"},{"location":"daptics_client/#variable-options_1","text":"v0.10.0 A Python dict containing the runtime options. <<<<<<< HEAD","title":"Variable options"},{"location":"daptics_client/#variable-pp","text":"=======","title":"Variable pp"},{"location":"daptics_client/#variable-pp_1","text":"v0.10.0 A pprint.PrettyPrinter object used for printing Python dict s. <<<<<<< HEAD","title":"Variable pp"},{"location":"daptics_client/#variable-remaining","text":"=======","title":"Variable remaining"},{"location":"daptics_client/#variable-remaining_1","text":"v0.10.0 If not None, an integer representing the number of possible generations that can be generated until the entire design space has been explored. <<<<<<< HEAD","title":"Variable remaining"},{"location":"daptics_client/#variable-session_id","text":"=======","title":"Variable session_id"},{"location":"daptics_client/#variable-session_id_1","text":"v0.10.0 The session id for a connected Daptics session, as set by the create_session method. <<<<<<< HEAD","title":"Variable session_id"},{"location":"daptics_client/#variable-session_name","text":"=======","title":"Variable session_name"},{"location":"daptics_client/#variable-session_name_1","text":"v0.10.0 The name of the connected Daptics session, as set by the create_session method. <<<<<<< HEAD","title":"Variable session_name"},{"location":"daptics_client/#variable-task_info","text":"=======","title":"Variable task_info"},{"location":"daptics_client/#variable-task_info_1","text":"v0.10.0 A Python dict that holds information about the polling status for running tasks in the session. <<<<<<< HEAD","title":"Variable task_info"},{"location":"daptics_client/#variable-task_updated_coroutine","text":"=======","title":"Variable task_updated_coroutine"},{"location":"daptics_client/#variable-task_updated_coroutine_1","text":"v0.10.0 A user-specified coroutine (callback) that will be called with information on task progress. The coroutine will be called with a Python dict containing progress and status items. Optional keyword arguments that the coroutine will receive can be specified by setting the client's task_updated_kwargs attribute. If you supply a coroutine, the coroutine MUST be defined as async and MUST return a boolean value. The return value of your coroutine indicates whether you wish to continue receiving the callback for the current task. Generally, you should return False if the status value of the task does not have the value \"running\", meaning that the the task has completed or failed. Here's a simple example of a coroutine. See the code for default_task_coroutine() in this module for another example. async def my_coroutine(task, **kwargs): if 'progress' in task: print(task['progress']['message']) if task['status'] == 'running': # Return True to continue receiving callbacks return True # Return False to stop receiving callbacks return False <<<<<<< HEAD","title":"Variable task_updated_coroutine"},{"location":"daptics_client/#variable-task_updated_kwargs","text":"=======","title":"Variable task_updated_kwargs"},{"location":"daptics_client/#variable-task_updated_kwargs_1","text":"v0.10.0 User-specified keyword dictionary to be passed to the async task updated coroutine. <<<<<<< HEAD","title":"Variable task_updated_kwargs"},{"location":"daptics_client/#variable-user_id","text":"=======","title":"Variable user_id"},{"location":"daptics_client/#variable-user_id_1","text":"v0.10.0 The user id for the authenticated user, set by the login method. <<<<<<< HEAD","title":"Variable user_id"},{"location":"daptics_client/#variable-validated_params","text":"=======","title":"Variable validated_params"},{"location":"daptics_client/#variable-validated_params_1","text":"v0.10.0 A Python dict containing the experimental space parameters as updated from the result of a \"space\" task. <<<<<<< HEAD","title":"Variable validated_params"},{"location":"daptics_client/#variable-websocket_url","text":"=======","title":"Variable websocket_url"},{"location":"daptics_client/#variable-websocket_url_1","text":"v0.10.0 The full websocket endpoint URL. <<<<<<< HEAD","title":"Variable websocket_url"},{"location":"daptics_client/#methods","text":"=======","title":"Methods"},{"location":"daptics_client/#methods_1","text":"v0.10.0 <<<<<<< HEAD","title":"Methods"},{"location":"daptics_client/#method-call_api","text":"=======","title":"Method call_api"},{"location":"daptics_client/#method-call_api_1","text":"v0.10.0 def call_api(self, document, vars, timeout=None) Performs validation on the GraphQL query or mutation document and then executes the query, returning both the data and errors items from the JSON response.","title":"Method call_api"},{"location":"daptics_client/#arguments","text":"document (str): The GraphQL query document, as a string. vars (dict): A python 'dict' containing the variables for the query. timeout (float, optional): The maximum number of seconds to wait before a response is returned.","title":"Arguments"},{"location":"daptics_client/#returns","text":"data (dict): The data item of the GraphQL response, a Python dict with an item whose key is the GraphQL query name for the request. errors (list): The errors item of the GraphQL response. Each item in the list is guaranteed to have a message item.","title":"Returns"},{"location":"daptics_client/#notes","text":"Either data or errors may be None . Exceptions encountered during the request are converted into an item in the errors list. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-connect","text":"=======","title":"Method connect"},{"location":"daptics_client/#method-connect_1","text":"v0.10.0 def connect(self) Reads and processes client configuration, and instantiates the client if it has not been done before. Creates an HTTP transport instance from the client's api_url attribute, and attempts to connect to the introspection interface. The gql.Client value is stored in the client's gql attribute.","title":"Method connect"},{"location":"daptics_client/#raises","text":"MissingConfigError If the config file specified does not exist. InvalidConfigError If the config file specified cannot be parsed, or does not have a 'host' value. NoHostError If there is no config file specifed and no host has been set. requests.exceptions.ConnectionError If the connection cannot be made.","title":"Raises"},{"location":"daptics_client/#notes_1","text":"There is nothing returned by this method. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-create_session","text":"=======","title":"Method create_session"},{"location":"daptics_client/#method-create_session_1","text":"v0.10.0 def create_session(self, name, description) Creates a new daptics session.","title":"Method create_session"},{"location":"daptics_client/#arguments_1","text":"name (str): The unique name for the session among the authenticated user's sessions. description (str): A description for the session.","title":"Arguments"},{"location":"daptics_client/#returns_1","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a createSession item.","title":"Returns"},{"location":"daptics_client/#notes_2","text":"On successful creation, the session id, session name and initial parameters are stored in the client's attributes. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-download_all_analytics_files","text":"=======","title":"Method download_all_analytics_files"},{"location":"daptics_client/#method-download_all_analytics_files_1","text":"v0.10.0 def download_all_analytics_files(self, analytics, directory='.', name_by_gen=False) Processes the result of an \"analytics\" task for all the available analytics by downloading the contents of each file, and saving them to the specified directory. For each file, download its contents and save it in the specified directory.","title":"Method download_all_analytics_files"},{"location":"daptics_client/#arguments_2","text":"analytics (dict): The analytics dict from the results of an \"analytics\" task, with gen , and files items. You can use self.analytics to use the most recent analytics results. directory (str, optional): If supplied, the target directory to save the files to. If the directory does not exist, attempt to create it. name_by_gen (bool, optional): If true, auto_genN_ will be prefixed to each file name.","title":"Arguments"},{"location":"daptics_client/#returns_2","text":"file_count (int): The number of files created.","title":"Returns"},{"location":"daptics_client/#raises_1","text":"PermissionError If the user does not have permission to create directories or files in the specified directory. <<<<<<< HEAD","title":"Raises"},{"location":"daptics_client/#method-download_analytics_file","text":"=======","title":"Method download_analytics_file"},{"location":"daptics_client/#method-download_analytics_file_1","text":"v0.10.0 def download_analytics_file(self, url, fname) Gets the contents of an analytics file. Once a URL to a particular analytics file has been obtained from the result of an \"analytics\" task, specify the url and filename values from the result as the arguments to this convenience method to request the file's contents over HTTP, submitting a request with the authentication token that was stored in the client.","title":"Method download_analytics_file"},{"location":"daptics_client/#arguments_3","text":"url (str): The URL for the file, as returned from the result of an \"analytics\" task. fname (str): Save the file's contents to this file system location. The directory that the file will be created in must exist and the user must have permission to create files in that directory.","title":"Arguments"},{"location":"daptics_client/#returns_3","text":"response ( requests.Response ) The requests library's response object for the authenticated HTTP request.","title":"Returns"},{"location":"daptics_client/#raises_2","text":"PermissionError If the user does not have permission to create a file at the specified file system location. <<<<<<< HEAD","title":"Raises"},{"location":"daptics_client/#method-error_messages","text":"=======","title":"Method error_messages"},{"location":"daptics_client/#method-error_messages_1","text":"v0.10.0 def error_messages(self, errors) Extracts the message values from the errors list returned in a GraphQL response.","title":"Method error_messages"},{"location":"daptics_client/#arguments_4","text":"errors (list): The list of GraphQL errors. Each error must have a message value, and can optionally have key , path and locations values.","title":"Arguments"},{"location":"daptics_client/#returns_4","text":"message (str or list): The message (or messages) extracted from the GraphQL response. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-execute_query","text":"=======","title":"Method execute_query"},{"location":"daptics_client/#method-execute_query_1","text":"v0.10.0 def execute_query(self, document, vars, timeout=None) Performs validation on the GraphQL query or mutation document and then executes the query. Converts errors returned by gql into GraphQLError errors.","title":"Method execute_query"},{"location":"daptics_client/#arguments_5","text":"document (str): The GraphQL query document, as a string. vars (dict): A python 'dict' containing the variables for the query. timeout (float, optional): The maximum number of seconds to wait before a response is returned.","title":"Arguments"},{"location":"daptics_client/#returns_5","text":"data (dict): The data item of the GraphQL response, a Python dict with an item whose key is the GraphQL query name for the request. errors (list): The errors item of the GraphQL response. Each item in the list is guaranteed to have a message item.","title":"Returns"},{"location":"daptics_client/#raises_3","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. <<<<<<< HEAD","title":"Raises"},{"location":"daptics_client/#method-experiment_with_random_response","text":"=======","title":"Method experiment_with_random_response"},{"location":"daptics_client/#method-experiment_with_random_response_1","text":"v0.10.0 def experiment_with_random_response(self, experiment, max_response_value) Uses a random number generator to generate a numerical response value in the range [0, n] and then replaces any existing response value with the generated value.","title":"Method experiment_with_random_response"},{"location":"daptics_client/#arguments_6","text":"experiment (list): A list of values representing an experiment, including a (possibly empty) response value. max_response_value (float): The maximum random response value to be generated for the experiment.","title":"Arguments"},{"location":"daptics_client/#returns_6","text":"experiment (list): The list of parameter values for the specified experiment, and a generated response value. Each value is encoded as a string. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-experiments_table_column_names","text":"=======","title":"Method experiments_table_column_names"},{"location":"daptics_client/#method-experiments_table_column_names_1","text":"v0.10.0 def experiments_table_column_names(self, space) Generates the required header for the experiments table, including the names of each parameter in the experimental space, and the reserved name \"Response\" for the experiment response value.","title":"Method experiments_table_column_names"},{"location":"daptics_client/#arguments_7","text":"space (dict): A Python dict that defines the experimental space.","title":"Arguments"},{"location":"daptics_client/#returns_7","text":"column_headers (list): The list is made up from the names of all parameters, and the additional string \"Response\". <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-experiments_table_template","text":"=======","title":"Method experiments_table_template"},{"location":"daptics_client/#method-experiments_table_template_1","text":"v0.10.0 def experiments_table_template(self, space) Generates the column header for the experiments table, with no data rows. Can be used to export an empty experiments table template CSV file, or to submit \"empty\" initial experiments.","title":"Method experiments_table_template"},{"location":"daptics_client/#arguments_8","text":"space (dict): A Python dict that defines the experimental space.","title":"Arguments"},{"location":"daptics_client/#returns_8","text":"table (dict): A Python dict with with a colHeaders item containing the column header row, and an empty data list item. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-export_csv","text":"=======","title":"Method export_csv"},{"location":"daptics_client/#method-export_csv_1","text":"v0.10.0 def export_csv(self, fname, table, headers=True) Writes an experimental space or experiments table to a CSV file on disk.","title":"Method export_csv"},{"location":"daptics_client/#arguments_9","text":"fname (str): The filesystem path where the file will be written. table (dict): A Python dict with colHeaders and data items, representing an experimental space or experiments table. headers (bool, optional): If False , no header row will be written (this is the standard for experimental space CSV files). If True , the header row will be written to the file.","title":"Arguments"},{"location":"daptics_client/#notes_3","text":"There is nothing returned by this method. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-export_experimental_space_csv","text":"=======","title":"Method export_experimental_space_csv"},{"location":"daptics_client/#method-export_experimental_space_csv_1","text":"v0.10.0 def export_experimental_space_csv(self, fname) Gets the validated experimental space table and writes the table to a CSV file on disk.","title":"Method export_experimental_space_csv"},{"location":"daptics_client/#arguments_10","text":"fname (str): The filesystem path where the file will be written.","title":"Arguments"},{"location":"daptics_client/#returns_9","text":"space (dict): A Python dict representing the validated experimental space. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-export_experiments_history_csv","text":"=======","title":"Method export_experiments_history_csv"},{"location":"daptics_client/#method-export_experiments_history_csv_1","text":"v0.10.0 def export_experiments_history_csv(self, fname) Gets and returns the experiments and responses for all generations in the session, and writes them to a summary CSV file on disk. Also updates the experiments_history attribute in the client.","title":"Method export_experiments_history_csv"},{"location":"daptics_client/#arguments_11","text":"fname (str): The filesystem path where the file will be written.","title":"Arguments"},{"location":"daptics_client/#returns_10","text":"experiments_history (list): or None The value of the client's experiments_history attribute, which may be None if no experiments have been submitted or designed, or is a list of dict s. See the documentation for the get_experiments_history method for a description of this value.","title":"Returns"},{"location":"daptics_client/#notes_4","text":"The CSV file for the experiments history contains three extra columns, \"Seq_\", \"Gen_\", and \"Designed_\", in addition to the standard experiments CSV columns (the input arameters for the experimental space, and the \"Response\" column). For each data row in the CSV file, \"Seq_\" will be a sequential index, starting at 1, \"Gen_\" will contain the generation number for the experiment, and \"Designed_\" will be \"Y\" if the experiment was designed by the daptics process, or \"N\" if the experiment was an initial or extra experiment submitted by the user. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-export_generated_design_csv","text":"=======","title":"Method export_generated_design_csv"},{"location":"daptics_client/#method-export_generated_design_csv_1","text":"v0.10.0 def export_generated_design_csv(self, fname, gen=None) Gets a design generation from the session, and writes the table (with empty responses) to a CSV file on disk.","title":"Method export_generated_design_csv"},{"location":"daptics_client/#arguments_12","text":"fname (str): The filesystem path where the file will be written. gen (int, optional): The generation number for the design to be retrieved. If None, retreive the design for the current generation.","title":"Arguments"},{"location":"daptics_client/#returns_11","text":"design_table (dict): The generated design, a Python dict representing an experiments table with empty responses with colHeaders , and data keys. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-export_initial_experiments_template_csv","text":"=======","title":"Method export_initial_experiments_template_csv"},{"location":"daptics_client/#method-export_initial_experiments_template_csv_1","text":"v0.10.0 def export_initial_experiments_template_csv(self, fname) Gets the validated experimental space table and writes an empty initial experiments table to a CSV file on disk.","title":"Method export_initial_experiments_template_csv"},{"location":"daptics_client/#arguments_13","text":"fname (str): The filesystem path where the file will be written.","title":"Arguments"},{"location":"daptics_client/#returns_12","text":"column_headers (list): The experiments table header row that was written to disk, as a list of strings. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-generate_analytics","text":"=======","title":"Method generate_analytics"},{"location":"daptics_client/#method-generate_analytics_1","text":"v0.10.0 def generate_analytics(self) Starts an \"analytics\" task that will create and return a list of all the available analytics files for the session at the current design generation.","title":"Method generate_analytics"},{"location":"daptics_client/#returns_13","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a createAnalytics item. The createAnalytics value will contain information on the \"analytics\" task that was started, as described in the return value for the poll_for_current_task method.","title":"Returns"},{"location":"daptics_client/#raises_4","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list.","title":"Raises"},{"location":"daptics_client/#notes_5","text":"If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"analytics\" task completes successfully, the result of the task can be accessed at data['createAnalytics']['result'] . If the task completes successfully and the auto_export_path option is set, the set of all available PDF analytics files for the generation will be downloaded to that directory. The file name for each of the downloaded files will have the prefix auto_genN_ where N is the generation number. <<<<<<< HEAD","title":"# Notes"},{"location":"daptics_client/#method-generate_design","text":"=======","title":"Method generate_design"},{"location":"daptics_client/#method-generate_design_1","text":"v0.10.0 def generate_design(self, gen=None) If (initial or subsequent) experiments have been successfully validated against the experimental parameters, a \"generate\" task is started.","title":"Method generate_design"},{"location":"daptics_client/#arguments_14","text":"gen (int, optional): The current generation number for the experiments that have successfully validated. Use zero for initial experiments. Use None to use the gen attribute stored in the client.","title":"Arguments"},{"location":"daptics_client/#returns_14","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a generateDesign item. The generateDesign contains information on the \"generate\" task that was started, as described in the return value for the poll_for_current_task method.","title":"Returns"},{"location":"daptics_client/#raises_5","text":"GraphQLError If the task failed or timed out.","title":"Raises"},{"location":"daptics_client/#notes_6","text":"If the auto_export_path option is set, a CSV file of the generated design is saved at auto_genN_design.csv . If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"generate\" task completes successfully, the result of the task can be accessed at data['generateDesign']['result'] . See the documentation on the \"generate\" task result in the poll_for_current_task method for information on the CSV file generated if the auto_export_path option is set. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-get_experimental_space","text":"=======","title":"Method get_experimental_space"},{"location":"daptics_client/#method-get_experimental_space_1","text":"v0.10.0 def get_experimental_space(self) Utility method to retrieve the validated experimental space from the session. If the session was restarted and the experimental space had been previously validated, it will be in the validated_params attribute of the client, and this method will return it.","title":"Method get_experimental_space"},{"location":"daptics_client/#returns_15","text":"space (dict): The validated space, a Python dict with type , and table items, and a totalUnits item if the space type is \"mixture\", or None if the space has not been validated. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-get_experiments","text":"=======","title":"Method get_experiments"},{"location":"daptics_client/#method-get_experiments_1","text":"v0.10.0 def get_experiments(self, design_only=False, gen=None) Gets the designed or completed experiments for the current or any previous generation.","title":"Method get_experiments"},{"location":"daptics_client/#arguments_15","text":"design_only (bool): If gen is specified, and this argument is set to True , only return the designed experiments (without responses). gen (int): The generation number to search for. Use 0 to specify initial experiments. Use None to search for the last designed generation.","title":"Arguments"},{"location":"daptics_client/#returns_16","text":"data (dict): The JSON response from the GraphQL request, a Python dict with an experiments item. The experiments value is a dict containing these items: validated (bool): True if these experiments have been validated. hasResponses (bool): True if at least some of these experiments have responses. designRows (int): The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table (dict): A Python dict with colHeaders and data items, representing the experiments submitted or designed for the generation.","title":"Returns"},{"location":"daptics_client/#raises_6","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. <<<<<<< HEAD","title":"Raises"},{"location":"daptics_client/#method-get_experiments_history","text":"=======","title":"Method get_experiments_history"},{"location":"daptics_client/#method-get_experiments_history_1","text":"v0.10.0 def get_experiments_history(self) Gets all of the experiments and any responses for all the generations in the session.","title":"Method get_experiments_history"},{"location":"daptics_client/#returns_17","text":"data (dict): The JSON response from the GraphQL request, a Python dict with an experimentsHistory item. The experimentsHistory value is either None if no experiments have been submitted or designed, or a list. Each item in the list is either None , or a dict with information about a generation. The first item in the list is for generation \"zero\", the initial experiments.","title":"Returns"},{"location":"daptics_client/#raises_7","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list.","title":"Raises"},{"location":"daptics_client/#notes_7","text":"Each generation available in the list (not None ), is a Python dict with the following items: gen (int): The generation number (zero meaning initial experiments). validated (bool): True if these experiments have been validated. hasResponses (bool): True if at least some of these experiments have responses. designRows (int): The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table (dict): A Python dict with colHeaders and data values, representing the experiments submitted or designed for the generation. This method also updates the client's experiments_history attribute. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-get_generated_design","text":"=======","title":"Method get_generated_design"},{"location":"daptics_client/#method-get_generated_design_1","text":"v0.10.0 def get_generated_design(self, gen=None) Gets a design generation from the session.","title":"Method get_generated_design"},{"location":"daptics_client/#arguments_16","text":"gen (int): The generation number for the design to be retrieved. If None , retreive the design for the current generation.","title":"Arguments"},{"location":"daptics_client/#returns_18","text":"experiments (dict): The value of the experiments item from the GraphQL response, a Python dict with these items: validated (bool): True if these experiments have been validated. hasResponses (bool): True if at least some of these experiments have responses. designRows (int): The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table (dict): A Python dict with colHeaders and data values, representing the experiments submitted or designed for the generation. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-halt_session","text":"=======","title":"Method halt_session"},{"location":"daptics_client/#method-halt_session_1","text":"v0.10.0 def halt_session(self, session_id) Closes an connected session, to release all resources.","title":"Method halt_session"},{"location":"daptics_client/#arguments_17","text":"session_id (str): The session id to close.","title":"Arguments"},{"location":"daptics_client/#returns_19","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a haltSession item. The 'haltSession' value is a dict containing these items: action (str): The action taken, either 'close' (if the session was connected) or 'none' if had previously been closed. status (str): The session status, which should always be 'closed', if the action was successful, or if the sesson had previously been closed.","title":"Returns"},{"location":"daptics_client/#raises_8","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. <<<<<<< HEAD","title":"Raises"},{"location":"daptics_client/#method-init_config","text":"=======","title":"Method init_config"},{"location":"daptics_client/#method-init_config_1","text":"v0.10.0 def init_config(self) Reads and processes the client configuration from either a configuration file or from environment variables.","title":"Method init_config"},{"location":"daptics_client/#raises_9","text":"MissingConfigError If the config file specified does not exist. InvalidConfigError If the config file specified cannot be parsed, or does not have a 'host' value.","title":"Raises"},{"location":"daptics_client/#notes_8","text":"There is nothing returned by this method. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-list_sessions","text":"=======","title":"Method list_sessions"},{"location":"daptics_client/#method-list_sessions_1","text":"v0.10.0 def list_sessions(self, user_id=None, name=None) Returns a list of all the user's sessions.","title":"Method list_sessions"},{"location":"daptics_client/#arguments_18","text":"user_id (str): (optional) Limit the results to the user with this id. Omitting this argument is normal for regular users. name (str): (optional) Limit the results to any session whose name, description, tag or id contains this string.","title":"Arguments"},{"location":"daptics_client/#returns_20","text":"data (list): The JSON response from the GraphQL request, a Python dict with a sessions item. The sessions value is a list, where each item in the list is a Python dict containing summary information about the session`s identifier, name, and description.","title":"Returns"},{"location":"daptics_client/#raises_10","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. <<<<<<< HEAD","title":"Raises"},{"location":"daptics_client/#method-load","text":"=======","title":"Method load"},{"location":"daptics_client/#method-load_1","text":"v0.10.0 def load(self, fname) Restores a previously saved client from a JSON file.","title":"Method load"},{"location":"daptics_client/#arguments_19","text":"fname (str): The file path to restore the client state from.","title":"Arguments"},{"location":"daptics_client/#notes_9","text":"There is nothing returned by this method. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-login","text":"=======","title":"Method login"},{"location":"daptics_client/#method-login_1","text":"v0.10.0 def login(self, email=None, password=None) Authenticates to a user record in the database as identified in the client's email and password attributes, and create an access token.","title":"Method login"},{"location":"daptics_client/#arguments_20","text":"email (str): The email adddress of the database user that will be used for authentication. password (str): The cleartext password of the database user that will be used for authentication. If called with default ( None ) arguments, the email and password will be retrieved from the credentials attribute.","title":"Arguments"},{"location":"daptics_client/#returns_21","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a login item. The login item is a dict with these items: token (str): The access token to be used for user access to the API. user (dict): A Python dict with one string item, userId , that can be used to create sessions.","title":"Returns"},{"location":"daptics_client/#raises_11","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list.","title":"Raises"},{"location":"daptics_client/#notes_10","text":"On successful authentication, the user id and access token are stored in the client's user_id and auth attributes. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-poll_for_current_task","text":"=======","title":"Method poll_for_current_task"},{"location":"daptics_client/#method-poll_for_current_task_1","text":"v0.10.0 def poll_for_current_task(self, task_type=None) If there is a currently running task saved in the client, poll the session to see if a result is ready.","title":"Method poll_for_current_task"},{"location":"daptics_client/#arguments_21","text":"task_type ( DapticsTaskType ): SPACE , UPDATE , GENERATE , SIMULATE , ANALYTICS , or None. If None is supplied (the default), find the most recently started task of any type.","title":"Arguments"},{"location":"daptics_client/#returns_22","text":"data (dict): The data item of the GraphQL response, a Python dict with a currentTask item, described below. errors (list): The errors item of the GraphQL response. Each item in the list is guaranteed to have a message item.","title":"Returns"},{"location":"daptics_client/#notes_11","text":"Either data or errors may be None. The currentTask value returned is a Python dict containing information on the task (if found). The items in the dict are as follows: taskId (str): The unique identifier for the task. type (str): The type of task, either \"space\", \"update\", \"generate\", \"simulate\", or \"analytics\". description (str): A user-friendly description of what the task is. startedAt (str): An ISO 8601 string value of the UTC time at which the task was started. status (str): The status of the task, either new , running , success , failed , or canceled . result (dict): If the status of the task is success , the value of the result is another Python dict . The results for each type of task are as follows:","title":"Notes"},{"location":"daptics_client/#result-for-space-tasks","text":"The result for all tasks is a Python dict . For the \"space\" task, the dict has two items, campaign and params : campaign (dict): A Python dict with these items: gen (int): The generation number for the session (0). remaining (int): If available, how many more generations can be performed. completed (bool): If available, whether the campaign has been completed. params (dict): A Python dict with these items: validated (bool): True if the space was validated. designCost (int): If available, the cost in daptics credit that will be deducted from the user's account for each design generation. populationSize, replicates, and space: See the description for these values in the documentation for the arguments for the put_experimetal_parameters method. If a \"space\" task has successfully completed, the client's gen attribute is set to zero. Also, if the auto_export_path option is set, a CSV file named \"auto_validated_space.csv\" is written at that directory, containing the experimental space parameters.","title":"Result for \"space\" Tasks"},{"location":"daptics_client/#result-for-update-tasks","text":"The result for an \"update\" task will contain all the items as the result for a \"space\" task, described above, with an additional experiments item: experiments (dict): A Python dict with these items: gen (int): The generation number for this set of experiments. validated (bool): True if the experiments validated successfully. hasResponses (bool): True if any of the experiments in this set were submitted with responses. designRows (int): The number of rows of daptics-designed experiments in this set of experiments. designRows will be zero if these are initial experiments. table (dict): A Python dict with colHeaders and data items, as described in the arguments for the put_experiments method. If the auto_generate_next_design option has been set on the client, when an \"update\" task completes, a \"generate\" task will be automatically started. The information on the \"generate\" task will be returned in the location data['currentTask']['autoGenerateTask'] . If the auto_task_timeout option has also been set, and the \"generate\" task result has completed, the result (containing the next generation design), will be available at the location data['currentTask']['autoGenerateTask']['result'] , formatted as described below. Also, if the auto_export_path option is set, a CSV file named \"auto_genN_experiments.csv\" is written at that directory, containing the validated experiments, where \"N\" is the generation number.","title":"Result for \"update\" Tasks"},{"location":"daptics_client/#result-for-generate-tasks","text":"The result for a \"generate\" task has the same structure as the result for a \"update\" task, described above. The experiments value will contain the generated design, and the hasResponses value within the design will be False , as the generated design returned in the result will not have responses. If the \"generate\" task has successfully completed, the client's gen attribute is updated to a number greater than zero, and the generated design from the experiments value will be stored in the client's design attribute. Also, if the auto_export_path option is set, a CSV file named \"auto_genN_design.csv\" is written at that directory, containing the designed experiments, where \"N\" is the generation number.","title":"Result for \"generate\" Tasks"},{"location":"daptics_client/#result-for-simulate-tasks","text":"The result for a \"simulate\" task will contain all the items as the result for a \"space\" task, described above, with one additional item, experimentsHistory : experimentsHistory (list): A list of all the experiments in generations 1 through N, that were simulated. Each element of the list will be a Python dict with gen , validated , hasResponses , designRows and table items as described above in the documentation for the result of an \"update\" task. If the auto_export_path option is set, a CSV file named \"auto_history.csv\" is written at that directory, containing all the simulated experiments. See the documentation for the export_experiments_history_csv method for a description of this file's contents.","title":"Result for \"simulate\" Tasks"},{"location":"daptics_client/#result-for-analytics-tasks","text":"The result dict will have one item, analytics : analytics (dict): A Python dict with these items: gen (int): The current generation number that the analytics were generated for. files (list): A list of Python dict s, with information about each analytics file generated. Information about each file is contained in a Python dict with these items: title (str): The title (caption) describing the file. filename (str): The suggested filename to save the file to. url (str): The HTTP URL where the file can be downloaded. A valid authentication token for the user must be included as the value of a token query string parameter added to the URL for the download request. If the \"analytics\" task has successfully completed, the analytics Python dict , containing the generation number and file list, will be stored in the client's analytics attribute. If the auto_export_path option is set, the set of all available PDF analytics files for the generation will be downloaded to that directory. The file name for each of the downloaded files will have the prefix auto_genN_ where N is the generation number. <<<<<<< HEAD","title":"Result for \"analytics\" Tasks"},{"location":"daptics_client/#method-print","text":"=======","title":"Method print"},{"location":"daptics_client/#method-print_1","text":"v0.10.0 def print(self) Prints out debugging information about the session. <<<<<<< HEAD","title":"Method print"},{"location":"daptics_client/#method-put_experimental_parameters","text":"=======","title":"Method put_experimental_parameters"},{"location":"daptics_client/#method-put_experimental_parameters_1","text":"v0.10.0 def put_experimental_parameters(self, params) Validates the experimental parameters at the beginning of a session, and starts a \"space\" task. The individual experimental parameter names, types and permissible values in the space definition are specified at the ['space']['table'] key of the params dict .","title":"Method put_experimental_parameters"},{"location":"daptics_client/#arguments_22","text":"params (dict): A Python dict containing the experimental parameters to be used for the session. See the Notes section that describes the required items for the params dict .","title":"Arguments"},{"location":"daptics_client/#returns_23","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a putExperimentalParameters item. The putExperimentalParameters value is a Python dict with information about the \"space\" task.","title":"Returns"},{"location":"daptics_client/#raises_12","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list.","title":"Raises"},{"location":"daptics_client/#notes_12","text":"If the task was successfully started, the task information is stored in the client's task_info attribute. If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"space\" task completes successfully, the result of the task can be accessed at data['putExperimentalParameters']['result'] . See the documentation on the \"space\" task result in the poll_for_current_task method for information on the CSV file generated if the auto_export_path option is set. These are the required items for the params dict : populationSize (int): The number of experiments per replicate. A positive integer. replicates (int): The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space (dict): The experimental space definition. The required items for the space dict are: type (str): The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits (int): For \"mixture\" type spaces, this is the mixture constraint parameter, a non-negative integer. table (dict): The (optional) column headers and rows of parameter data. See an example below. the colHeaders value is ignored when importing or validating the experimental space definition. To maintain uniformity, header and data row elements should be Python strings, even if they represent numeric values. For \"mixture\" type spaces, there should only be 4 columns of data in each row: the name of the parameter, the type of the parameter (which must always be the string \"unit\"), the minimum value of the parameter (a non-negative integer) and the maximum value of the parameter (a positive integer, less than or equal to the totalUnits constraint parameter). For \"factorial\" type spaces, there must be at least 4 columns of data in each row: the name of the parameter, the type of the parameter (a string, either \"numerical\" or \"categorical\"), and at least two possible distinct values that the parameter can have in an experiment. Different parameters can have either 2 or more than 2 possible values. The rows must be all be of the same size, so make sure to pad the rows with fewer values with empty strings at the end. In addition to the required params listed above, optional additional parameters may be submitted. Please contact daptics for more information about these advanced parameters.","title":"Notes"},{"location":"daptics_client/#examples","text":"Here is a mixture space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'mixture', 'totalUnits': 25, 'table': { 'colHeaders': [ 'Name', 'Type', 'Min', 'Max' ], 'data': [ [ 'param1', 'unit', '1', '10' ], [ 'param2', 'unit', '2', '10' ], [ 'param3', 'unit', '4', '8' ], [ 'param4', 'unit', '2', '5' ] ] } } } Here is a factorial space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'factorial', 'table': { 'colHeaders': [ 'Name', 'Type', 'Value.1', 'Value.2', 'Value.3', 'Value.4' ], 'data': [ [ 'param1', 'numerical', '0', '1', '2', '3' ], [ 'param2', 'numerical', '2', '3', '', '' ], [ 'param3', 'numerical', '0', '1', '2', '' ], [ 'param4', 'numerical', '0', '1', '2', '3' ] ] } } } <<<<<<< HEAD","title":"Examples"},{"location":"daptics_client/#method-put_experimental_parameters_csv","text":"=======","title":"Method put_experimental_parameters_csv"},{"location":"daptics_client/#method-put_experimental_parameters_csv_1","text":"v0.10.0 def put_experimental_parameters_csv(self, fname, params) Validates the experimental parameters at the beginning of a session, and starts a \"space\" task. The individual experimental parameter names, types and permissible values in the space definition are read from a CSV file.","title":"Method put_experimental_parameters_csv"},{"location":"daptics_client/#arguments_23","text":"fname (str): The location on the filesystem for a CSV file that will define the experimental space definition. See the Examples section below for an example. params (dict): A Python dict containing the experimental parameters to be used for the session. See the Notes section for more information.","title":"Arguments"},{"location":"daptics_client/#returns_24","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a putExperimentalParameters item. The putExperimentalParameters value is a Python dict with information about the \"space\" task.","title":"Returns"},{"location":"daptics_client/#raises_13","text":"csv.Error If the specified CSV file is incorrectly formatted.","title":"Raises"},{"location":"daptics_client/#notes_13","text":"If the task was successfully started, the task information is stored in the client's task_info attribute. If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"space\" task completes successfully, the result of the task can be accessed at data['putExperimentalParameters']['result'] . See the documentation on the \"space\" task result in the poll_for_current_task method for information on the CSV file generated if the auto_export_path option is set. Items for the params dict are: populationSize (int): The number of experiments per replicate. A positive integer. replicates (int): The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space (dict): The experimental space definition. The single required item for the space dict is: type (str): \"factorial\" or \"mixture\" In addition to the required params listed above, optional additional parameters may be submitted. Please contact daptics for more information about these advanced parameters.","title":"Notes"},{"location":"daptics_client/#examples_1","text":"Here is a space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'factorial', } } The contents of an example CSV file for a \"factorial\" space might be: param1,numerical,0,1,2,3 param2,numerical,2,3,4, param3,numerical,0,1,, param4,numerical,0,1,2,3 Each parameter row in a factorial space definition should have the same number of columns. Parameter rows with fewer than the maximum number of values should have the empty columns at the end of the row, as shown above. The contents of an example CSV file for a \"mixture\" space might be: param1,unit,0,10 param2,unit,5,10 param3,unit,0,10 param4,unit,0,5 Each parameter fow in a mixture space defintion must specify a minimum and maximum unit volume, as shown above. Do not supply a header row for the space definition (for any type), just the parameter rows. <<<<<<< HEAD","title":"Examples"},{"location":"daptics_client/#method-put_experiments","text":"=======","title":"Method put_experiments"},{"location":"daptics_client/#method-put_experiments_1","text":"v0.10.0 def put_experiments(self, experiments_type, experiments) Validate the responses for designed experiments, and any extra experiments for the current generation in the session. This method, or the put_experiments_responses_csv method, must be called before generating the next design, or finalizing the campaign.","title":"Method put_experiments"},{"location":"daptics_client/#arguments_24","text":"experiments_type ( DapticsExperimentsType ): Describes the types of experiments that are being added to the session. If you wish to submit calibrating or existing experimental responses prior to the first design generartion, use INITIAL_EXTRAS_ONLY . If you are submitting the responses for a daptics-generated design, along with any extra experiments, use DESIGNED_WITH_OPTIONAL_EXTRAS . If you wish to submit any final extra experiments when you are satisified with the session's optimization but do not want to include the last generated experimental design use FINAL_EXTRAS_ONLY . Note that this will end the session's optimization and that no more designs will be generated. experiments (dict): A \"table\" of experiments that includes columns, defined in the colHeaders value of the table, for each of the defined space parameters, and a column named 'Response' to record the result of experiments. Each row in the data value for the table represents an individual experiment. If the experiments type is DESIGNED_WITH_OPTIONAL_EXTRAS , you must sumbit at least as many rows as exist in the currently generated design, and the parameter values for these rows must match the design exactly. Additional \"extra\" experiment rows, that use any valid experimental parameter values, can also be provided. For the INITIAL_EXTRAS_ONLY and FINAL_EXTRAS_ONLY experiments types, rows that use any valid experimental parameter values can be provided.","title":"Arguments"},{"location":"daptics_client/#returns_25","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a putExperiments item. The putExperiments value will contain information on the \"update\" task that was started, as described in the return value for the poll_for_current_task method.","title":"Returns"},{"location":"daptics_client/#raises_14","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list.","title":"Raises"},{"location":"daptics_client/#notes_14","text":"If the task was successfully started, the task information is stored in the client's task_info attribute. If the experiments were successfully validated, the following actions may be automatically performed: If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"update\" task completes successfully, the result of the task can be accessed at data['putExperiments']['result'] . If the auto_generate_next_design option is set, a \"generate\" task is started, and the autoGenerateTask item of the putExperiments item will contain information on the \"generate\" task that was started. If the auto_generate_next_design AND auto_task_timeout options are set, the \"generate\" task will be polled until it completes, fails, or times out. If the \"generate\" task completes, the generated design can be accessed at data['putExperiments']['autoGenerateTask']['result']['experiments'] . See the documentation for the poll_for_current_task for more information. See the documentation on the \"update\" and \"generate\" task results in the poll_for_current_task method for information on the CSV files generated if the auto_export_path option is set.","title":"Notes"},{"location":"daptics_client/#examples_2","text":"Here's an expamle of an experiments table: >>> experiments = { 'colHeaders': ['param1', 'param2', 'param3', 'param4', 'Response'], 'data': [ ['0', '4', '1', '1', '3.25'], ['1', '4', '1', '1', '4.5'], ... etc, matching generated design rows ] } <<<<<<< HEAD","title":"Examples"},{"location":"daptics_client/#method-put_experiments_csv","text":"=======","title":"Method put_experiments_csv"},{"location":"daptics_client/#method-put_experiments_csv_1","text":"v0.10.0 def put_experiments_csv(self, experiments_type, fname) Validate the responses for designed experiments, and any extra experiments for the current generation in the session. This method, or the put_experiments_responses method, must be called before generating the next design, or finalizing the campaign.","title":"Method put_experiments_csv"},{"location":"daptics_client/#arguments_25","text":"experiments_type ( DapticsExperimentsType ): Describes the types of experiments that are being added to the session. If you wish to submit calibrating or existing experimental responses prior to the first design generartion, use <code>INITIAL\\_EXTRAS\\_ONLY</code>. If you are submitting the responses for a daptics-generated design, along with any extra experiments, use <code>DESIGNED\\_WITH\\_OPTIONAL\\_EXTRAS</code>. If you wish to submit any final extra experiments when you are satisified with the session's optimization but do not want to include the last generated experimental design use <code>FINAL\\_EXTRAS\\_ONLY</code>. Note that this will end the session's optimization and that no more designs will be generated. fname (str): The location on the filesystem for a CSV file that will define the results of the designed and any extra experiments. See the Examples section below for an example.","title":"Arguments"},{"location":"daptics_client/#returns_26","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a putExperiments item. The putExperiments value will contain information on the \"update\" task that was started, as described in the return value for the poll_for_current_task method.","title":"Returns"},{"location":"daptics_client/#notes_15","text":"If the experiments were successfully validated, the following actions may be automatically performed: If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"update\" task completes successfully, the result of the task can be accessed at data['putExperiments']['result'] . If the auto_generate_next_design option is set, a \"generate\" task is started, and the autoGenerateTask item of the putExperiments item will contain information on the \"generate\" task that was started. If the auto_generate_next_design AND auto_task_timeout options are set, the \"generate\" task will be polled until it completes, fails, or times out. If the \"generate\" task completes, the generated design can be accessed at data['putExperiments']['autoGenerateTask']['result']['experiments'] . See the documentation for the poll_for_current_task for more information. See the documentation on the \"update\" and \"generate\" task results in the poll_for_current_task method for information on the CSV files generated if the auto_export_path option is set.","title":"Notes"},{"location":"daptics_client/#examples_3","text":"A header row must be provided, the columns in the header row must match the names of the parameters defined by the experimental space definition exactly, and a final column named Response must be filled with the results of each experiment row. param1,param2,param3,param4,Response 0,4,1,1,3.25 1,4,1,1,4.5 Each non-header row in the file represents an individual experiment. There must be at least as many experiment rows as the current design has, and the parameter values for these rows must match the design exactly. Additional \"extra\" experiment rows can also be provided. <<<<<<< HEAD","title":"Examples"},{"location":"daptics_client/#method-random_experiment_for_space","text":"=======","title":"Method random_experiment_for_space"},{"location":"daptics_client/#method-random_experiment_for_space_1","text":"v0.10.0 def random_experiment_for_space(self, space, max_response_value=None) Uses a random number generator to select parameter values and optionally to create a random response value.","title":"Method random_experiment_for_space"},{"location":"daptics_client/#arguments_26","text":"space (dict): A Python dict that defines the experimental space. max_response_value (float, optional): If omiited, the experiment is generated with an empty response. If a number, the response value is a randomly generated number in the range [0.0, max_response_value].","title":"Arguments"},{"location":"daptics_client/#returns_27","text":"experiment (list): The list of randomly generated parameter values for an experiment, and the optionally generated response value. Each value is encoded as a string. If max_response_value is not given, the response value will be the empty string. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-random_experiments_with_responses","text":"=======","title":"Method random_experiments_with_responses"},{"location":"daptics_client/#method-random_experiments_with_responses_1","text":"v0.10.0 def random_experiments_with_responses(self, space, design, num_extras=0, max_response_value=5.0) Generates an experiments table where each experiment row contains a randomly generated response value. The experiment rows are optionally composed of \"designed\" rows and \"extra\" rows. The \"designed\" rows have one experiment row for each row in the currently generated design. And the \"extra\" rows contain randomly generated parameter values as well as responses.","title":"Method random_experiments_with_responses"},{"location":"daptics_client/#arguments_27","text":"space (dict): A Python dict that defines the experimental space. design (dict, optional): If supplied, a Python dict that defines the currently generated design as a table. The dict has colHeaders and data items. num_extras: int, optional If non-zero, generate this number of extra rows. The extra rows will be appended to any designed rows. max_response_value (float): The maximum value for generated responses. Each genreated response value is a randomly generated number in the range [0.0, max_response_value].","title":"Arguments"},{"location":"daptics_client/#returns_28","text":"table (dict): A Python dict with colHeaders and data values, representing an experiments table. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-random_parameter_value","text":"=======","title":"Method random_parameter_value"},{"location":"daptics_client/#method-random_parameter_value_1","text":"v0.10.0 def random_parameter_value(self, space_type, param) Uses a random number generator to select a parameter value that is valid for the space type and specified parameter definition.","title":"Method random_parameter_value"},{"location":"daptics_client/#arguments_28","text":"space_type (str): The space type, either \"mixture\" or \"factorial\". param (list): The row from the experimental space definition table that defines a particular parameter in the space (name, type, and min / max or allowed values for the parameter). Each element in the list is encoded as a string.","title":"Arguments"},{"location":"daptics_client/#returns_29","text":"param_value (str): A valid value for the parameter, encoded as a string. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-reconnect_session","text":"=======","title":"Method reconnect_session"},{"location":"daptics_client/#method-reconnect_session_1","text":"v0.10.0 def reconnect_session(self, session_id) Finds an existing session and returns session information.","title":"Method reconnect_session"},{"location":"daptics_client/#arguments_29","text":"session_id (str): The session id to find.","title":"Arguments"},{"location":"daptics_client/#returns_30","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a session item. The session value is a Python dict containing information about the session's name, description, experimental space parameters, experiments history, and any active tasks.","title":"Returns"},{"location":"daptics_client/#raises_15","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list.","title":"Raises"},{"location":"daptics_client/#notes_16","text":"Sets client attributes for the reconnected session. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-run_task_async","text":"=======","title":"Method run_task_async"},{"location":"daptics_client/#method-run_task_async_1","text":"v0.10.0 def run_task_async(self, document, vars) Performs validation on the GraphQL mutation document and then executes the query, returning both the data and errors items from the JSON response. Before submitting the query, a \"taskUpdated\" subscription is set up, and the asynchronous loop processes subscription data messages, eventually passing task progress and status information to the coroutine specified by the client's task_updated_coroutine attribute. <<<<<<< HEAD","title":"Method run_task_async"},{"location":"daptics_client/#method-save","text":"=======","title":"Method save"},{"location":"daptics_client/#method-save_1","text":"v0.10.0 def save(self, fname) Saves the user and session id to a JSON file.","title":"Method save"},{"location":"daptics_client/#arguments_30","text":"fname (str): The file path to save the client state to.","title":"Arguments"},{"location":"daptics_client/#notes_17","text":"There is nothing returned by this method. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-simulate_experiment_responses","text":"=======","title":"Method simulate_experiment_responses"},{"location":"daptics_client/#method-simulate_experiment_responses_1","text":"v0.10.0 def simulate_experiment_responses(self, experiments=None) Generates values for the \"Response\" column. The values are a substitute for actual experimental results, computed with a synthetic data generator that takes as an input each experiment (i.e. each row of the experiments argument) and gives as output a single number, added as a 'Response'. The data generator samples a complex surface, constructed to have several peaks that are randomly placed in the space. There is a global optimum (highest peak), but optimization runs often will find one of the lower peaks.","title":"Method simulate_experiment_responses"},{"location":"daptics_client/#arguments_31","text":"experiments (dict): A \"table\" of experiments that includes columns, defined in the colHeaders value of the table, for each of the defined space parameters, and a column named 'Response' to record the result of experiments. Each row in the data value for the table represents an individual experiment.","title":"Arguments"},{"location":"daptics_client/#returns_31","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a simulateExperiments item. See the documentation for the get_experiments method for a description of the values returned.","title":"Returns"},{"location":"daptics_client/#raises_16","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list. <<<<<<< HEAD","title":"Raises"},{"location":"daptics_client/#method-simulate_experiment_responses_csv","text":"=======","title":"Method simulate_experiment_responses_csv"},{"location":"daptics_client/#method-simulate_experiment_responses_csv_1","text":"v0.10.0 def simulate_experiment_responses_csv(self, fname) Generates values for the \"Response\" column. The values are a substitute for actual experimental results, computed with a synthetic data generator that takes as an input each experiment (i.e. each row of the experiments argument) and gives as output a single number, added as a 'Response'. The data generator samples a complex surface, constructed to have several peaks that are randomly placed in the space. There is a global optimum (highest peak), but optimization runs often will find one of the lower peaks.","title":"Method simulate_experiment_responses_csv"},{"location":"daptics_client/#arguments_32","text":"fname (str): The location on the filesystem for a CSV file that will define the parameters for designed and any extra experiments.","title":"Arguments"},{"location":"daptics_client/#returns_32","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a simulateExperiments item. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-space_table_column_names","text":"=======","title":"Method space_table_column_names"},{"location":"daptics_client/#method-space_table_column_names_1","text":"v0.10.0 def space_table_column_names(self, space) Generates the canonically formatted column header names for the experimental space table.","title":"Method space_table_column_names"},{"location":"daptics_client/#arguments_33","text":"space (dict): A Python dict that defines the experimental space.","title":"Arguments"},{"location":"daptics_client/#returns_33","text":"column_headers (list): A list of strings to build the column header for an experimental space. The list will contain \"Name\", \"Type\", \"Min\" and \"Max\" for a \"mixture\" space, or \"Name\", \"Type\", \"Value.1\", \"Value.2\", etc. for a \"factorial\" space. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-space_table_value_column_name","text":"=======","title":"Method space_table_value_column_name"},{"location":"daptics_client/#method-space_table_value_column_name_1","text":"v0.10.0 def space_table_value_column_name(self, space_type, i) Formats a single column name for the header row in an experimental space table.","title":"Method space_table_value_column_name"},{"location":"daptics_client/#arguments_34","text":"space_type (str): \"mixture\" or \"factorial\" i (int): Index of the value column (starting at zero).","title":"Arguments"},{"location":"daptics_client/#returns_34","text":"column_name (str): \"Min\" or \"Max\" for a \"mixture\" space type, or \"Value.1\", \"Value.2\", etc. for a \"factorial\" space type. <<<<<<< HEAD","title":"Returns"},{"location":"daptics_client/#method-start_simulation","text":"=======","title":"Method start_simulation"},{"location":"daptics_client/#method-start_simulation_1","text":"v0.10.0 def start_simulation(self, ngens, params) Starts a simulation task for several design generations, specifying the desired experimental parameters and the number of generations to run.","title":"Method start_simulation"},{"location":"daptics_client/#arguments_35","text":"ngens (int): The number of generations to attempt to design. Must be greater than zero. If the experimental space is exhausted the actual number of generations designed may be less than this number. params (dict): A Python dict containing the experimental parameters to be used for the session. See the Notes section that describes the required items for the params dict .","title":"Arguments"},{"location":"daptics_client/#returns_35","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a runSimulation item. The runSimulation value contains information on the \"simulate\" task that was started, as described in the return value for the poll_for_current_task method.","title":"Returns"},{"location":"daptics_client/#raises_17","text":"GraphQLError If no data was returned by the query request, a GraphQLError is raised, containing the message for the first item in the GraphQL response's errors list.","title":"Raises"},{"location":"daptics_client/#notes_18","text":"Items to be specified in the params dict are: populationSize (int): The number of experiments per replicate. A positive integer. replicates (int): The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space (dict): The experimental space definition. Items in the space dict are: type (str): The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits (int): For \"mixture\" type spaces, this is the mixture constraint parameter, a non-negative integer. table (dict): The (optional) column headers and rows of parameter data. See an example below. the colHeaders value is ignored when importing or validating the experimental space definition. If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"simulate\" task completes successfully, the result of the task can be accessed at data['runSimulation']['result'] . See the documentation on the \"simulate\" task result in the poll_for_current_task method for information on the CSV file generated if the auto_export_path option is set. For more examples of how to submit space parameters, please see the documentation for the put_experimental_parameters method. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-start_simulation_csv","text":"=======","title":"Method start_simulation_csv"},{"location":"daptics_client/#method-start_simulation_csv_1","text":"v0.10.0 def start_simulation_csv(self, ngens, fname, params) Run a simulation for several design generations, specifying the desired experimental parameters and the number of generations to run. The experimental space is read from a CSV file. If the space parameters are successfully validated a \"simulate\" task is started.","title":"Method start_simulation_csv"},{"location":"daptics_client/#arguments_36","text":"ngens (int): The number of generations to attempt to design. Must be greater than zero. If the experimental space is exhausted the actual number of generations designed may be less than this number. fname (str): The location on the filesystem for a CSV file that will define the experimental space definition. See the Examples section below for an example. params (dict): A Python dict containing the experimental parameters to be used for the session. See the Notes section that describes the required items for the params dict .","title":"Arguments"},{"location":"daptics_client/#returns_36","text":"data (dict): The JSON response from the GraphQL request, a Python dict with a runSimulation item. The runSimulation value will contain information on the \"simulate\" task that was started, as described in the return value for the poll_for_current_task method.","title":"Returns"},{"location":"daptics_client/#raises_18","text":"csv.Error If the specified CSV file is incorrectly formatted.","title":"Raises"},{"location":"daptics_client/#notes_19","text":"Items to be specified in the params dict are: populationSize (int): The number of experiments per replicate. A positive integer. replicates (int): The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space (dict): The experimental space definition. Items in the space dict are: type (str): The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits (int): For \"mixture\" type spaces, this is the mixture constraint parameter, a non-negative integer. If the auto_export_path option is set, a CSV file of each generation of simulated experiments is saved at auto_genN_experiments.csv . If the auto_task_timeout option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the \"simulate\" task completes successfully, the result of the task can be accessed at data['runSimulation']['result'] . See the documentation on the \"simulate\" task result in the poll_for_current_task method for information on the CSV file generated if the auto_export_path option is set. For more examples of how to submit space parameters, please see the documentation for the put_experimental_parameters method. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#method-wait_for_current_task","text":"=======","title":"Method wait_for_current_task"},{"location":"daptics_client/#method-wait_for_current_task_1","text":"v0.10.0 def wait_for_current_task(self, task_type=None, timeout=None) Wraps poll_for_current_task in a loop. Repeat until task disappears, when status is success or failure .","title":"Method wait_for_current_task"},{"location":"daptics_client/#arguments_37","text":"task_type ( DapticsTaskType , optional): SPACE , UPDATE , GENERATE , SIMULATE , ANALYTICS , or None. If None is supplied (the default), find the most recently started task of any type. timeout (float, optional): Maximum number of seconds to wait. If None or a negative number, wait forever.","title":"Arguments"},{"location":"daptics_client/#returns_37","text":"data (dict): The data item of the GraphQL response, a Python dict with a currentTask item, described below. errors (list): The errors item of the GraphQL response. Each item in the list is guaranteed to have a message item.","title":"Returns"},{"location":"daptics_client/#notes_20","text":"Either data or errors may be None. See the documentation on the poll_for_current_task method for more information about the data item returned for different types of tasks, and for how task completion affects attributes of the client instance. <<<<<<< HEAD","title":"Notes"},{"location":"daptics_client/#class-dapticsexperimentstype","text":"=======","title":"Class DapticsExperimentsType"},{"location":"daptics_client/#class-dapticsexperimentstype_1","text":"v0.10.0 class DapticsExperimentsType(value, names=None, *, module=None, qualname=None, type=None, start=1) Enumerates the purpose for the experiments that are being uploaded to the session via the put_experiments or put_experiments_csv methods. <<<<<<< HEAD","title":"Class DapticsExperimentsType"},{"location":"daptics_client/#class-variables_2","text":"=======","title":"Class variables"},{"location":"daptics_client/#class-variables_3","text":"v0.10.0 <<<<<<< HEAD","title":"Class variables"},{"location":"daptics_client/#variable-designed_with_optional_extras","text":"=======","title":"Variable DESIGNED_WITH_OPTIONAL_EXTRAS"},{"location":"daptics_client/#variable-designed_with_optional_extras_1","text":"v0.10.0 The experiments submitted are designed experiments, and may also include optional extra experiments. <<<<<<< HEAD","title":"Variable DESIGNED_WITH_OPTIONAL_EXTRAS"},{"location":"daptics_client/#variable-initial_extras_only","text":"=======","title":"Variable INITIAL_EXTRAS_ONLY"},{"location":"daptics_client/#variable-initial_extras_only_1","text":"v0.10.0 The experiments submitted are initial experiments. No designed experiments are included. <<<<<<< HEAD","title":"Variable INITIAL_EXTRAS_ONLY"},{"location":"daptics_client/#class-dapticstasktype","text":"=======","title":"Class DapticsTaskType"},{"location":"daptics_client/#class-dapticstasktype_1","text":"v0.10.0 class DapticsTaskType(value, names=None, *, module=None, qualname=None, type=None, start=1) Enumerates the different asynchronous tasks that the daptics system can create and that can be searched for using the poll_for_current_task or wait_for_current_task methods. <<<<<<< HEAD","title":"Class DapticsTaskType"},{"location":"daptics_client/#class-variables_4","text":"=======","title":"Class variables"},{"location":"daptics_client/#class-variables_5","text":"v0.10.0 <<<<<<< HEAD","title":"Class variables"},{"location":"daptics_client/#variable-analytics_2","text":"=======","title":"Variable ANALYTICS"},{"location":"daptics_client/#variable-analytics_3","text":"v0.10.0 A task that generates analytics files at the current generation. <<<<<<< HEAD","title":"Variable ANALYTICS"},{"location":"daptics_client/#variable-generate","text":"=======","title":"Variable GENERATE"},{"location":"daptics_client/#variable-generate_1","text":"v0.10.0 The task type to be searched was created by the generate_design method. <<<<<<< HEAD","title":"Variable GENERATE"},{"location":"daptics_client/#variable-simulate","text":"=======","title":"Variable SIMULATE"},{"location":"daptics_client/#variable-simulate_1","text":"v0.10.0 A task that simulates a given number of experimental generations. <<<<<<< HEAD","title":"Variable SIMULATE"},{"location":"daptics_client/#variable-space","text":"=======","title":"Variable SPACE"},{"location":"daptics_client/#variable-space_1","text":"v0.10.0 The task type to be searched was created by the put_experimental_parameters or put_experimental_parameters_csv methods. <<<<<<< HEAD","title":"Variable SPACE"},{"location":"daptics_client/#variable-update","text":"=======","title":"Variable UPDATE"},{"location":"daptics_client/#variable-update_1","text":"v0.10.0 The task type to be searched was created by the put_experiments or put_experimens_csv methods. <<<<<<< HEAD","title":"Variable UPDATE"},{"location":"daptics_client/#class-graphqlerror","text":"=======","title":"Class GraphQLError"},{"location":"daptics_client/#class-graphqlerror_1","text":"v0.10.0 class GraphQLError(message) An error raised by converting the first item in the errors item of the GraphQL response. <<<<<<< HEAD","title":"Class GraphQLError"},{"location":"daptics_client/#class-invalidconfigerror","text":"=======","title":"Class InvalidConfigError"},{"location":"daptics_client/#class-invalidconfigerror_1","text":"v0.10.0 class InvalidConfigError(path) An error raised if the option configuration file cannot be parsed. <<<<<<< HEAD","title":"Class InvalidConfigError"},{"location":"daptics_client/#class-invalidexperimentstypeerror","text":"=======","title":"Class InvalidExperimentsTypeError"},{"location":"daptics_client/#class-invalidexperimentstypeerror_1","text":"v0.10.0 class InvalidExperimentsTypeError(experiments_type) An error raised if the type of experiments is not a valid type. <<<<<<< HEAD","title":"Class InvalidExperimentsTypeError"},{"location":"daptics_client/#class-invalidspaceparametererror","text":"=======","title":"Class InvalidSpaceParameterError"},{"location":"daptics_client/#class-invalidspaceparametererror_1","text":"v0.10.0 class InvalidSpaceParameterError(space_type, param) An error raised if the specified experimental space parameters are missing or invalid. <<<<<<< HEAD","title":"Class InvalidSpaceParameterError"},{"location":"daptics_client/#class-invalidtasktypeerror","text":"=======","title":"Class InvalidTaskTypeError"},{"location":"daptics_client/#class-invalidtasktypeerror_1","text":"v0.10.0 class InvalidTaskTypeError(task_type) An error raised if the task type specified was not a valid type. <<<<<<< HEAD","title":"Class InvalidTaskTypeError"},{"location":"daptics_client/#class-missingconfigerror","text":"=======","title":"Class MissingConfigError"},{"location":"daptics_client/#class-missingconfigerror_1","text":"v0.10.0 class MissingConfigError(path) An error raised if the option configuration file cannot be found. <<<<<<< HEAD","title":"Class MissingConfigError"},{"location":"daptics_client/#class-nextgenerationerror","text":"=======","title":"Class NextGenerationError"},{"location":"daptics_client/#class-nextgenerationerror_1","text":"v0.10.0 class NextGenerationError(gen) An error raised if the generation number specified is not the next generation number for the session. <<<<<<< HEAD","title":"Class NextGenerationError"},{"location":"daptics_client/#class-nocredentialserror","text":"=======","title":"Class NoCredentialsError"},{"location":"daptics_client/#class-nocredentialserror_1","text":"v0.10.0 class NoCredentialsError() An error raised if no login credentials were specified. <<<<<<< HEAD","title":"Class NoCredentialsError"},{"location":"daptics_client/#class-nocurrenttaskerror","text":"=======","title":"Class NoCurrentTaskError"},{"location":"daptics_client/#class-nocurrenttaskerror_1","text":"v0.10.0 class NoCurrentTaskError() An error raised if no current task could be found, when one was expected. <<<<<<< HEAD","title":"Class NoCurrentTaskError"},{"location":"daptics_client/#class-nohosterror","text":"=======","title":"Class NoHostError"},{"location":"daptics_client/#class-nohosterror_1","text":"v0.10.0 class NoHostError() An error raised if no host value was specified. <<<<<<< HEAD","title":"Class NoHostError"},{"location":"daptics_client/#class-sessionparametersnotvalidatederror","text":"=======","title":"Class SessionParametersNotValidatedError"},{"location":"daptics_client/#class-sessionparametersnotvalidatederror_1","text":"v0.10.0 class SessionParametersNotValidatedError() An error raised if the method cannot be completed, because the experimental space parameters for the session have not been saved and validated yet. <<<<<<< HEAD","title":"Class SessionParametersNotValidatedError"},{"location":"daptics_client/#class-spaceordesignrequirederror","text":"=======","title":"Class SpaceOrDesignRequiredError"},{"location":"daptics_client/#class-spaceordesignrequirederror_1","text":"v0.10.0 class SpaceOrDesignRequiredError() An error raised if neither an experimental space nor an experimental design was submitted for generating random experiments. <<<<<<< HEAD","title":"Class SpaceOrDesignRequiredError"},{"location":"daptics_client/#class-taskfailederror","text":"=======","title":"Class TaskFailedError"},{"location":"daptics_client/#class-taskfailederror_1","text":"v0.10.0 class TaskFailedError(type_) An error raised if a completed task did not return a valid result. <<<<<<< HEAD","title":"Class TaskFailedError"},{"location":"daptics_client/#class-tasktimeouterror","text":"=======","title":"Class TaskTimeoutError"},{"location":"daptics_client/#class-tasktimeouterror_1","text":"v0.10.0 class TaskTimeoutError() An error raised if a task was not completed within the specified timeout. <<<<<<< HEAD","title":"Class TaskTimeoutError"},{"location":"daptics_client/#class-tokenauth","text":"=======","title":"Class TokenAuth"},{"location":"daptics_client/#class-tokenauth_1","text":"v0.10.0 class TokenAuth() A callable authentication object for the Python requests moudule. If the token attribute is set, the __call__ method will insert an \"Authorization\" header with a \"Bearer\" token into the HTTP request.","title":"Class TokenAuth"},{"location":"daptics_client/#attributes","text":"token (str): An access token obtained from the API for the authenticated user. Generated by pdoc 0.8.3 ( https://pdoc3.github.io ).","title":"Attributes"},{"location":"graphql_api/","text":"Daptics GraphQL API Query (RootQueryType) Field Argument Type Description currentTask Task Get the progress (if not completed) or the result (if completed) of the last un-archived task in the session. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. taskId String If provided, only returns information if the task's id matches. type String If provided, only returns information if the task's type ('space', 'update', 'generate', 'simulate', or 'analytics') matches. experiments Experiments Get the designed or completed experiments for the current or a previous generation. For non-admin users, returns information only if the session is owned by the user. designOnly Boolean ! If this argument is true , return only the designed experiments, not any extra experiments, and without responses. gen Int (optional) The generation number to fetch. Use zero to get any initial experiments. Return the latest designed generation (without responses) if omitted. sessionId String ! The session's id. experimentsHistory [ Experiments ] Get the experiments and responses for all generations. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. server Server Get the server by id. Admin-level users only. serverId String ! The server's id (unique name, like 'localhost'). servers [ Server ] Search all servers. Admin-level users only. q String A string to filter search on. If provided, will limit the response to matches on a server's name or url. status String Status to filter search on ('up' or 'down'). If provided, will limit the response to matches on a server's current runtime status. session Session Get PDT session information. For admin-level user, get the session by id. For non-admin user, get the session only if it is owned by the user. sessionId String ! The session's id. sessionParameters SessionParameters Get the experimental space and project parameters for a given session. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. sessions [ SessionSummary ] Search sessions. For Admin-level users, returns search over all sessions. active Boolean If provided, list only active or inactive sessions. demo Boolean If provided, list only demo or standard (not demo) sessions. q String If provided, list only sessions with a partially matching id, tag, name or description. userId String If provided, list only the sessions for this user. tasks [ Task ] Get list of all, or just un-archived tasks in the session. For non-admin users, returns information only if the session is owned by the user. includeArchived Boolean If omitted or false, limits the response to tasks that have not completed. sessionId String ! The session's id. transaction Transaction Get the transaction by id. Admin-level users only. txnId String ! The transaction's id. transactions [ Transaction ] Search transactions. For Admin-level users, returns search over all transactions. q String A string to filter search on. If provided, will limit the response to matches on the transaction's memo. sessionId String If provided, list only the transactions for this session. txnKind String If provided, list only the transactions matching this kind. txnStatus String If provided, list only the transactions matching this status. txnType String If provided, list only the transactions matching this type. userId String If provided, list only the transactions for this user. user User For admin-level user, get a user by id. For non-admin user, return the currently logged-in user if the user_id matches. userId String ! The user's id (a generated base-36 hash). users [ UserSummary ] For admin-level user, search all users. For non-admin user, returns a list containing just the currently logged-in user. q String A string to filter search on. If provided, will limit the response to matches on a user's first name, last name or email address. Mutation (RootMutationType) Field Argument Type Description changePassword PasswordChanged Change a user's password, authenticating via header or password change token. input ChangePasswordInput ! The data used to authenticate and set the new password. userId String The user's id, required if not authenticating via token. createAnalytics Task Start a 'generate' task to create analytics files for all generations in the session. sessionId String ! The session's id. createSession Session Create and start a new PDT session on a server, installing and initializing required application and user data files on the server. session NewSessionInput ! The target server, the session's name and description, and whether this is a demo or regular session. createUser UserCreated Create an unverified user account. The account's email address must be verified before it is activated. createToken Boolean If true, an email message with a verification link will be mailed to the user. promotionCode String If present, the promotion code that will be applied to the new user. user NewUserInput ! The first name, last name, email address and password for the new user. generateDesign Task Start a 'generate' task using initial, extra and/or generated experiment responses. gen Int ! The generation number of the previously validated experiments and responses. sessionId String ! The session's id. haltSession HaltSessionResult Disconnect from a previously created PDT session. sessionId String ! The sesssion's id as returned by the createSession mutation. login AuthenticationToken Log in a user by email and password. Use the returned token to authenticate other requests. Use the returned user_id to create new sessions. email String ! The user's email address. password String ! The user's password (in cleartext). logout AuthenticationToken Log out a user, by revoking the access token. Returns information about the revoked token. token String ! The access token to revoke. putExperimentalParameters Task Validate and start a 'space' task to save a session's experimental space parameters (space type, population size, replicates, total volume and experimental parameter definitions). params SessionParametersInput ! The experimental space parameters to use for the session. sessionId String ! The session's id. putExperiments Task Validate initial, extra and/or generated experiment responses. experiments ExperimentsInput ! The experiments and responses to validate and save. sessionId String ! The session's id. restartSession Session Restart a previously created PDT session, re-initializing application and user data files. sessionId String ! The sesssion's id as returned by the createSession mutation. runSimulation Task Validate and start a 'simulate' task to process several design generations. ngens Int ! The number of design generations to attempt. params SessionParametersInput ! The experimental space parameters to use for the session. sessionId String ! The session's id. sendToken TokenSent Create and send a new verification or password reset token to a user. email String ! The user's email address. tokenType String ! The type of token requested ( verify or reset ). simulateResponses Experiments Generate simulated experiment responses for the current generation. experiments DataFrameInput (Optional) The experiments for which responses will be generated, including initial or extra experiments. sessionId String ! The session's id. updateTask Task Update, cancel or archive a task. For advanced users only! sessionId String ! The session's id. task TaskInput ! The task id and disposition. updateUserProfile UserProfile Update the user's profile. profile UserProfileInput ! The first name, last name, email address and other information about the user. userId String ! The user's id. verifyUser UserProfile Verify and activate an inactive user account. If successful (token matches and has not expired and user account is inactive), return the user account profile. Normally, verification tokens are sent to a non-API endpoint, but this mutation can also be used. token String ! The verification token that was emailed to the user. Objects Analytics Information about the analytics files available for the specified generation in a session. Field Argument Type Description files [ AnalyticsFileInfo ] The list of available file titles and locations. gen Int ! The last completed generation number. sessionId String ! The session's id. AnalyticsFileInfo Information about a single analytics file (PDF). Field Argument Type Description filename String ! The file's name, like 'RespSortBarplotSequence.pdf'. title String ! The file's title, like 'Response Barplot Time Series'. url String ! The file's url, like 'http://localhost:4041/session/sess_id/analytics/gen/1/RespSortBarplotSequence.pdf'. AnalyticsTaskResult Result of a create analyticss task. Field Argument Type Description analytics Analytics Analytics file information. errors [ CategorizedError ] Errors encountered when validating the experiments. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('analytics'). ApiParameters Parameters that a session must use to access other resources. Field Argument Type Description apiBaseUri String ! The URL for the session user to use to access the API. apiKey String ! The 'API key' for the session user to use to authenticate to the API. loginUri String ! The URL for the session user to use to log in. AuthenticationToken A user access (a JWT encoded and signed) token, used to authenticate to the API. Field Argument Type Description claims String ! All the claims stored in the token. createdAt DateTime ! The date and time that the token was created. expiresAt DateTime ! The date and time that the token will expire. status String ! The status of the the token ('active' or 'revoked'). token String ! The token. Use this as the 'Bearer' value for the HTTP authorization header. type String ! The type of token ('access'). user UserProfile The user account associated with this token. CampaignInfo Information on current and remaining generations. Field Argument Type Description completed Boolean ! True if the campaign has completed (no additional experiments can be generated). gen Int ! The generation number for the last-designed generation. -1 means experimental space parameters have not been validated. remaining Int The number of remaining generations in the session, if available. CategorizedError An error encountered while processing a query or mutation. Field Argument Type Description category String The type of error: 'validation', 'execution', 'system'. fatalError Boolean True if the error is fatal. message String ! A description of the error. path [ String !] For validation errors, the path to the invalid input field. systemError Boolean True if the error is an internal system error. CreateTaskResult Result of a create session task. Field Argument Type Description active Boolean ! True if this is an active (non-archived) session. demo Boolean ! True if this was created as a demo session. description String ! The session's description. errors [ CategorizedError ] Errors encountered when creating the session. host String ! The id for the server associated with the session. name String ! The session's name (unique for the associated user). sessionId String ! The session's id. tag String ! The session's (unique) tag. taskId String ! The task's id. type String ! The task's type ('create'). version String The build version for the session, if available. DataFrame A representation of a data table (similar to a CSV file). Numerical data is converted to strings, and NULL data is converted to empty strings. Field Argument Type Description colHeaders [ String ]! The header row for the table. data [[ String ]!]! A list of rows containing data. Each row in turn is a list of strings. index [ String ] If returned, the row names for table. ExperimentalSpace The definition for a session's experimental space. Field Argument Type Description spaceSize Int The number of possible or explorable parameter combinations. table DataFrame ! The table of experimental parameters. totalUnits Int For mixture spaces, the total number of volume units. type String ! The space's type ('factorial' or 'mixture'). ExperimentalSpaceTemplate A system-defined template for an experimental space. Field Argument Type Description name String ! The type of template, ('factorial-default', 'mixture-default', 'factorial-demo-default', or 'mixture-demo-default'). template ExperimentalSpace ! The experimental space parameters for this template. Experiments Information about initial or subsequent experiments in a session. Field Argument Type Description designRows Int The number of experiments generated by the system. gen Int ! The generation number for the experiments. hasResponses Boolean True if the experiment data in the associated table contains responses. table DataFrame The experiment inputs (and possible responses) for the experiments. validated Boolean True if the experiment data for this generation has been validated. GenerateTaskResult Result of a validate experiments task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experiments. experiments Experiments Designed experiments for current generation. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('generate'). HaltSessionResult Information about a session that was disconnected. Field Argument Type Description action String ! The action taken to halt the session. sessionId String ! The session's id. status String ! The current connection status of the session. Loadavg Process loadavg statistics for a linux server. Field Argument Type Description load1 Float 1 minute loadavg. load15 Float 15 minute loadavg. load5 Float 5 minute loadavg. PasswordChanged Confirming information for a password change. Field Argument Type Description updatedAt DateTime ! The time that the password was updated. RootSubscriptionType Field Argument Type Description taskUpdated Task Subscribe to updates for long-running tasks (creation, progress and completion). sessionId String Filter by session: the id of the session whose tasks are to be be monitored. Server Information about a PDT server. Field Argument Type Description bindir String ! The server's filesystem path to basic executable scripts (deprecated). cores Int The number of cores reported for the server. cost Float The last calulated cost metric for the server. host String ! The server's fully qualified hostname. loadavg Loadavg The last reported loadavg statistics for the server. procs Int The last reported number of processes running on the server. serverId String ! The server's id (a unique nickname or unqualified hostname). sshHost String ! The server's SSH hostname (deprecated). status String ! The server's current runtime status ('up' or 'down'). updatedAt DateTime ! The date and time that the data for the server was last updated. url String ! The server's root URL. Session Complete information about a session. Field Argument Type Description active Boolean ! True if this is an active (non-archived) session. api ApiParameters ! API location and key information. auth AuthenticationToken Authorization information, if available. campaign CampaignInfo ! Generation information. demo Boolean ! True if this was created as a demo session. description String ! The session's description. didCrash Boolean ! True if this session crashed. didRestart Boolean ! True if this session was restarted. experiments Experiments Designed experiments for current generation. host String ! The id for the server associated with the session. latestCompletedExperiments Experiments Completed experiments from the previous generation. name String ! The session's name (unique for the associated user). params SessionParameters ! Current unvalidated or validated experimental space parameters. platformMode String ! Settings for the runtime platform (`development`, `test` or `production`). sessionId String ! The session's id. spaceTemplates [ ExperimentalSpaceTemplate !]! Experimental space parameter templates that can be used as examples. startedAt DateTime The date and time that this session was last started. tag String ! The session's (unique) tag. tasks [ TaskSummary ] Non-archived tasks, active or completed, in this session. user UserProfile The user profile associated with the session. version String The build version for the session, if available. SessionParameters Information about the experimental space parameters for a PDT session. Field Argument Type Description designCost Int If the experimental space has been validated, the cost in PDT credits for each design generation. populationSize Int ! The experimental space's population size. replicates Int ! The number of replicates for the experimental space. space ExperimentalSpace ! The experimental space type and parameters. validated Boolean ! True if the session parameters (including the space) were validated. SessionSummary Summary information about a session. Field Argument Type Description active Boolean ! True if this is an active (non-archived) session. campaign CampaignInfo Generation information, if available. demo Boolean ! True if this was created as a demo session. description String ! The session's description. host String ! The id for the server associated with the session. name String ! The session's name (unique for the associated user). params SessionParameters Current unvalidated or validated experimental space parameters, if available. sessionId String ! The session's id. tag String ! The session's (unique) tag. user UserProfile The user profile associated with the session. version String The build version for the session, if available. SimulateTaskResult Result of a simulate experiments task. Field Argument Type Description campaign CampaignInfo ! Information on the last generation. errors [ CategorizedError ] Errors encountered when validating the experimental space. experimentsHistory [ Experiments ] Experiments and responses for all generations. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('simulate'). SpaceTaskResult Result of a validate experimental space parameters task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experimental space. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('space'). Task Information on a long-running task in a daptics session. Field Argument Type Description archived Boolean ! True if the task is no longer active and has been flagged as archived. description String The task's description. errors [ CategorizedError ] Errors returned by a failed or canceled task. gen Int ! The generation number when the task was started. progress TaskProgress Progress message reported by a currently executing task. result TaskResult The validated session parameters or generated experimental design result returned by a completed task. sessionId String ! The session's id. startedAt DateTime The date and time the task was started. status String ! The task's status ('new', 'running', 'success', 'failed', or 'canceled'). taskId String ! The task's id. type String ! The task's type ('space', 'update', 'generate', 'simulate', or 'analytics'). TaskProgress Progress information about a currently executing task. Field Argument Type Description message String ! A description of the last activity returned by the task. percent Int The completion percentage, if available. phase String The task's phase ('allocating', 'validating', 'executing', 'detached', or 'completed'). TaskSummary Summary information on a long-running task in a daptics session. Field Argument Type Description description String The task's description. sessionId String ! The session's id. startedAt DateTime The date and time the task was started. status String ! The task's status ('new', 'running', 'success', 'failed', or 'canceled'). taskId String ! The task's id. type String ! The task's type ('space', 'update', 'generate', 'simulate', or 'analytics'). TokenSent Confirming information returned when a verification code was sent to an unverified user. Field Argument Type Description sentAt DateTime ! The time when the code was delivered. sentTo [ String !]! The email address(es) the code was delivered to. tokenType String ! The type of token sent to the user. Transaction Information about a single pending, posted, or canceled financial transaction. Field Argument Type Description amountInCents Int ! The amount of the transaction (debit as negative, credit as positive), in cents. amountInPdt Int ! The amount of the transaction (debit as negative, credit as positive), in PDT credits. createdAt DateTime ! The date and time that the transaction was created. gatewayTransactionId String The payment processor's transaction id, if any. memo String ! A description of the transacation. promotionCode String The promotion code, if any. refTxnId String The transaction id of the original transaction if this is transaction is a refund. remainingBalanceInCents Int The user account's remaining available balance, in cents, after this transaction. remainingBalanceInPdt Int The user account's remaining available balance, in PDT credits, after this transaction. sessionId String The id of the associated session, if any. taskId String The id of the ('generate') task associated with the transaction, if any. txnAuthor String ! The user id of the user who created the transaction. txnId String ! The transaction's id (a generated hash). txnKind String ! The kind of the transaction. (`pdt_charge`, `sale`, `refund`, `sign_up`, `coupon`, or `bonus`). txnStatus String ! The status of the transaction (`authorized`, `posted`, or `canceled`). txnType String ! The type of the transaction. (`session`, `braintree`, `promotion` or `admin`). updatedAt DateTime ! The date and time that the transaction was last updated. user UserProfile ! Profile and activity information for the associated user's account. UpdateTaskResult Result of a put experiments task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experiments. experiments Experiments Validated experiments saved in current generation. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('update'). User Full information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). currentBalanceInCents Int ! The currently available balance for the user's account, in cemts. currentBalanceInPdt Int ! The currently available balance for the user's account, in PDT credits. email String ! The user's email address. firstName String ! The user's first name. lastActiveSession String The session id of the last active session. lastLoginAt DateTime The date and time that the user account last logged into a PDT session. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. sessions [ SessionSummary ]! The sessions owned by the user. state String The user's state or province code (3 characters maximum). status String ! The user's account status ('unverified', 'active', or 'disabled'). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). updatedAt DateTime ! The date and time that data in the user's account was last updated. userId String ! The user's id. userLevel String ! The user's permission level. zip String The user's postal code. UserCreated Confirming information returned when a user account was successfully created. Field Argument Type Description email String The new user's email address. firstName String The new user's first name. lastName String The new user's last name. promotionCode String The promotion code applied to the new user account. regDate DateTime ! The date and time that the new user's account was created. UserProfile Profile information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). email String ! The user's email address. firstName String ! The user's first name. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. state String The user's state or province code (3 characters maximum). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). userId String ! The user's id. zip String The user's postal code. UserSummary Profile and activity information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). currentBalanceInCents Int ! The currently available balance for the user's account, in cemts. currentBalanceInPdt Int ! The currently available balance for the user's account, in PDT credits. email String ! The user's email address. firstName String ! The user's first name. lastActiveSession String The session id of the last active session. lastLoginAt DateTime The date and time that the user account last logged into a PDT session. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. state String The user's state or province code (3 characters maximum). status String ! The user's account status ('unverified', 'active', or 'disabled'). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). updatedAt DateTime ! The date and time that data in the user's account was last updated. userId String ! The user's id. userLevel String ! The user's permission level. zip String The user's postal code. Inputs AdditionalParameterInput An advanced experimental space parameter. Field Type Description jsonValue String ! The parameter's value, encoded as a JSON string. name String ! The parameter name. ChangePasswordInput Input fields for changing the password on a user account. Field Type Description email String The user's email address, required if changing via token authentication. password String ! The cleartext password for the user account. passwordConfirmation String ! The cleartext password, again, for the user account. token String The password change token, required if changing via token authentication. DataFrameInput Table data for experimental parameters or experimental responses (similar to a CSV file). Field Type Description colHeaders [ String !]! Column headers for the table. data [[ String ]!]! Data rows for the table. Each row is a list of strings. Numerical data must be expressed as a string, and a NULL value must be expressed as an empty string. index [ String !] Row names for the table (ignored). ExperimentsInput Input fields for submitting experimental responses to be validated to then to create the next design gneration. Field Type Description gen Int ! The current generation number. Use zero to submit initial experiments or just to proceed to the first design generation without any initial experiments. table DataFrameInput The experiments and their responses. Required if gen is greater than zero. type String ! The type of experiments being submitted, 'initial', 'designed', or 'final'. NewSessionInput Input fields for create a new PDT session. Field Type Description demo Boolean ! True if this is a demo session. description String ! A description for the session. location String If provided, the id of the server on which the session will be created. name String ! The name of the session (unique for the user). userId String ! The id for the associated user account. NewUserInput Input fields for creating a new user account. Field Type Description email String ! The user's email address. firstName String ! The user's first name. lastName String ! The user's last name. password String ! The cleartext password for the user account. passwordConfirmation String ! The cleartext password, again, for the user account. SessionParametersInput Input fields for validating a session's experimental space parameters. Field Type Description additionalParams [ AdditionalParameterInput ] Additional advanced parameters for modeling and sampling. populationSize Int ! The population size. replicates Int ! The number of replicates (zero or greater). space SpaceInput ! The space type and definition of experimental parameters. willResetCampaign Boolean True to discard all experiments and reset any existing validated experimental space parameters. SpaceInput Input fields for validating an experimental space. Field Type Description table DataFrameInput ! The experimental parameters, in a table. totalUnits Int If a mixture space, the total number of volume units. type String ! The space type, 'factorial' or 'mixture'. TaskInput Input fields for updating or archiving a task. Field Type Description archived Boolean To archive this task, set the `archived` field to true. status String To cancel this task, set the `status` field to 'canceled'. taskId String ! The task's id. UserProfileInput Profile information for a user account. Field Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). email String The user's email address. firstName String The user's first name. lastName String The user's last name. phone String The user's telephone number. state String The user's state or province code (3 characters maximum). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). zip String The user's postal code. Scalars Boolean The Boolean scalar type represents true or false . DateTime The DateTime scalar type represents a date and time in the UTC timezone. The DateTime appears in a JSON response as an ISO8601 formatted string, including UTC timezone (\"Z\"). The parsed date and time string will be converted to UTC if there is an offset. Float The Float scalar type represents signed double-precision fractional values as specified by IEEE 754 . Int The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^53 - 1) and 2^53 - 1 since it is represented in JSON as double-precision floating point numbers specified by IEEE 754 . String The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","title":"Daptics GraphQL API"},{"location":"graphql_api/#daptics-graphql-api","text":"","title":"Daptics GraphQL API"},{"location":"graphql_api/#query-rootquerytype","text":"Field Argument Type Description currentTask Task Get the progress (if not completed) or the result (if completed) of the last un-archived task in the session. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. taskId String If provided, only returns information if the task's id matches. type String If provided, only returns information if the task's type ('space', 'update', 'generate', 'simulate', or 'analytics') matches. experiments Experiments Get the designed or completed experiments for the current or a previous generation. For non-admin users, returns information only if the session is owned by the user. designOnly Boolean ! If this argument is true , return only the designed experiments, not any extra experiments, and without responses. gen Int (optional) The generation number to fetch. Use zero to get any initial experiments. Return the latest designed generation (without responses) if omitted. sessionId String ! The session's id. experimentsHistory [ Experiments ] Get the experiments and responses for all generations. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. server Server Get the server by id. Admin-level users only. serverId String ! The server's id (unique name, like 'localhost'). servers [ Server ] Search all servers. Admin-level users only. q String A string to filter search on. If provided, will limit the response to matches on a server's name or url. status String Status to filter search on ('up' or 'down'). If provided, will limit the response to matches on a server's current runtime status. session Session Get PDT session information. For admin-level user, get the session by id. For non-admin user, get the session only if it is owned by the user. sessionId String ! The session's id. sessionParameters SessionParameters Get the experimental space and project parameters for a given session. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. sessions [ SessionSummary ] Search sessions. For Admin-level users, returns search over all sessions. active Boolean If provided, list only active or inactive sessions. demo Boolean If provided, list only demo or standard (not demo) sessions. q String If provided, list only sessions with a partially matching id, tag, name or description. userId String If provided, list only the sessions for this user. tasks [ Task ] Get list of all, or just un-archived tasks in the session. For non-admin users, returns information only if the session is owned by the user. includeArchived Boolean If omitted or false, limits the response to tasks that have not completed. sessionId String ! The session's id. transaction Transaction Get the transaction by id. Admin-level users only. txnId String ! The transaction's id. transactions [ Transaction ] Search transactions. For Admin-level users, returns search over all transactions. q String A string to filter search on. If provided, will limit the response to matches on the transaction's memo. sessionId String If provided, list only the transactions for this session. txnKind String If provided, list only the transactions matching this kind. txnStatus String If provided, list only the transactions matching this status. txnType String If provided, list only the transactions matching this type. userId String If provided, list only the transactions for this user. user User For admin-level user, get a user by id. For non-admin user, return the currently logged-in user if the user_id matches. userId String ! The user's id (a generated base-36 hash). users [ UserSummary ] For admin-level user, search all users. For non-admin user, returns a list containing just the currently logged-in user. q String A string to filter search on. If provided, will limit the response to matches on a user's first name, last name or email address.","title":"Query (RootQueryType)"},{"location":"graphql_api/#mutation-rootmutationtype","text":"Field Argument Type Description changePassword PasswordChanged Change a user's password, authenticating via header or password change token. input ChangePasswordInput ! The data used to authenticate and set the new password. userId String The user's id, required if not authenticating via token. createAnalytics Task Start a 'generate' task to create analytics files for all generations in the session. sessionId String ! The session's id. createSession Session Create and start a new PDT session on a server, installing and initializing required application and user data files on the server. session NewSessionInput ! The target server, the session's name and description, and whether this is a demo or regular session. createUser UserCreated Create an unverified user account. The account's email address must be verified before it is activated. createToken Boolean If true, an email message with a verification link will be mailed to the user. promotionCode String If present, the promotion code that will be applied to the new user. user NewUserInput ! The first name, last name, email address and password for the new user. generateDesign Task Start a 'generate' task using initial, extra and/or generated experiment responses. gen Int ! The generation number of the previously validated experiments and responses. sessionId String ! The session's id. haltSession HaltSessionResult Disconnect from a previously created PDT session. sessionId String ! The sesssion's id as returned by the createSession mutation. login AuthenticationToken Log in a user by email and password. Use the returned token to authenticate other requests. Use the returned user_id to create new sessions. email String ! The user's email address. password String ! The user's password (in cleartext). logout AuthenticationToken Log out a user, by revoking the access token. Returns information about the revoked token. token String ! The access token to revoke. putExperimentalParameters Task Validate and start a 'space' task to save a session's experimental space parameters (space type, population size, replicates, total volume and experimental parameter definitions). params SessionParametersInput ! The experimental space parameters to use for the session. sessionId String ! The session's id. putExperiments Task Validate initial, extra and/or generated experiment responses. experiments ExperimentsInput ! The experiments and responses to validate and save. sessionId String ! The session's id. restartSession Session Restart a previously created PDT session, re-initializing application and user data files. sessionId String ! The sesssion's id as returned by the createSession mutation. runSimulation Task Validate and start a 'simulate' task to process several design generations. ngens Int ! The number of design generations to attempt. params SessionParametersInput ! The experimental space parameters to use for the session. sessionId String ! The session's id. sendToken TokenSent Create and send a new verification or password reset token to a user. email String ! The user's email address. tokenType String ! The type of token requested ( verify or reset ). simulateResponses Experiments Generate simulated experiment responses for the current generation. experiments DataFrameInput (Optional) The experiments for which responses will be generated, including initial or extra experiments. sessionId String ! The session's id. updateTask Task Update, cancel or archive a task. For advanced users only! sessionId String ! The session's id. task TaskInput ! The task id and disposition. updateUserProfile UserProfile Update the user's profile. profile UserProfileInput ! The first name, last name, email address and other information about the user. userId String ! The user's id. verifyUser UserProfile Verify and activate an inactive user account. If successful (token matches and has not expired and user account is inactive), return the user account profile. Normally, verification tokens are sent to a non-API endpoint, but this mutation can also be used. token String ! The verification token that was emailed to the user.","title":"Mutation (RootMutationType)"},{"location":"graphql_api/#objects","text":"","title":"Objects"},{"location":"graphql_api/#analytics","text":"Information about the analytics files available for the specified generation in a session. Field Argument Type Description files [ AnalyticsFileInfo ] The list of available file titles and locations. gen Int ! The last completed generation number. sessionId String ! The session's id.","title":"Analytics"},{"location":"graphql_api/#analyticsfileinfo","text":"Information about a single analytics file (PDF). Field Argument Type Description filename String ! The file's name, like 'RespSortBarplotSequence.pdf'. title String ! The file's title, like 'Response Barplot Time Series'. url String ! The file's url, like 'http://localhost:4041/session/sess_id/analytics/gen/1/RespSortBarplotSequence.pdf'.","title":"AnalyticsFileInfo"},{"location":"graphql_api/#analyticstaskresult","text":"Result of a create analyticss task. Field Argument Type Description analytics Analytics Analytics file information. errors [ CategorizedError ] Errors encountered when validating the experiments. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('analytics').","title":"AnalyticsTaskResult"},{"location":"graphql_api/#apiparameters","text":"Parameters that a session must use to access other resources. Field Argument Type Description apiBaseUri String ! The URL for the session user to use to access the API. apiKey String ! The 'API key' for the session user to use to authenticate to the API. loginUri String ! The URL for the session user to use to log in.","title":"ApiParameters"},{"location":"graphql_api/#authenticationtoken","text":"A user access (a JWT encoded and signed) token, used to authenticate to the API. Field Argument Type Description claims String ! All the claims stored in the token. createdAt DateTime ! The date and time that the token was created. expiresAt DateTime ! The date and time that the token will expire. status String ! The status of the the token ('active' or 'revoked'). token String ! The token. Use this as the 'Bearer' value for the HTTP authorization header. type String ! The type of token ('access'). user UserProfile The user account associated with this token.","title":"AuthenticationToken"},{"location":"graphql_api/#campaigninfo","text":"Information on current and remaining generations. Field Argument Type Description completed Boolean ! True if the campaign has completed (no additional experiments can be generated). gen Int ! The generation number for the last-designed generation. -1 means experimental space parameters have not been validated. remaining Int The number of remaining generations in the session, if available.","title":"CampaignInfo"},{"location":"graphql_api/#categorizederror","text":"An error encountered while processing a query or mutation. Field Argument Type Description category String The type of error: 'validation', 'execution', 'system'. fatalError Boolean True if the error is fatal. message String ! A description of the error. path [ String !] For validation errors, the path to the invalid input field. systemError Boolean True if the error is an internal system error.","title":"CategorizedError"},{"location":"graphql_api/#createtaskresult","text":"Result of a create session task. Field Argument Type Description active Boolean ! True if this is an active (non-archived) session. demo Boolean ! True if this was created as a demo session. description String ! The session's description. errors [ CategorizedError ] Errors encountered when creating the session. host String ! The id for the server associated with the session. name String ! The session's name (unique for the associated user). sessionId String ! The session's id. tag String ! The session's (unique) tag. taskId String ! The task's id. type String ! The task's type ('create'). version String The build version for the session, if available.","title":"CreateTaskResult"},{"location":"graphql_api/#dataframe","text":"A representation of a data table (similar to a CSV file). Numerical data is converted to strings, and NULL data is converted to empty strings. Field Argument Type Description colHeaders [ String ]! The header row for the table. data [[ String ]!]! A list of rows containing data. Each row in turn is a list of strings. index [ String ] If returned, the row names for table.","title":"DataFrame"},{"location":"graphql_api/#experimentalspace","text":"The definition for a session's experimental space. Field Argument Type Description spaceSize Int The number of possible or explorable parameter combinations. table DataFrame ! The table of experimental parameters. totalUnits Int For mixture spaces, the total number of volume units. type String ! The space's type ('factorial' or 'mixture').","title":"ExperimentalSpace"},{"location":"graphql_api/#experimentalspacetemplate","text":"A system-defined template for an experimental space. Field Argument Type Description name String ! The type of template, ('factorial-default', 'mixture-default', 'factorial-demo-default', or 'mixture-demo-default'). template ExperimentalSpace ! The experimental space parameters for this template.","title":"ExperimentalSpaceTemplate"},{"location":"graphql_api/#experiments","text":"Information about initial or subsequent experiments in a session. Field Argument Type Description designRows Int The number of experiments generated by the system. gen Int ! The generation number for the experiments. hasResponses Boolean True if the experiment data in the associated table contains responses. table DataFrame The experiment inputs (and possible responses) for the experiments. validated Boolean True if the experiment data for this generation has been validated.","title":"Experiments"},{"location":"graphql_api/#generatetaskresult","text":"Result of a validate experiments task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experiments. experiments Experiments Designed experiments for current generation. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('generate').","title":"GenerateTaskResult"},{"location":"graphql_api/#haltsessionresult","text":"Information about a session that was disconnected. Field Argument Type Description action String ! The action taken to halt the session. sessionId String ! The session's id. status String ! The current connection status of the session.","title":"HaltSessionResult"},{"location":"graphql_api/#loadavg","text":"Process loadavg statistics for a linux server. Field Argument Type Description load1 Float 1 minute loadavg. load15 Float 15 minute loadavg. load5 Float 5 minute loadavg.","title":"Loadavg"},{"location":"graphql_api/#passwordchanged","text":"Confirming information for a password change. Field Argument Type Description updatedAt DateTime ! The time that the password was updated.","title":"PasswordChanged"},{"location":"graphql_api/#rootsubscriptiontype","text":"Field Argument Type Description taskUpdated Task Subscribe to updates for long-running tasks (creation, progress and completion). sessionId String Filter by session: the id of the session whose tasks are to be be monitored.","title":"RootSubscriptionType"},{"location":"graphql_api/#server","text":"Information about a PDT server. Field Argument Type Description bindir String ! The server's filesystem path to basic executable scripts (deprecated). cores Int The number of cores reported for the server. cost Float The last calulated cost metric for the server. host String ! The server's fully qualified hostname. loadavg Loadavg The last reported loadavg statistics for the server. procs Int The last reported number of processes running on the server. serverId String ! The server's id (a unique nickname or unqualified hostname). sshHost String ! The server's SSH hostname (deprecated). status String ! The server's current runtime status ('up' or 'down'). updatedAt DateTime ! The date and time that the data for the server was last updated. url String ! The server's root URL.","title":"Server"},{"location":"graphql_api/#session","text":"Complete information about a session. Field Argument Type Description active Boolean ! True if this is an active (non-archived) session. api ApiParameters ! API location and key information. auth AuthenticationToken Authorization information, if available. campaign CampaignInfo ! Generation information. demo Boolean ! True if this was created as a demo session. description String ! The session's description. didCrash Boolean ! True if this session crashed. didRestart Boolean ! True if this session was restarted. experiments Experiments Designed experiments for current generation. host String ! The id for the server associated with the session. latestCompletedExperiments Experiments Completed experiments from the previous generation. name String ! The session's name (unique for the associated user). params SessionParameters ! Current unvalidated or validated experimental space parameters. platformMode String ! Settings for the runtime platform (`development`, `test` or `production`). sessionId String ! The session's id. spaceTemplates [ ExperimentalSpaceTemplate !]! Experimental space parameter templates that can be used as examples. startedAt DateTime The date and time that this session was last started. tag String ! The session's (unique) tag. tasks [ TaskSummary ] Non-archived tasks, active or completed, in this session. user UserProfile The user profile associated with the session. version String The build version for the session, if available.","title":"Session"},{"location":"graphql_api/#sessionparameters","text":"Information about the experimental space parameters for a PDT session. Field Argument Type Description designCost Int If the experimental space has been validated, the cost in PDT credits for each design generation. populationSize Int ! The experimental space's population size. replicates Int ! The number of replicates for the experimental space. space ExperimentalSpace ! The experimental space type and parameters. validated Boolean ! True if the session parameters (including the space) were validated.","title":"SessionParameters"},{"location":"graphql_api/#sessionsummary","text":"Summary information about a session. Field Argument Type Description active Boolean ! True if this is an active (non-archived) session. campaign CampaignInfo Generation information, if available. demo Boolean ! True if this was created as a demo session. description String ! The session's description. host String ! The id for the server associated with the session. name String ! The session's name (unique for the associated user). params SessionParameters Current unvalidated or validated experimental space parameters, if available. sessionId String ! The session's id. tag String ! The session's (unique) tag. user UserProfile The user profile associated with the session. version String The build version for the session, if available.","title":"SessionSummary"},{"location":"graphql_api/#simulatetaskresult","text":"Result of a simulate experiments task. Field Argument Type Description campaign CampaignInfo ! Information on the last generation. errors [ CategorizedError ] Errors encountered when validating the experimental space. experimentsHistory [ Experiments ] Experiments and responses for all generations. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('simulate').","title":"SimulateTaskResult"},{"location":"graphql_api/#spacetaskresult","text":"Result of a validate experimental space parameters task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experimental space. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('space').","title":"SpaceTaskResult"},{"location":"graphql_api/#task","text":"Information on a long-running task in a daptics session. Field Argument Type Description archived Boolean ! True if the task is no longer active and has been flagged as archived. description String The task's description. errors [ CategorizedError ] Errors returned by a failed or canceled task. gen Int ! The generation number when the task was started. progress TaskProgress Progress message reported by a currently executing task. result TaskResult The validated session parameters or generated experimental design result returned by a completed task. sessionId String ! The session's id. startedAt DateTime The date and time the task was started. status String ! The task's status ('new', 'running', 'success', 'failed', or 'canceled'). taskId String ! The task's id. type String ! The task's type ('space', 'update', 'generate', 'simulate', or 'analytics').","title":"Task"},{"location":"graphql_api/#taskprogress","text":"Progress information about a currently executing task. Field Argument Type Description message String ! A description of the last activity returned by the task. percent Int The completion percentage, if available. phase String The task's phase ('allocating', 'validating', 'executing', 'detached', or 'completed').","title":"TaskProgress"},{"location":"graphql_api/#tasksummary","text":"Summary information on a long-running task in a daptics session. Field Argument Type Description description String The task's description. sessionId String ! The session's id. startedAt DateTime The date and time the task was started. status String ! The task's status ('new', 'running', 'success', 'failed', or 'canceled'). taskId String ! The task's id. type String ! The task's type ('space', 'update', 'generate', 'simulate', or 'analytics').","title":"TaskSummary"},{"location":"graphql_api/#tokensent","text":"Confirming information returned when a verification code was sent to an unverified user. Field Argument Type Description sentAt DateTime ! The time when the code was delivered. sentTo [ String !]! The email address(es) the code was delivered to. tokenType String ! The type of token sent to the user.","title":"TokenSent"},{"location":"graphql_api/#transaction","text":"Information about a single pending, posted, or canceled financial transaction. Field Argument Type Description amountInCents Int ! The amount of the transaction (debit as negative, credit as positive), in cents. amountInPdt Int ! The amount of the transaction (debit as negative, credit as positive), in PDT credits. createdAt DateTime ! The date and time that the transaction was created. gatewayTransactionId String The payment processor's transaction id, if any. memo String ! A description of the transacation. promotionCode String The promotion code, if any. refTxnId String The transaction id of the original transaction if this is transaction is a refund. remainingBalanceInCents Int The user account's remaining available balance, in cents, after this transaction. remainingBalanceInPdt Int The user account's remaining available balance, in PDT credits, after this transaction. sessionId String The id of the associated session, if any. taskId String The id of the ('generate') task associated with the transaction, if any. txnAuthor String ! The user id of the user who created the transaction. txnId String ! The transaction's id (a generated hash). txnKind String ! The kind of the transaction. (`pdt_charge`, `sale`, `refund`, `sign_up`, `coupon`, or `bonus`). txnStatus String ! The status of the transaction (`authorized`, `posted`, or `canceled`). txnType String ! The type of the transaction. (`session`, `braintree`, `promotion` or `admin`). updatedAt DateTime ! The date and time that the transaction was last updated. user UserProfile ! Profile and activity information for the associated user's account.","title":"Transaction"},{"location":"graphql_api/#updatetaskresult","text":"Result of a put experiments task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experiments. experiments Experiments Validated experiments saved in current generation. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('update').","title":"UpdateTaskResult"},{"location":"graphql_api/#user","text":"Full information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). currentBalanceInCents Int ! The currently available balance for the user's account, in cemts. currentBalanceInPdt Int ! The currently available balance for the user's account, in PDT credits. email String ! The user's email address. firstName String ! The user's first name. lastActiveSession String The session id of the last active session. lastLoginAt DateTime The date and time that the user account last logged into a PDT session. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. sessions [ SessionSummary ]! The sessions owned by the user. state String The user's state or province code (3 characters maximum). status String ! The user's account status ('unverified', 'active', or 'disabled'). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). updatedAt DateTime ! The date and time that data in the user's account was last updated. userId String ! The user's id. userLevel String ! The user's permission level. zip String The user's postal code.","title":"User"},{"location":"graphql_api/#usercreated","text":"Confirming information returned when a user account was successfully created. Field Argument Type Description email String The new user's email address. firstName String The new user's first name. lastName String The new user's last name. promotionCode String The promotion code applied to the new user account. regDate DateTime ! The date and time that the new user's account was created.","title":"UserCreated"},{"location":"graphql_api/#userprofile","text":"Profile information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). email String ! The user's email address. firstName String ! The user's first name. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. state String The user's state or province code (3 characters maximum). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). userId String ! The user's id. zip String The user's postal code.","title":"UserProfile"},{"location":"graphql_api/#usersummary","text":"Profile and activity information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). currentBalanceInCents Int ! The currently available balance for the user's account, in cemts. currentBalanceInPdt Int ! The currently available balance for the user's account, in PDT credits. email String ! The user's email address. firstName String ! The user's first name. lastActiveSession String The session id of the last active session. lastLoginAt DateTime The date and time that the user account last logged into a PDT session. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. state String The user's state or province code (3 characters maximum). status String ! The user's account status ('unverified', 'active', or 'disabled'). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). updatedAt DateTime ! The date and time that data in the user's account was last updated. userId String ! The user's id. userLevel String ! The user's permission level. zip String The user's postal code.","title":"UserSummary"},{"location":"graphql_api/#inputs","text":"","title":"Inputs"},{"location":"graphql_api/#additionalparameterinput","text":"An advanced experimental space parameter. Field Type Description jsonValue String ! The parameter's value, encoded as a JSON string. name String ! The parameter name.","title":"AdditionalParameterInput"},{"location":"graphql_api/#changepasswordinput","text":"Input fields for changing the password on a user account. Field Type Description email String The user's email address, required if changing via token authentication. password String ! The cleartext password for the user account. passwordConfirmation String ! The cleartext password, again, for the user account. token String The password change token, required if changing via token authentication.","title":"ChangePasswordInput"},{"location":"graphql_api/#dataframeinput","text":"Table data for experimental parameters or experimental responses (similar to a CSV file). Field Type Description colHeaders [ String !]! Column headers for the table. data [[ String ]!]! Data rows for the table. Each row is a list of strings. Numerical data must be expressed as a string, and a NULL value must be expressed as an empty string. index [ String !] Row names for the table (ignored).","title":"DataFrameInput"},{"location":"graphql_api/#experimentsinput","text":"Input fields for submitting experimental responses to be validated to then to create the next design gneration. Field Type Description gen Int ! The current generation number. Use zero to submit initial experiments or just to proceed to the first design generation without any initial experiments. table DataFrameInput The experiments and their responses. Required if gen is greater than zero. type String ! The type of experiments being submitted, 'initial', 'designed', or 'final'.","title":"ExperimentsInput"},{"location":"graphql_api/#newsessioninput","text":"Input fields for create a new PDT session. Field Type Description demo Boolean ! True if this is a demo session. description String ! A description for the session. location String If provided, the id of the server on which the session will be created. name String ! The name of the session (unique for the user). userId String ! The id for the associated user account.","title":"NewSessionInput"},{"location":"graphql_api/#newuserinput","text":"Input fields for creating a new user account. Field Type Description email String ! The user's email address. firstName String ! The user's first name. lastName String ! The user's last name. password String ! The cleartext password for the user account. passwordConfirmation String ! The cleartext password, again, for the user account.","title":"NewUserInput"},{"location":"graphql_api/#sessionparametersinput","text":"Input fields for validating a session's experimental space parameters. Field Type Description additionalParams [ AdditionalParameterInput ] Additional advanced parameters for modeling and sampling. populationSize Int ! The population size. replicates Int ! The number of replicates (zero or greater). space SpaceInput ! The space type and definition of experimental parameters. willResetCampaign Boolean True to discard all experiments and reset any existing validated experimental space parameters.","title":"SessionParametersInput"},{"location":"graphql_api/#spaceinput","text":"Input fields for validating an experimental space. Field Type Description table DataFrameInput ! The experimental parameters, in a table. totalUnits Int If a mixture space, the total number of volume units. type String ! The space type, 'factorial' or 'mixture'.","title":"SpaceInput"},{"location":"graphql_api/#taskinput","text":"Input fields for updating or archiving a task. Field Type Description archived Boolean To archive this task, set the `archived` field to true. status String To cancel this task, set the `status` field to 'canceled'. taskId String ! The task's id.","title":"TaskInput"},{"location":"graphql_api/#userprofileinput","text":"Profile information for a user account. Field Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). email String The user's email address. firstName String The user's first name. lastName String The user's last name. phone String The user's telephone number. state String The user's state or province code (3 characters maximum). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). zip String The user's postal code.","title":"UserProfileInput"},{"location":"graphql_api/#scalars","text":"","title":"Scalars"},{"location":"graphql_api/#boolean","text":"The Boolean scalar type represents true or false .","title":"Boolean"},{"location":"graphql_api/#datetime","text":"The DateTime scalar type represents a date and time in the UTC timezone. The DateTime appears in a JSON response as an ISO8601 formatted string, including UTC timezone (\"Z\"). The parsed date and time string will be converted to UTC if there is an offset.","title":"DateTime"},{"location":"graphql_api/#float","text":"The Float scalar type represents signed double-precision fractional values as specified by IEEE 754 .","title":"Float"},{"location":"graphql_api/#int","text":"The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^53 - 1) and 2^53 - 1 since it is represented in JSON as double-precision floating point numbers specified by IEEE 754 .","title":"Int"},{"location":"graphql_api/#string","text":"The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","title":"String"},{"location":"jupyter_notebooks/","text":"Jupyter Notebooks This folder of Python Jupyter notebooks gives a brief interactive introduction to using the daptics API with a freely distributed Python API client. See the documentation at https://jupyter.org if you have never used Jupyter notebooks before. Please note that to use the daptics API, you must first have a daptics account. To create an account, or to get help or information on daptics, please visit or contact us: On the web at https://daptics.ai By email at support@daptics.ai Installation Before opening the 01_README.ipynb notebook, install IPython, Jupyter and required packages. a) with conda: conda install -c conda-forge requests gql ipython jupyter or b) with pip: # first, always upgrade pip! pip install --upgrade pip pip install --upgrade requests gql ipython jupyter Start the notebook in the tutorial directory: cd tutorials jupyter notebook Then open the Introduction.ipynb notebook. If running the cells in the notebook have problems with library imports, see this article for how you might have to import the correct versions of the required requests and gql libraries: https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter Tutorial Notebooks This folder contains a series of Jupyter notebooks to explain operation of the daptics API, with explicit examples: 01_README.ipynb 02_Terminology.ipynb 03_SimpleTutorial.ipynb 04_GetAnalytics.ipynb 05_RestartSession.ipynb 06_AutomationWorkflow.ipynb If you are familiar with daptics from the web interface, you could jump directly to 03_SimpleTutorial.ipynb to get started. Make sure to copy all the files in this folder into your Jupyter server directory (the directory from which you start jupyter notebook ), especially the daptics_client.py file that the all notebooks using the daptics API will import. There are also several example experimental space definition CSV files in this folder that you can use to try out different parameters. # Here's an example of using conda to update the required libraries in Jupyter-land. import sys print(sys.path) print('Using {} to run pip'.format(sys.executable)) !{sys.executable} -m pip install requests gql Copyright Notice Daptics API Version 0.12.0 Copyright (c) 2020 Daptics Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), the rights to use, copy, modify, merge, publish, and/or distribute, copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: You do not have the right to sub-license or sell copies of the Software. The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Jupyter Notebooks"},{"location":"jupyter_notebooks/#jupyter-notebooks","text":"This folder of Python Jupyter notebooks gives a brief interactive introduction to using the daptics API with a freely distributed Python API client. See the documentation at https://jupyter.org if you have never used Jupyter notebooks before. Please note that to use the daptics API, you must first have a daptics account. To create an account, or to get help or information on daptics, please visit or contact us: On the web at https://daptics.ai By email at support@daptics.ai","title":"Jupyter Notebooks"},{"location":"jupyter_notebooks/#installation","text":"Before opening the 01_README.ipynb notebook, install IPython, Jupyter and required packages. a) with conda: conda install -c conda-forge requests gql ipython jupyter or b) with pip: # first, always upgrade pip! pip install --upgrade pip pip install --upgrade requests gql ipython jupyter Start the notebook in the tutorial directory: cd tutorials jupyter notebook Then open the Introduction.ipynb notebook. If running the cells in the notebook have problems with library imports, see this article for how you might have to import the correct versions of the required requests and gql libraries: https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter","title":"Installation"},{"location":"jupyter_notebooks/#tutorial-notebooks","text":"This folder contains a series of Jupyter notebooks to explain operation of the daptics API, with explicit examples: 01_README.ipynb 02_Terminology.ipynb 03_SimpleTutorial.ipynb 04_GetAnalytics.ipynb 05_RestartSession.ipynb 06_AutomationWorkflow.ipynb If you are familiar with daptics from the web interface, you could jump directly to 03_SimpleTutorial.ipynb to get started. Make sure to copy all the files in this folder into your Jupyter server directory (the directory from which you start jupyter notebook ), especially the daptics_client.py file that the all notebooks using the daptics API will import. There are also several example experimental space definition CSV files in this folder that you can use to try out different parameters. # Here's an example of using conda to update the required libraries in Jupyter-land. import sys print(sys.path) print('Using {} to run pip'.format(sys.executable)) !{sys.executable} -m pip install requests gql","title":"Tutorial Notebooks"},{"location":"jupyter_notebooks/#copyright-notice","text":"Daptics API Version 0.12.0 Copyright (c) 2020 Daptics Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), the rights to use, copy, modify, merge, publish, and/or distribute, copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: You do not have the right to sub-license or sell copies of the Software. The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright Notice"}]}