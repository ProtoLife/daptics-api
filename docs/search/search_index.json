{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"daptics API This is the README documentation for the daptics design of experiments GraphQL API and the Python API client. Links The Python API client module and several tutorial Jupyter notebooks are available from the daptics-api GitHub repository at https://github.com/ProtoLife/daptics-api Auto-generated documentation for the API and the client is available from the GitHub Pages for this project at https://ProtoLife.github.io/daptics-api For more information on Daptics technology, please see the Documentation section of the daptics website at https://daptics.ai To use the daptics API, you must first register at the https://daptics.ai to establish your login and password for API authentication. Python Client The python_client folder contains the Python GraphQL client, daptics_client.py, and several interactive Python notebooks for experimenting with the API. Follow the instructions in the README.md file in that folder to set up a local Jupyter Notebook server if you do not have access to a server that can open .ipynb files. GraphQL API Documentation Install graphql-markdown Then in the pydocmd folder, run: graphql-markdown http://inertia.protolife.com:8080/api >graphql_api.md Python Client Documentation and MkDocs Build Install these tools: MkDocs , the ReadTheDocs-Dropdown theme for MkDocs , and pdoc3 In the python_client folder, run: pdoc --pdf --force --template-dir ../pdoc/templates daptics_client >../pydocmd/daptics_client.md Finally in the main project folder, run: mkdocs build Html and Markdown files will be produced in the docs folder. Using Jupytext to Extract and Sync to Python Source Files Install jupytext Set up metadata in any ipynb file that has Python code: jupytext --set-formats ipynb,python//py:light 03_SimpleTutorial.ipynb Export Python code to /python subdirectory: jupytext --from ipynb --to python//py:light 03_SimpleTutorial.ipynb Edit Python code as needed. Or when you run in Jupyter notebook, and make changes, the corresponding Python file will be kept up to date! Rebuild notebook from Python file without outputs (do this before checking into version control): jupytext --from python//py:light --to notebook python/03_SimpleTutorial.py","title":"Project README"},{"location":"#daptics-api","text":"This is the README documentation for the daptics design of experiments GraphQL API and the Python API client.","title":"daptics API "},{"location":"#links","text":"The Python API client module and several tutorial Jupyter notebooks are available from the daptics-api GitHub repository at https://github.com/ProtoLife/daptics-api Auto-generated documentation for the API and the client is available from the GitHub Pages for this project at https://ProtoLife.github.io/daptics-api For more information on Daptics technology, please see the Documentation section of the daptics website at https://daptics.ai To use the daptics API, you must first register at the https://daptics.ai to establish your login and password for API authentication.","title":"Links"},{"location":"#python-client","text":"The python_client folder contains the Python GraphQL client, daptics_client.py, and several interactive Python notebooks for experimenting with the API. Follow the instructions in the README.md file in that folder to set up a local Jupyter Notebook server if you do not have access to a server that can open .ipynb files.","title":"Python Client "},{"location":"#graphql-api-documentation","text":"Install graphql-markdown Then in the pydocmd folder, run: graphql-markdown http://inertia.protolife.com:8080/api >graphql_api.md","title":"GraphQL API Documentation "},{"location":"#python-client-documentation-and-mkdocs-build","text":"Install these tools: MkDocs , the ReadTheDocs-Dropdown theme for MkDocs , and pdoc3 In the python_client folder, run: pdoc --pdf --force --template-dir ../pdoc/templates daptics_client >../pydocmd/daptics_client.md Finally in the main project folder, run: mkdocs build Html and Markdown files will be produced in the docs folder.","title":"Python Client Documentation and MkDocs Build "},{"location":"#using-jupytext-to-extract-and-sync-to-python-source-files","text":"Install jupytext Set up metadata in any ipynb file that has Python code: jupytext --set-formats ipynb,python//py:light 03_SimpleTutorial.ipynb Export Python code to /python subdirectory: jupytext --from ipynb --to python//py:light 03_SimpleTutorial.ipynb Edit Python code as needed. Or when you run in Jupyter notebook, and make changes, the corresponding Python file will be kept up to date! Rebuild notebook from Python file without outputs (do this before checking into version control): jupytext --from python//py:light --to notebook python/03_SimpleTutorial.py","title":"Using Jupytext to Extract and Sync to Python Source Files "},{"location":"daptics_client/","text":"Module daptics_client DapticsClient - A Python client for the Daptics GraphQL API. See comments and docstrings for the DapticsClient class in the code below for suggestions for using this class. For additional help or information, please visit or contact Daptics. On the web at https://daptics.ai By email at support@daptics.ai Daptics API Version 0.10.0 Copyright (c) 2020 Daptics Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), the rights to use, copy, modify, merge, publish, and/or distribute, copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: You do not have the right to sub-license or sell copies of the Software. The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Classes Class CsvFileEmptyError class CsvFileEmptyError(fname) An error raised if there were no rows that could be read from the specified CSV file. Class CsvNoDataRowsError class CsvNoDataRowsError(fname) An error raised if there were no rows after the header row that could be read from the specified CSV file. Class DapticsClient class DapticsClient(host=None, config=None) A Python gql client for maintaining the state of a Daptics optimization session. Between API invocations, data such as the user id, access token, session id, last generated design, etc. are retained in the object's attributes. Attributes host :\u2002 str : The host part of the API endpoint, as read from configuration, or set manually prior to calling connect . config :\u2002 str : File path to a JSON configuration file, used to read the host, login credentials and runtime options. Defaults to \"daptics.conf\". options :\u2002 dict : A Python dictionary containing runtime options. credentials :\u2002( str , str ) : A tuple of ( username , password ), as read from configuration, or set manually prior to calling login . api_url :\u2002 str : The full API endpoint URL. pp :\u2002 pprint.PrettyPrinter : Used for printing dict output. gql :\u2002 gql.Client : The gql.Client object used to make GraphQL requests to the API. auth :\u2002 TokenAuth : Used to insert the required authorization header in API requests. The auth object's token attribute is set by the login method. user_id :\u2002 str : The user id for the authenticated user, set by the login method. session_id :\u2002 str : The session id for a connected daptics session, as set by the create_session method. session_name :\u2002 str : The user-specified name for a connected daptics session, as set by the create_session method. task_info :\u2002 dict : Information about the polling status for running tasks in the session. gen :\u2002 int : The design \"generation number\" for the session. This is -1 for a new session, 0 when the session's experimental space has been validated, and greater than zero when a design has been generated by the system. remaining :\u2002 int : If not None, the number of possible generations that can be generated until the entire design space has been explored. completed :\u2002 bool : A flag indicating whether the design space has been completely explored. initial_params :\u2002 dict : The experimental space and other information as initially returned by the create_session method. space :\u2002 dict : The experimental space as updated by the result of the \"save experimental space\" task. design :\u2002 dict : The current generated design, as updated by the result of a \"generate design\" task. experiments_history :\u2002 list : All the experiments and responses that have been simulated, as updated by the result of a \"simulate\" task, represented as a list of Python dicts. Notes The keys in the JSON configuration file , specified by the config attribute, are: host - host part of the API endpoint user - email of the database user to login with password - password for the database user to login with auto_export_path - see options below auto_task_timeout - see options below auto_generate_next_design - see options below If the config attribute is set to None, the configuration can be read from OS environment variables, if they exist. The environment variable names are: DAPTICS_HOST - host part of the API endpoint DAPTICS_USER - email of the database user to login with DAPTICS_PASSWORD - password for the database user to login with DAPTICS_AUTO_EXPORT_PATH - see options below DAPTICS_AUTO_TASK_TIMEOUT - see options below DAPTICS_AUTO_GENERATE_NEXT_DESIGN - see options below As of this version, there are three available options that enable automated processes for common use of the API: auto_export_path - If not None, a string indicating the relative or absolute directory where the validated experimental space and generated design files will be saved, so that the user will not have to explicitly call the export functions. auto_task_timeout - If set to a positive number indicating the number of seconds to wait, this option will immediately start to wait on a just-created task, so that the user will not have to explicitly call poll_for_current_task or wait_for_current_task . Setting this option to a negative number, means to wait indefinitely. Setting the option to zero will poll the task just once. The default, None, means that the user wants to explicitly call poll_for_current_task or wait_for_current_task . auto_generate_next_design - If set (True), uploading (initial or later) experiment responses will automatically start a generate task for the next design generation. If not set (None or False), the uploading will only validate the responses, and the user will have to call the generate task manually after a successful validation. Initialize a new DapticsClient object. Parameters host :\u2002 str , optional : The host part of the API endpoint. Example: http://localhost:4041 config :\u2002 str , optional : File path to a JSON configuration file. Class variables Variable DEFAULT_CONFIG The default location for the option configuration file. Variable EXPORT_SPACE_TIMEOUT The default timeout for validating the experimental space parameters. Variable GET_ANALYTICS_TIMEOUT The default timeout for generating analytics files, in seconds. Variable REQUIRED_SPACE_PARAMS Names of required experimental space parameters. Methods Method call_api def call_api(self, document, vars, timeout=None) Perform validation on the gql query or mutation document and then execute the query. We cannot call self.gql.execute directly, because it converts 'errors' returned into an Exception. We want to preserve the 'errors' if they exist, and also return the data. Parameters fname :\u2002 str : The file path to save the client state to. Returns response :\u2002( dict , dict ) : A tuple containing two dicts : The first element is the data component of the GraphQL response, a Python dict with currentTask , and the second element is the errors component of the GraphQL response. Either data or errors may be None. Method connect def connect(self) Read in the configuration and instantiate the client if it has not been done before. Creates an HTTP transport instance from the client's api_url attribute, and attempts to connect to the introspection interface. The gql.Client value is stored in the client's gql attribute. Returns Nothing : Raises MissingConfigError : If the config file specified does not exist. InvalidConfigError : If the config file specified cannot be parsed, or does not have a 'host' value. NoHostError : If there is no config file specifed and no host has been set. requests.ConnectionError : If the connection cannot be made. Method create_session def create_session(self, name, description) Create a new daptics session. Parameters name :\u2002 str : The unique name for the session among the authenticated user's sessions. description :\u2002 str : A description for the session. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with createSession and/or errors keys. On successful creation, the session id, session_name and initial parameters are stored in the client's attributes. Method do_auto_task def do_auto_task(self, timeout_override=None) Calls wait_for_current_task if the auto_task_timeout option was set. Parameters timeout_override :\u2002 float , optional : If None, use the value of the auto_task_timeout . Otherwise, if a positive number, the maximum number of seconds to wait. If a negative number, wait forever. Returns response :\u2002( dict , dict ) : A tuple containing two dicts : The first element is the currentTask component, and the second element is the errors component of the GraphQL response. Either currentTask (for example on timeout) or errors may be None. Method error_messages def error_messages(self, errors) Extract the message values from the errors list returned in a GraphQL response. Parameters errors :\u2002 list : The list of GraphQL errors. Each error must have a message value, and can optionally have key , path and locations values. Returns message :\u2002 str or list : The message (or messages) extracted from the GraphQL response. Method experiment_with_random_response def experiment_with_random_response(self, experiment, max_response_value) Uses a random number generator to generate a numerical response value in the range [0, n] and then replaces any existing response value with the generated value. Parameters experiment :\u2002 list : A list of values representing an experiment, including a (possibly empty) response value. max_response_value :\u2002 float : The maximum random response value to be generated for the experiment. Returns experiment :\u2002 list : The list of parameter values for the specified experiment, and a generated response value. Each value is encoded as a string. Method experiments_table_column_names def experiments_table_column_names(self, space) Generates the required header for the experiments table, including the names of each parameter in the experimental space, and the reserved name \"Response\" for the experiment response value. Parameters space :\u2002 dict : A Python dict that defines the experimental space. Returns column_headers :\u2002 list : The list is made up from the names of all parameters, and the additional string \"Response\". Method experiments_table_template def experiments_table_template(self, space) Generate the column header for the experiments table, with no data rows. Can be used to export an empty experiments table template CSV file, or to submit \"empty\" initial experiments. Parameters space :\u2002 dict : A Python dict that defines the experimental space. Returns response :\u2002 dict : A Python dict with with a colHeaders item containing the column header row, and an empty data list item. Method export_csv def export_csv(self, fname, table, headers=True) Utility method to write an experimental space or experiments table to a CSV file on disk. Parameters fname :\u2002 str : The filesystem path where the file will be written. table :\u2002 dict : A Python dict with colHeaders and data values, representing an experimental space or experiments table. headers :\u2002 bool , optional : If False, no header row will be written (this is the standard for experimental space CSV files). If True, the header row will be written to the file. Returns Nothing : Method export_experimental_space_csv def export_experimental_space_csv(self, fname, timeout=300) Retrieves the validated experimental space table and writes the table to a CSV file on disk. Parameters fname :\u2002 str : The filesystem path where the file will be written. timeout :\u2002 float , optional : The maximum number of seconds that the client will poll the session to retrieve the experimental space. The default is 300 (5 minutes). Returns response :\u2002 dict : A Python dict representing the validated experimental space. Method export_experiments_history_csv def export_experiments_history_csv(self, fname) Retrieves and returns the experiments and responses for all generations in the session, and writes them to a summary CSV file on disk. Also updates the experiments_history attribute in the client. Parameters fname :\u2002 str : The filesystem path where the file will be written. Returns experiments_history :\u2002 list or None : The value of the client's experiments_history attribute, which may be None if no experiments have been submitted or designed, or is a list of dicts. See the documentation for the get_experiments_history method for a description of this value. Method export_generated_design_csv def export_generated_design_csv(self, fname, gen=None) Retrieves a design generation from the session, and writes the table (with empty responses) to a CSV file on disk. Parameters fname :\u2002 str : The filesystem path where the file will be written. gen :\u2002 int , optional : The generation number for the design to be retrieved. If None, retreive the design for the current generation. Returns design_table :\u2002 dict : The generated design, a Python dict representing an experiments table with empty responses with colHeaders , and data keys. Method export_initial_experiments_template_csv def export_initial_experiments_template_csv(self, fname) Retrieves the validated experimental space table and writes an empty initial experiments table to a CSV file on disk. Parameters fname :\u2002 str : The filesystem path where the file will be written. Returns column_headers :\u2002 list : The experiments table header row that was written to disk, as a list of strings. Method generate_analytics def generate_analytics(self, timeout=90) Start an analytics task that will create and return a list of all the available analytics files for the session at the current design generation. Parameters timeout :\u2002 float : An override to the auto_task_timeout option. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with createAnalytics and/or errors keys. The createAnalytics value will contain information on the analytics task that was started, as described in the return value for the poll_for_current_task method. If either the `timeout` argument or `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `analytics` task completes successfully, the result of the `update` task can be accessed at `data['createAnalytics']['result']`. Method generate_design def generate_design(self, gen=None) If (initial or subsequent) experiments have been successfully validated against the experimental parameters, a \"generate design\" task is started. Parameters gen :\u2002 int , optional : The current generation number for the experiments that have successfully validated. Use zero for initial experiments. Use None to use the gen attribute stored in the client. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with generateDesign and/or errors keys. The generateDesign value will contain information on the generate task that was started, as described in the return value for the poll_for_current_task method. If the `auto_export_path` option is set, a CSV file of the generated design is saved at `auto_genN_design.csv`. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `simulate` task completes successfully, the result of the `update` task can be accessed at `data['generateDesign']['result']`. Method get_all_analytics_files def get_all_analytics_files(self, directory='.', timeout=90) Create an analytics task and wait for it to complete. If the task completes successfully, process the result for all the available analytics files. For each file, download its contents and save it in the specified directory. Parameters directory :\u2002 str , optional : If supplied, the target directory to save the files to. If the directory does not exist, attempt to create it. timeout :\u2002 int , optional : The maximum number of seconds that the client will wait for a response from the session. The default is 90 seconds. Returns response :\u2002 int : The number of files created. Method get_analytics_file def get_analytics_file(self, url, save_as=None) Fetch the contents of an analytics file. Once a URL to a particular analytics file has been obtained using the generate_analytics method, and the result of the analytics task has been returned, use the url and filename values from the result as the arguments to this convenience method to request the file's contents over HTTP, submitting a request with an Authorization header. Parameters url :\u2002 str : The URL for the file, as returned from get_analytics method. save_as :\u2002 str , optional : If supplied, save the file's contents to this file system location. The location must be writable by the calling user. Returns response :\u2002 requests.Response : The requests library's response object for the authenticated HTTP request. Method get_experimental_space def get_experimental_space(self) Utility method to retrieve the validated experimental space from the session. If the session was restarted and the experimental space had been previously validated, it will be in the validated_params attribute, and this method will return it. Returns response :\u2002 dict : The validated space, a Python dict with type , and table keys, and a totalUnits key if the space type is \"mixture\", or None if the space has not been validated. Method get_experiments def get_experiments(self, design_only=False, gen=None) Get the designed or completed experiments for the current or any previous generation. Parameters design_only :\u2002 bool : If gen is specified, and this argument is set to True , only return the designed experiments (without responses). gen :\u2002 int : The generation number to search for. Use 0 to specify initial experiments. Use None to search for the last designed generation. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with experiments and/or errors keys. The value at the experiments key is a Python dict with these keys: validated :\u2002 bool : True if these experiments have been validated. hasResponses :\u2002 bool : True if at least some of these experiments have responses. designRows :\u2002 int : The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table :\u2002 dict : A Python dict with colHeaders and data values, representing the experiments submitted or designed for the generation. Method get_experiments_history def get_experiments_history(self) Get all of the experiments and any responses for all the generations in the session. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with experimentsHistory and/or errors keys. Also updates the client's experiments_history attribute. The experimentsHistory value is either None if no experiments have been submitted or designed, or a list. Each item in the list is either None, or a Python dict that represents a generation. The first item in the list is generation \"zero\", the initial experiments. If a generation is available (non None), it is a Python dict with the following keys: gen :\u2002 int : The generation number (zero meaning initial experiments). validated :\u2002 bool : True if these experiments have been validated. hasResponses :\u2002 bool : True if at least some of these experiments have responses. designRows :\u2002 int : The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table :\u2002 dict : A Python dict with colHeaders and data values, representing the experiments submitted or designed for the generation. Method get_generated_design def get_generated_design(self, gen=None) Retrieves a design generation from the session. Parameters gen :\u2002 int : The generation number for the design to be retrieved. If None, retreive the design for the current generation. Returns response :\u2002 dict : The value of the experiments key from the GraphQL response, a Python dict with these keys: validated :\u2002 bool : True if these experiments have been validated. hasResponses :\u2002 bool : True if at least some of these experiments have responses. designRows :\u2002 int : The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table :\u2002 dict : A Python dict with colHeaders and data values, representing the experiments submitted or designed for the generation. Method halt_session def halt_session(self, session_id) Close an connected session, to release all resources. Parameters session_id :\u2002 str : The session id to close. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with haltSession and/or errors keys. If the call is successful, the 'haltSession' value contains these keys: action :\u2002 str : The action taken, either 'close' (if the session was connected) or 'none' if had already been closed. status :\u2002 str : The session status, which should always be 'closed', Method init_config def init_config(self) Read in the client configuration from possible sources. Returns Nothing : Raises MissingConfigError : If the config file specified does not exist. InvalidConfigError : If the config file specified cannot be parsed, or does not have a 'host' value. Method list_sessions def list_sessions(self, user_id=None, name=None) Show a list of the user's sessions. Parameters user_id :\u2002 str : (optional) Limit the results to the user with this id. Omitting this argument is normal for regular users. name :\u2002 str : (optional) Limit the results to any session whose name, description, tag or id contains this string. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with sessions and/or errors keys. Method load def load(self, fname) Restore a previously saved client from a JSON file. Parameters fname :\u2002 str : The file path to restore the client state from. Returns Nothing : Method load_config_env def load_config_env(self) Method load_config_file def load_config_file(self, config_path, config_must_exit) Method login def login(self, email=None, password=None) Authenticate to a user record in the database as identified in the client's email and password attributes, and create an access token. Parameters email :\u2002 str : The email adddress of the database user that will be used for authentication. password :\u2002 str : The cleartext password of the database user that will be used for authentication. If called with default ( None ) arguments, the email and password will be retrieved from the credentials attribute. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with login and/or errors keys. On successful authentication, the user id and access token are stored in the client's user_id and auth attributes. Method poll_for_current_task def poll_for_current_task(self, task_type=None) If there is a currently running task saved in the client, poll the session to see if a result is ready. Parameters task_type :\u2002 DapticsTaskType : SPACE , UPDATE , GENERATE , SIMULATE , ANALYTICS , or None. If None is supplied (the default), find the most recently started task of any type. Returns response :\u2002( dict , dict ) : A tuple containing two dicts : The first element is the data component of the GraphQL response, a Python dict with currentTask , and the second element is the errors component of the GraphQL response. Either data or errors may be None. Notes The currentTask value returned is a Python dict with information on the task (if found). The values in the dict are as follows: taskId :\u2002 str : The unique identifier for the task. type :\u2002 str : The type of task, either space , update , generate , simulate , or analytics . description :\u2002 str : A user-friendly description of what the task is. startedAt :\u2002 str : An ISO 8601 string value of the UTC time at which the task was started. status :\u2002 str : The status of the task, either new , running , success , failed , or canceled . result :\u2002 dict : If the status of the task is success , the value of the result is another Python dict . The result dicts for each type of task are as follows: ## Result for space Tasks campaign :\u2002 dict : A Python dict with these components: gen : int The generation number for the session (0). remaining : int If available, how many more generations can be performed. completed : bool If available, whether the campaign has been completed. params :\u2002 dict : A Python dict with these components: validated : bool True if the space was validated. designCost : int If available, the cost in daptics credit that will be deducted from the user's account for each design generation. populationSize, replicates, and space: See the description for these values in the documentation for the arguments for the `put_experimetal_parameters` method. If a space task has successfully completed, the client's gen attribute is set to zero. ## Result for update Tasks The result for an update task will contain all the values as the result for a space task, described above, with this additional value: experiments :\u2002 dict : A Python dict with these components: gen : int The generation number for this set of experiments. validated : bool True if the experiments validated successfully. hasResponses : bool True if any of the experiments in this set were submitted with responses. designRows : int The number of rows of daptics-designed experiments in this set of experiments. `designRows` will be zero if these are initial experiments. table : dict A Python `dict` with `colHeaders` and `data` components, as described in the arguments for the `put_experiments` method. If the auto_generate_next_design option has been set on the client, when an update task completes, a generate task will be automatically started. The information on the generate task will be returned in the location data['currentTask']['autoDesignTask'] . If the auto_task_timeout option has also been set, and the generate task result has completed, the result (containing the next generation design), will be available at the location data['currentTask']['autoDesignTask']['result'] , formatted as described below. ### Result for generate Tasks The result for a generate task has the same structure as the result for a update task, described above. The experiments value will contain the generated design, and the hasResponses value within the design will be False , as the generated design returned in the result will not have responses. If a generate has successfully completed, the client's gen attribute is updated to a number greater than zero, and the generated design from the experiments value will be stored in the client's design attribute. ## Result for simulate Tasks The result for a simulate task will contain all the values as the result for a space task, described above, with this additional value: experimentsHistory :\u2002 list : A list of all the experiments in generations 1 through N, that were simulated. Each element of the list will be a Python dict with gen , validated , hasResponses , designRows and table values as described above in the documentation for the result of an update task. ## Result for analytics Tasks analytics :\u2002 dict : A Python dict with these components: gen : int The current generation number that the analytics were generated for. files : list A list of Python `dict`s, with information about each analytics file generated. Information about each file is contained in a Python dict with these components: title :\u2002 str : The title (caption) describing the file. filename :\u2002 str : The suggested filename to save the file to. url :\u2002 str : The HTTP URL where the file can be downloaded. A valid authentication token for the user must be included in the Authorization header for the download request. Method print def print(self) Print out debugging information about the session. Method put_experimental_parameters def put_experimental_parameters(self, params) Validate the experimental parameters at the beginning of a session, and start a \"space\" task. The individual experimental parameter names, types and permissible values in the space definition are specified at the ['space']['table'] key of the params dict. Parameters params :\u2002 dict : A dictionary containing the experimental parameters to be used for the session. See the Notes section that describes the required keys for the params dict. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with putExperimentalParameters and/or errors keys. If the task was successfully started, the task information is stored in the client's `task_info` attribute. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the task Notes These are the required keys for the params dict: populationSize :\u2002 int : The number of experiments per replicate. A positive integer. replicates :\u2002 int : The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space :\u2002 dict : The experimental space definition. Required keys for the space dict are: type :\u2002 str : The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits :\u2002 int : For mixture type spaces, this is the mixture constraint parameter, a non-negative integer. table :\u2002 dict : The (optional) column headers and rows of parameter data. See an example below. the colHeaders value is ignored when importing or validating the experimental space definition. To maintain uniformity, header and data row elements should be Python strings, even if they represent numeric values. For mixture type spaces, there should only be 4 columns of data in each row: the name of the parameter, the type of the parameter (which must always be the string \"unit\"), the minimum value of the parameter (a non-negative integer) and the maximum value of the parameter (a positive integer, less than or equal to the totalUnits constraint parameter). For factorial type spaces, there must be at least 4 columns of data in each row: the name of the parameter, the type of the parameter (a string, either \"numerical\" or \"categorical\"), and at least two possible distinct values that the parameter can have in an experiment. Different parameters can have either 2 or more than 2 possible values. The rows must be all be of the same size, so make sure to pad the rows with fewer values with empty strings at the end. In addition to the required params listed above, optional additional parameters may be submitted. Please contact daptics for more information about these advanced parameters. Examples Here is a mixture space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'mixture', 'totalUnits': 25, 'table': { 'colHeaders': [ 'Name', 'Type', 'Min', 'Max' ], 'data': [ [ 'param1', 'unit', '1', '10' ], [ 'param2', 'unit', '2', '10' ], [ 'param3', 'unit', '4', '8' ], [ 'param4', 'unit', '2', '5' ] ] } } } Here is a factorial space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'factorial', 'table': { 'colHeaders': [ 'Name', 'Type', 'Value.1', 'Value.2', 'Value.3', 'Value.4' ], 'data': [ [ 'param1', 'numerical', '0', '1', '2', '3' ], [ 'param2', 'numerical', '2', '3', '', '' ], [ 'param3', 'numerical', '0', '1', '2', '' ], [ 'param4', 'numerical', '0', '1', '2', '3' ] ] } } } Method put_experimental_parameters_csv def put_experimental_parameters_csv(self, fname, params) Validate the experimental parameters at the beginning of a session, and start a \"space\" task. The individual experimental parameter names, types and permissible values in the space definition are read from a CSV file. Parameters fname :\u2002 str : The location on the filesystem for a CSV file that will define the experimental space definition. See the Examples section below for an example. params :\u2002 dict : A dictionary containing the experimental parameters to be used for the session. See the Notes section for more information. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with putExperimentalParameters and/or errors keys. If the task was successfully started, the task information is stored in the client's `task_info` attribute. Also, if the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. Raises csv.Error : If the specified CSV file is incorrectly formatted. Notes Keys for the params dict are: populationSize :\u2002 int : The number of experiments per replicate. A positive integer. replicates :\u2002 int : The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space :\u2002 dict : The experimental space definition. The single required key for the space dict is: type :\u2002 str : factorial or mixture In addition to the required params listed above, optional additional parameters may be submitted. Please contact daptics for more information about these advanced parameters. Examples Here is a space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'factorial', } } The contents of an example CSV file for a factorial space might be: param1,numerical,0,1,2,3 param2,numerical,2,3,4, param3,numerical,0,1,, param4,numerical,0,1,2,3 Each parameter row in a factorial space definition should have the same number of columns. Parameter rows with fewer than the maximum number of values should have the empty columns at the end of the row, as shown above. The contents of an example CSV file for a mixture space might be: param1,unit,0,10 param2,unit,5,10 param3,unit,0,10 param4,unit,0,5 Each parameter fow in a mixture space defintion must specify a minimum and maximum unit volume, as shown above. Do not supply a header row for the space definition (for any type), just the parameter rows. Method put_experiments def put_experiments(self, experiments_type, experiments) Validate the responses for designed experiments, and any extra experiments for the current generation in the session. This method, or the put_experiments_responses_csv method, must be called before generating the next design, or finalizing the campaign. Parameters experiments_type :\u2002 DapticsExperimentsType : Describes the types of experiments that are being added to the session. If you wish to submit calibrating or existing experimental responses prior to the first design generartion, use `INITIAL_EXTRAS_ONLY`. If you are submitting the responses for a daptics-generated design, along with any extra experiments, use `DESIGNED_WITH_OPTIONAL_EXTRAS`. If you wish to submit any final extra experiments when you are satisified with the session's optimization but do not want to include the last generated experimental design use `FINAL_EXTRAS_ONLY`. Note that this will end the session's optimization and that no more designs will be generated. experiments :\u2002 dict : A \"table\" of experiments that includes columns, defined in the colHeaders value of the table, for each of the defined space parameters, and a column named 'Response' to record the result of experiments. Each row in the `data` value for the table represents an individual experiment. If the `experiments type` is `DESIGNED_WITH_OPTIONAL_EXTRAS`, you must sumbit at least as many rows as exist in the currently generated design, and the parameter values for these rows must match the design exactly. Additional \"extra\" experiment rows, that use any valid experimental parameter values, can also be provided. For the `INITIAL_EXTRAS_ONLY` and `FINAL_EXTRAS_ONLY` experiments types, rows that use any valid experimental parameter values can be provided. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with putExperiments and/or errors keys. The putExperiments value will contain information on the update task that was started, as described in the return value for the poll_for_current_task method. If the task was successfully started, the task information is stored in the client's `task_info` attribute. If the experiments were successfully validated, the following actions may be automatically performed: If the `auto_export_path` option is set, a CSV file of the validated experiments is saved at `auto_genN_experiments.csv`. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `update` task completes successfully, the result of the `update` task can be accessed at `data['putExperiments']['result']`. If the `auto_generate_next_design` option is set, a `generate` task is started, and the `autoDesignTask` key of the `putExperiments` key will contain information on the `generate` task that was started. If the `auto_generate_next_design` AND `auto_task_timeout` options are set, the `generate` task will be polled until it completes, fails, or times out. If the `generate` task completes, the generated design can be accessed at `data['putExperiments']['autoDesignTask']['result']['experiments']`. See the documentation for the `poll_for_current_task` for more information. Examples Here's an expamle of an experiments table: >>> experiments = { 'colHeaders': ['param1', 'param2', 'param3', 'param4', 'Response'], 'data': [ ['0', '4', '1', '1', '3.25'], ['1', '4', '1', '1', '4.5'], ... etc, matching generated design rows ] } Method put_experiments_csv def put_experiments_csv(self, experiments_type, fname) Validate the responses for designed experiments, and any extra experiments for the current generation in the session. This method, or the put_experiments_responses method, must be called before generating the next design, or finalizing the campaign. Parameters experiments_type :\u2002 DapticsExperimentsType : Describes the types of experiments that are being added to the session. If you wish to submit calibrating or existing experimental responses prior to the first design generartion, use `INITIAL_EXTRAS_ONLY`. If you are submitting the responses for a daptics-generated design, along with any extra experiments, use `DESIGNED_WITH_OPTIONAL_EXTRAS`. If you wish to submit any final extra experiments when you are satisified with the session's optimization but do not want to include the last generated experimental design use `FINAL_EXTRAS_ONLY`. Note that this will end the session's optimization and that no more designs will be generated. fname :\u2002 str : The location on the filesystem for a CSV file that will define the results of the designed and any extra experiments. See the Examples section below for an example. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with putExperiments and/or errors keys. The putExperiments value will contain information on the update task that was started, as described in the return value for the poll_for_current_task method. If the experiments were successfully validated, the following actions may be automatically performed: If the `auto_export_path` option is set, a CSV file of the validated experiments is saved at `auto_genN_experiments.csv`. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `update` task completes successfully, the result of the `update` task can be accessed at `data['putExperiments']['result']`. If the `auto_generate_next_design` option is set, a `generate` task is started, and the `autoDesignTask` key of the `putExperiments` key will contain information on the `generate` task that was started. If the `auto_generate_next_design` AND `auto_task_timeout` options are set, the `generate` task will be polled until it completes, fails, or times out. If the `generate` task completes, the generated design can be accessed at `data['putExperiments']['autoDesignTask']['result']['experiments']`. See the documentation for the `poll_for_current_task` for more information. Examples A header row must be provided, the columns in the header row must match the names of the parameters defined by the experimental space definition exactly, and a final column named Response must be filled with the results of each experiment row. param1,param2,param3,param4,Response 0,4,1,1,3.25 1,4,1,1,4.5 Each non-header row in the file represents an individual experiment. There must be at least as many experiment rows as the current design has, and the parameter values for these rows must match the design exactly. Additional \"extra\" experiment rows can also be provided. Method random_experiment_for_space def random_experiment_for_space(self, space, max_response_value=None) Uses a random number generator to select parameter values and optionally to create a random response value. Parameters space :\u2002 dict : A Python dict that defines the experimental space. max_response_value :\u2002 float , optional : If not given, the experiment is generated with an empty response. If a number, the response value is a randomly generated number in the range [0.0, max_response_value]. Returns experiment :\u2002 list : The list of randomly generated parameter values for an experiment, and the optionally generated response value. Each value is encoded as a string. If max_response_value is not given, the response value will be the empty string. Method random_experiments_with_responses def random_experiments_with_responses(self, space, design, num_extras=0, max_response_value=5.0) Generate an experiments table with where each experiment row contains a randomly generated response value. The experiment rows are optionally composed of \"designed\" rows and \"extra\" rows. The \"designed\" rows have one experiment row for each row in the currently generated design. And the \"extra\" rows contain randomly generated parameter values as well as responses. Parameters space :\u2002 dict : A Python dict that defines the experimental space. design :\u2002 dict or None : If supplied, a Python dict that defines the currently generated design as a table. The dict has colHeaders and data keys. num_extras :\u2002 int , optional : If non-zero, generate this number of extra rows. The extra rows will be appended to any designed rows. max_response_value :\u2002 float : The maximum value for generated responses. Each genreated response value is a randomly generated number in the range [0.0, max_response_value]. Returns response :\u2002 dict : A Python dict with colHeaders and data values, representing an experiments table. Method random_parameter_value def random_parameter_value(self, space_type, param) Uses a random number generator to select a parameter value that is valid for the space type and specified parameter definition. Parameters space_type :\u2002 str : The space type, either \"mixture\" or \"factorial\". param :\u2002 list : The row from the experimental space definition table that defines a particular parameter in the space (name, type, and min / max or allowed values for the parameter). Each element in the list is encoded as a string. Returns param_value :\u2002 str : A valid value for the parameter, encoded as a string. Method reconnect_session def reconnect_session(self, session_id) Find an existing session. Parameters session_id :\u2002 str : The session id to find. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with session and/or errors keys. Method save def save(self, fname) Save the user and session id to a JSON file. Parameters fname :\u2002 str : The file path to save the client state to. Returns Nothing : Method simulate_experiment_responses def simulate_experiment_responses(self, experiments=None) Generate values for the \"Response\" column. The values are a substitute for actual experimental results, computed with a synthetic data generator that takes as an input each experiment (i.e. each row of the experiments argument) and gives as output a single number, added as a 'Response'. The data generator samples a complex surface, constructed to have several peaks that are randomly placed in the space. There is a global optimum (highest peak), but optimization runs often will find one of the lower peaks. Parameters experiments :\u2002 dict : A \"table\" of experiments that includes columns, defined in the colHeaders value of the table, for each of the defined space parameters, and a column named 'Response' to record the result of experiments. Each row in the `data` value for the table represents an individual experiment. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with simulateExperiments and/or errors keys. Method simulate_experiment_responses_csv def simulate_experiment_responses_csv(self, fname) Generate values for the \"Response\" column. The values are a substitute for actual experimental results, computed with a synthetic data generator that takes as an input each experiment (i.e. each row of the experiments argument) and gives as output a single number, added as a 'Response'. The data generator samples a complex surface, constructed to have several peaks that are randomly placed in the space. There is a global optimum (highest peak), but optimization runs often will find one of the lower peaks. Parameters fname :\u2002 str : The location on the filesystem for a CSV file that will define the parameters for designed and any extra experiments. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with simulateExperiments and/or errors keys. Method space_table_column_names def space_table_column_names(self, space) Generates the canonically formatted column header names for the experimental space table. Parameters space :\u2002 dict : A Python dict that defines the experimental space. Returns column_headers :\u2002 list : A list of strings to build the column header for an experimental space. The list will contain \"Name\", \"Type\", \"Min\" and \"Max\" for a \"mixture\" space, or \"Name\", \"Type\", \"Value.1\", \"Value.2\", etc. for a \"factorial\" space. Method space_table_value_column_name def space_table_value_column_name(self, space_type, i) Utility method to format a header column name for in an experimental space table. Parameters space_type :\u2002 str : \"mixture\" or \"factorial\" i :\u2002 int : Index of the value column (starting at zero). Returns column_name :\u2002 str : \"Min\" or \"Max\" for a \"mixture\" space type, or \"Value.1\", \"Value.2\", etc. for a \"factorial\" space type. Method start_simulation def start_simulation(self, ngens, params) Start a simulation task for several design generations, specifying the desired experimental parameters and the number of generations to run. Parameters ngens :\u2002 int : The number of generations to attempt to design. Must be greater than zero. If the experimental space is exhausted the actual number of generations designed may be less than this number. params :\u2002 dict : A dictionary containing the experimental parameters to be used for the session. See the Notes section that describes the required keys for the params dict. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with runSimulation and/or errors keys. The runSimulation value will contain information on the simulate task that was started, as described in the return value for the poll_for_current_task method. If the `auto_export_path` option is set, a CSV file of each generation of simulated experiments is saved at `auto_genN_experiments.csv`. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `simulate` task completes successfully, the result of the `update` task can be accessed at `data['runSimulation']['result']`. Notes For more examples of how to submit space parameters, please see the documentation for the put_experimental_parameters method. Keys for the params dict are: populationSize :\u2002 int : The number of experiments per replicate. A positive integer. replicates :\u2002 int : The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space :\u2002 dict : The experimental space definition. Keys for the space dict are: type :\u2002 str : The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits :\u2002 int : For mixture type spaces, this is the mixture constraint parameter, a non-negative integer. table :\u2002 dict : The (optional) column headers and rows of parameter data. See an example below. the colHeaders value is ignored when importing or validating the experimental space definition. Method start_simulation_csv def start_simulation_csv(self, ngens, fname, params) Run a simulation for several design generations, specifying the desired experimental parameters and the number of generations to run. The experimental space is read from a CSV file. If the space parameters are successfully validated a \"simulate\" task is started. Parameters ngens :\u2002 int : The number of generations to attempt to design. Must be greater than zero. If the experimental space is exhausted the actual number of generations designed may be less than this number. fname :\u2002 str : The location on the filesystem for a CSV file that will define the experimental space definition. See the Examples section below for an example. params :\u2002 dict : A dictionary containing the experimental parameters to be used for the session. See the Notes section that describes the required keys for the params dict. Returns response :\u2002 dict : The JSON response from the gql request, a Python dict with runSimulation and/or errors keys. The runSimulation value will contain information on the simulate task that was started, as described in the return value for the poll_for_current_task method. If the `auto_export_path` option is set, a CSV file of each generation of simulated experiments is saved at `auto_genN_experiments.csv`. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `simulate` task completes successfully, the result of the `update` task can be accessed at `data['runSimulation']['result']`. Raises csv.Error : If the specified CSV file is incorrectly formatted. Notes For more examples of how to submit space parameters, please see the documentation for the put_experimental_parameters method. Keys for the params dict are: populationSize :\u2002 int : The number of experiments per replicate. A positive integer. replicates :\u2002 int : The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space :\u2002 dict : The experimental space definition. Keys for the space dict are: type :\u2002 str : The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits :\u2002 int : For mixture type spaces, this is the mixture constraint parameter, a non-negative integer. Method wait_for_current_task def wait_for_current_task(self, task_type=None, timeout=None) Wraps poll_for_current_task in a loop. Repeat until task disappears, when status is success or failure . Parameters task_type :\u2002 DapticsTaskType , optional : SPACE , UPDATE , GENERATE , SIMULATE , ANALYTICS , or None. If None is supplied (the default), find the most recently started task of any type. timeout :\u2002 float , optional : Maximum number of seconds to wait. If None or a negative number, wait forever. Returns response :\u2002( dict , dict ) : A tuple containing two dicts : The first element is the data component of the GraphQL response, a Python dict with currentTask , and the second element is the errors component of the GraphQL response. Either data or errors may be None. See the documentation on the poll_for_current_task method for more information about the data returned for different types of tasks , and for how task completion : affects attributes of the DapticsClient instance. Class DapticsExperimentsType class DapticsExperimentsType(*args, **kwargs) Enumerates the purpose for the experiments that are being uploaded to the session via the put_experiments or put_experiments_csv method. Class variables Variable DESIGNED_WITH_OPTIONAL_EXTRAS Indicates that the experiments being submitted contain designed experiments, with optional extra experiments. Variable FINAL_EXTRAS_ONLY Indicates that the experiments being submitted are final experiments. Variable INITIAL_EXTRAS_ONLY Indicates that the experiments being submitted are initial experiments. Class DapticsTaskType class DapticsTaskType(*args, **kwargs) Enumerates the different asynchronous tasks that the daptics system can create and that can be searched for using the poll_for_current_task or wait_for_current_task methods. Class variables Variable ANALYTICS A task that generates analytics files at the current generation. Variable GENERATE A task that generates the next generation of experiments. Variable SIMULATE A task that simulates a given number of experimental generations. Variable SPACE A task that validates and saves experimental space parameters. Variable UPDATE A task that validates and incorporates initial, designed, or final experiments. Class InvalidConfigError class InvalidConfigError(path) An error raised if the option configuration file cannot be parsed. Class InvalidExperimentsTypeError class InvalidExperimentsTypeError(experiments_type) An error raised if the type of experiments is not a valid type. Class InvalidSpaceParameterError class InvalidSpaceParameterError(space_type, param) An error raised if the specified experimental space parameters are missing or invalid. Class InvalidTaskTypeError class InvalidTaskTypeError(task_type) An error raised if the task type specified was not a valid type. Class MissingConfigError class MissingConfigError(path) An error raised if the option configuration file cannot be found. Class NextGenerationError class NextGenerationError(gen) An error raised if the generation number specified is not the next generation number for the session. Class NoCredentialsError class NoCredentialsError() An error raised if no login credentials were specified. Class NoCurrentTaskError class NoCurrentTaskError() An error raised if no current task could be found, when one was expected. Class NoHostError class NoHostError() An error raised if no host value was specified. Class SessionParametersNotValidatedError class SessionParametersNotValidatedError() An error raised if the method cannot be completed, because the experimental space parameters for the session have not been saved and validated yet. Class SpaceOrDesignRequiredError class SpaceOrDesignRequiredError() An error raised if neither an experimental space nor an experimental design was submitted for generating random experiments. Class TaskFailedError class TaskFailedError(type_) An error raised if a completed task did not return a valid result. Class TaskTimeoutError class TaskTimeoutError() An error raised if a task was not completed within the specified timeout. Class TokenAuth class TokenAuth() A callable authentication object for the Python requests moudule. If acess token is set, add a \"Bearer\" authorization header to the HTTP request. Generated by pdoc 0.7.2 ( https://pdoc3.github.io ).","title":"Python API Client"},{"location":"daptics_client/#module-daptics_client","text":"DapticsClient - A Python client for the Daptics GraphQL API. See comments and docstrings for the DapticsClient class in the code below for suggestions for using this class. For additional help or information, please visit or contact Daptics. On the web at https://daptics.ai By email at support@daptics.ai Daptics API Version 0.10.0 Copyright (c) 2020 Daptics Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), the rights to use, copy, modify, merge, publish, and/or distribute, copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: You do not have the right to sub-license or sell copies of the Software. The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module daptics_client"},{"location":"daptics_client/#classes","text":"","title":"Classes"},{"location":"daptics_client/#class-csvfileemptyerror","text":"class CsvFileEmptyError(fname) An error raised if there were no rows that could be read from the specified CSV file.","title":"Class CsvFileEmptyError"},{"location":"daptics_client/#class-csvnodatarowserror","text":"class CsvNoDataRowsError(fname) An error raised if there were no rows after the header row that could be read from the specified CSV file.","title":"Class CsvNoDataRowsError"},{"location":"daptics_client/#class-dapticsclient","text":"class DapticsClient(host=None, config=None) A Python gql client for maintaining the state of a Daptics optimization session. Between API invocations, data such as the user id, access token, session id, last generated design, etc. are retained in the object's attributes.","title":"Class DapticsClient"},{"location":"daptics_client/#attributes","text":"host :\u2002 str : The host part of the API endpoint, as read from configuration, or set manually prior to calling connect . config :\u2002 str : File path to a JSON configuration file, used to read the host, login credentials and runtime options. Defaults to \"daptics.conf\". options :\u2002 dict : A Python dictionary containing runtime options. credentials :\u2002( str , str ) : A tuple of ( username , password ), as read from configuration, or set manually prior to calling login . api_url :\u2002 str : The full API endpoint URL. pp :\u2002 pprint.PrettyPrinter : Used for printing dict output. gql :\u2002 gql.Client : The gql.Client object used to make GraphQL requests to the API. auth :\u2002 TokenAuth : Used to insert the required authorization header in API requests. The auth object's token attribute is set by the login method. user_id :\u2002 str : The user id for the authenticated user, set by the login method. session_id :\u2002 str : The session id for a connected daptics session, as set by the create_session method. session_name :\u2002 str : The user-specified name for a connected daptics session, as set by the create_session method. task_info :\u2002 dict : Information about the polling status for running tasks in the session. gen :\u2002 int : The design \"generation number\" for the session. This is -1 for a new session, 0 when the session's experimental space has been validated, and greater than zero when a design has been generated by the system. remaining :\u2002 int : If not None, the number of possible generations that can be generated until the entire design space has been explored. completed :\u2002 bool : A flag indicating whether the design space has been completely explored. initial_params :\u2002 dict : The experimental space and other information as initially returned by the create_session method. space :\u2002 dict : The experimental space as updated by the result of the \"save experimental space\" task. design :\u2002 dict : The current generated design, as updated by the result of a \"generate design\" task. experiments_history :\u2002 list : All the experiments and responses that have been simulated, as updated by the result of a \"simulate\" task, represented as a list of Python dicts.","title":"Attributes"},{"location":"daptics_client/#notes","text":"The keys in the JSON configuration file , specified by the config attribute, are: host - host part of the API endpoint user - email of the database user to login with password - password for the database user to login with auto_export_path - see options below auto_task_timeout - see options below auto_generate_next_design - see options below If the config attribute is set to None, the configuration can be read from OS environment variables, if they exist. The environment variable names are: DAPTICS_HOST - host part of the API endpoint DAPTICS_USER - email of the database user to login with DAPTICS_PASSWORD - password for the database user to login with DAPTICS_AUTO_EXPORT_PATH - see options below DAPTICS_AUTO_TASK_TIMEOUT - see options below DAPTICS_AUTO_GENERATE_NEXT_DESIGN - see options below As of this version, there are three available options that enable automated processes for common use of the API: auto_export_path - If not None, a string indicating the relative or absolute directory where the validated experimental space and generated design files will be saved, so that the user will not have to explicitly call the export functions. auto_task_timeout - If set to a positive number indicating the number of seconds to wait, this option will immediately start to wait on a just-created task, so that the user will not have to explicitly call poll_for_current_task or wait_for_current_task . Setting this option to a negative number, means to wait indefinitely. Setting the option to zero will poll the task just once. The default, None, means that the user wants to explicitly call poll_for_current_task or wait_for_current_task . auto_generate_next_design - If set (True), uploading (initial or later) experiment responses will automatically start a generate task for the next design generation. If not set (None or False), the uploading will only validate the responses, and the user will have to call the generate task manually after a successful validation. Initialize a new DapticsClient object.","title":"Notes"},{"location":"daptics_client/#parameters","text":"host :\u2002 str , optional : The host part of the API endpoint. Example: http://localhost:4041 config :\u2002 str , optional : File path to a JSON configuration file.","title":"Parameters"},{"location":"daptics_client/#class-variables","text":"","title":"Class variables"},{"location":"daptics_client/#variable-default_config","text":"The default location for the option configuration file.","title":"Variable DEFAULT_CONFIG"},{"location":"daptics_client/#variable-export_space_timeout","text":"The default timeout for validating the experimental space parameters.","title":"Variable EXPORT_SPACE_TIMEOUT"},{"location":"daptics_client/#variable-get_analytics_timeout","text":"The default timeout for generating analytics files, in seconds.","title":"Variable GET_ANALYTICS_TIMEOUT"},{"location":"daptics_client/#variable-required_space_params","text":"Names of required experimental space parameters.","title":"Variable REQUIRED_SPACE_PARAMS"},{"location":"daptics_client/#methods","text":"","title":"Methods"},{"location":"daptics_client/#method-call_api","text":"def call_api(self, document, vars, timeout=None) Perform validation on the gql query or mutation document and then execute the query. We cannot call self.gql.execute directly, because it converts 'errors' returned into an Exception. We want to preserve the 'errors' if they exist, and also return the data.","title":"Method call_api"},{"location":"daptics_client/#parameters_1","text":"fname :\u2002 str : The file path to save the client state to.","title":"Parameters"},{"location":"daptics_client/#returns","text":"response :\u2002( dict , dict ) : A tuple containing two dicts : The first element is the data component of the GraphQL response, a Python dict with currentTask , and the second element is the errors component of the GraphQL response. Either data or errors may be None.","title":"Returns"},{"location":"daptics_client/#method-connect","text":"def connect(self) Read in the configuration and instantiate the client if it has not been done before. Creates an HTTP transport instance from the client's api_url attribute, and attempts to connect to the introspection interface. The gql.Client value is stored in the client's gql attribute.","title":"Method connect"},{"location":"daptics_client/#returns_1","text":"Nothing :","title":"Returns"},{"location":"daptics_client/#raises","text":"MissingConfigError : If the config file specified does not exist. InvalidConfigError : If the config file specified cannot be parsed, or does not have a 'host' value. NoHostError : If there is no config file specifed and no host has been set. requests.ConnectionError : If the connection cannot be made.","title":"Raises"},{"location":"daptics_client/#method-create_session","text":"def create_session(self, name, description) Create a new daptics session.","title":"Method create_session"},{"location":"daptics_client/#parameters_2","text":"name :\u2002 str : The unique name for the session among the authenticated user's sessions. description :\u2002 str : A description for the session.","title":"Parameters"},{"location":"daptics_client/#returns_2","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with createSession and/or errors keys. On successful creation, the session id, session_name and initial parameters are stored in the client's attributes.","title":"Returns"},{"location":"daptics_client/#method-do_auto_task","text":"def do_auto_task(self, timeout_override=None) Calls wait_for_current_task if the auto_task_timeout option was set.","title":"Method do_auto_task"},{"location":"daptics_client/#parameters_3","text":"timeout_override :\u2002 float , optional : If None, use the value of the auto_task_timeout . Otherwise, if a positive number, the maximum number of seconds to wait. If a negative number, wait forever.","title":"Parameters"},{"location":"daptics_client/#returns_3","text":"response :\u2002( dict , dict ) : A tuple containing two dicts : The first element is the currentTask component, and the second element is the errors component of the GraphQL response. Either currentTask (for example on timeout) or errors may be None.","title":"Returns"},{"location":"daptics_client/#method-error_messages","text":"def error_messages(self, errors) Extract the message values from the errors list returned in a GraphQL response.","title":"Method error_messages"},{"location":"daptics_client/#parameters_4","text":"errors :\u2002 list : The list of GraphQL errors. Each error must have a message value, and can optionally have key , path and locations values.","title":"Parameters"},{"location":"daptics_client/#returns_4","text":"message :\u2002 str or list : The message (or messages) extracted from the GraphQL response.","title":"Returns"},{"location":"daptics_client/#method-experiment_with_random_response","text":"def experiment_with_random_response(self, experiment, max_response_value) Uses a random number generator to generate a numerical response value in the range [0, n] and then replaces any existing response value with the generated value.","title":"Method experiment_with_random_response"},{"location":"daptics_client/#parameters_5","text":"experiment :\u2002 list : A list of values representing an experiment, including a (possibly empty) response value. max_response_value :\u2002 float : The maximum random response value to be generated for the experiment.","title":"Parameters"},{"location":"daptics_client/#returns_5","text":"experiment :\u2002 list : The list of parameter values for the specified experiment, and a generated response value. Each value is encoded as a string.","title":"Returns"},{"location":"daptics_client/#method-experiments_table_column_names","text":"def experiments_table_column_names(self, space) Generates the required header for the experiments table, including the names of each parameter in the experimental space, and the reserved name \"Response\" for the experiment response value.","title":"Method experiments_table_column_names"},{"location":"daptics_client/#parameters_6","text":"space :\u2002 dict : A Python dict that defines the experimental space.","title":"Parameters"},{"location":"daptics_client/#returns_6","text":"column_headers :\u2002 list : The list is made up from the names of all parameters, and the additional string \"Response\".","title":"Returns"},{"location":"daptics_client/#method-experiments_table_template","text":"def experiments_table_template(self, space) Generate the column header for the experiments table, with no data rows. Can be used to export an empty experiments table template CSV file, or to submit \"empty\" initial experiments.","title":"Method experiments_table_template"},{"location":"daptics_client/#parameters_7","text":"space :\u2002 dict : A Python dict that defines the experimental space.","title":"Parameters"},{"location":"daptics_client/#returns_7","text":"response :\u2002 dict : A Python dict with with a colHeaders item containing the column header row, and an empty data list item.","title":"Returns"},{"location":"daptics_client/#method-export_csv","text":"def export_csv(self, fname, table, headers=True) Utility method to write an experimental space or experiments table to a CSV file on disk.","title":"Method export_csv"},{"location":"daptics_client/#parameters_8","text":"fname :\u2002 str : The filesystem path where the file will be written. table :\u2002 dict : A Python dict with colHeaders and data values, representing an experimental space or experiments table. headers :\u2002 bool , optional : If False, no header row will be written (this is the standard for experimental space CSV files). If True, the header row will be written to the file.","title":"Parameters"},{"location":"daptics_client/#returns_8","text":"Nothing :","title":"Returns"},{"location":"daptics_client/#method-export_experimental_space_csv","text":"def export_experimental_space_csv(self, fname, timeout=300) Retrieves the validated experimental space table and writes the table to a CSV file on disk.","title":"Method export_experimental_space_csv"},{"location":"daptics_client/#parameters_9","text":"fname :\u2002 str : The filesystem path where the file will be written. timeout :\u2002 float , optional : The maximum number of seconds that the client will poll the session to retrieve the experimental space. The default is 300 (5 minutes).","title":"Parameters"},{"location":"daptics_client/#returns_9","text":"response :\u2002 dict : A Python dict representing the validated experimental space.","title":"Returns"},{"location":"daptics_client/#method-export_experiments_history_csv","text":"def export_experiments_history_csv(self, fname) Retrieves and returns the experiments and responses for all generations in the session, and writes them to a summary CSV file on disk. Also updates the experiments_history attribute in the client.","title":"Method export_experiments_history_csv"},{"location":"daptics_client/#parameters_10","text":"fname :\u2002 str : The filesystem path where the file will be written.","title":"Parameters"},{"location":"daptics_client/#returns_10","text":"experiments_history :\u2002 list or None : The value of the client's experiments_history attribute, which may be None if no experiments have been submitted or designed, or is a list of dicts. See the documentation for the get_experiments_history method for a description of this value.","title":"Returns"},{"location":"daptics_client/#method-export_generated_design_csv","text":"def export_generated_design_csv(self, fname, gen=None) Retrieves a design generation from the session, and writes the table (with empty responses) to a CSV file on disk.","title":"Method export_generated_design_csv"},{"location":"daptics_client/#parameters_11","text":"fname :\u2002 str : The filesystem path where the file will be written. gen :\u2002 int , optional : The generation number for the design to be retrieved. If None, retreive the design for the current generation.","title":"Parameters"},{"location":"daptics_client/#returns_11","text":"design_table :\u2002 dict : The generated design, a Python dict representing an experiments table with empty responses with colHeaders , and data keys.","title":"Returns"},{"location":"daptics_client/#method-export_initial_experiments_template_csv","text":"def export_initial_experiments_template_csv(self, fname) Retrieves the validated experimental space table and writes an empty initial experiments table to a CSV file on disk.","title":"Method export_initial_experiments_template_csv"},{"location":"daptics_client/#parameters_12","text":"fname :\u2002 str : The filesystem path where the file will be written.","title":"Parameters"},{"location":"daptics_client/#returns_12","text":"column_headers :\u2002 list : The experiments table header row that was written to disk, as a list of strings.","title":"Returns"},{"location":"daptics_client/#method-generate_analytics","text":"def generate_analytics(self, timeout=90) Start an analytics task that will create and return a list of all the available analytics files for the session at the current design generation.","title":"Method generate_analytics"},{"location":"daptics_client/#parameters_13","text":"timeout :\u2002 float : An override to the auto_task_timeout option.","title":"Parameters"},{"location":"daptics_client/#returns_13","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with createAnalytics and/or errors keys. The createAnalytics value will contain information on the analytics task that was started, as described in the return value for the poll_for_current_task method. If either the `timeout` argument or `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `analytics` task completes successfully, the result of the `update` task can be accessed at `data['createAnalytics']['result']`.","title":"Returns"},{"location":"daptics_client/#method-generate_design","text":"def generate_design(self, gen=None) If (initial or subsequent) experiments have been successfully validated against the experimental parameters, a \"generate design\" task is started.","title":"Method generate_design"},{"location":"daptics_client/#parameters_14","text":"gen :\u2002 int , optional : The current generation number for the experiments that have successfully validated. Use zero for initial experiments. Use None to use the gen attribute stored in the client.","title":"Parameters"},{"location":"daptics_client/#returns_14","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with generateDesign and/or errors keys. The generateDesign value will contain information on the generate task that was started, as described in the return value for the poll_for_current_task method. If the `auto_export_path` option is set, a CSV file of the generated design is saved at `auto_genN_design.csv`. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `simulate` task completes successfully, the result of the `update` task can be accessed at `data['generateDesign']['result']`.","title":"Returns"},{"location":"daptics_client/#method-get_all_analytics_files","text":"def get_all_analytics_files(self, directory='.', timeout=90) Create an analytics task and wait for it to complete. If the task completes successfully, process the result for all the available analytics files. For each file, download its contents and save it in the specified directory.","title":"Method get_all_analytics_files"},{"location":"daptics_client/#parameters_15","text":"directory :\u2002 str , optional : If supplied, the target directory to save the files to. If the directory does not exist, attempt to create it. timeout :\u2002 int , optional : The maximum number of seconds that the client will wait for a response from the session. The default is 90 seconds.","title":"Parameters"},{"location":"daptics_client/#returns_15","text":"response :\u2002 int : The number of files created.","title":"Returns"},{"location":"daptics_client/#method-get_analytics_file","text":"def get_analytics_file(self, url, save_as=None) Fetch the contents of an analytics file. Once a URL to a particular analytics file has been obtained using the generate_analytics method, and the result of the analytics task has been returned, use the url and filename values from the result as the arguments to this convenience method to request the file's contents over HTTP, submitting a request with an Authorization header.","title":"Method get_analytics_file"},{"location":"daptics_client/#parameters_16","text":"url :\u2002 str : The URL for the file, as returned from get_analytics method. save_as :\u2002 str , optional : If supplied, save the file's contents to this file system location. The location must be writable by the calling user.","title":"Parameters"},{"location":"daptics_client/#returns_16","text":"response :\u2002 requests.Response : The requests library's response object for the authenticated HTTP request.","title":"Returns"},{"location":"daptics_client/#method-get_experimental_space","text":"def get_experimental_space(self) Utility method to retrieve the validated experimental space from the session. If the session was restarted and the experimental space had been previously validated, it will be in the validated_params attribute, and this method will return it.","title":"Method get_experimental_space"},{"location":"daptics_client/#returns_17","text":"response :\u2002 dict : The validated space, a Python dict with type , and table keys, and a totalUnits key if the space type is \"mixture\", or None if the space has not been validated.","title":"Returns"},{"location":"daptics_client/#method-get_experiments","text":"def get_experiments(self, design_only=False, gen=None) Get the designed or completed experiments for the current or any previous generation.","title":"Method get_experiments"},{"location":"daptics_client/#parameters_17","text":"design_only :\u2002 bool : If gen is specified, and this argument is set to True , only return the designed experiments (without responses). gen :\u2002 int : The generation number to search for. Use 0 to specify initial experiments. Use None to search for the last designed generation.","title":"Parameters"},{"location":"daptics_client/#returns_18","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with experiments and/or errors keys. The value at the experiments key is a Python dict with these keys: validated :\u2002 bool : True if these experiments have been validated. hasResponses :\u2002 bool : True if at least some of these experiments have responses. designRows :\u2002 int : The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table :\u2002 dict : A Python dict with colHeaders and data values, representing the experiments submitted or designed for the generation.","title":"Returns"},{"location":"daptics_client/#method-get_experiments_history","text":"def get_experiments_history(self) Get all of the experiments and any responses for all the generations in the session.","title":"Method get_experiments_history"},{"location":"daptics_client/#returns_19","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with experimentsHistory and/or errors keys. Also updates the client's experiments_history attribute. The experimentsHistory value is either None if no experiments have been submitted or designed, or a list. Each item in the list is either None, or a Python dict that represents a generation. The first item in the list is generation \"zero\", the initial experiments. If a generation is available (non None), it is a Python dict with the following keys: gen :\u2002 int : The generation number (zero meaning initial experiments). validated :\u2002 bool : True if these experiments have been validated. hasResponses :\u2002 bool : True if at least some of these experiments have responses. designRows :\u2002 int : The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table :\u2002 dict : A Python dict with colHeaders and data values, representing the experiments submitted or designed for the generation.","title":"Returns"},{"location":"daptics_client/#method-get_generated_design","text":"def get_generated_design(self, gen=None) Retrieves a design generation from the session.","title":"Method get_generated_design"},{"location":"daptics_client/#parameters_18","text":"gen :\u2002 int : The generation number for the design to be retrieved. If None, retreive the design for the current generation.","title":"Parameters"},{"location":"daptics_client/#returns_20","text":"response :\u2002 dict : The value of the experiments key from the GraphQL response, a Python dict with these keys: validated :\u2002 bool : True if these experiments have been validated. hasResponses :\u2002 bool : True if at least some of these experiments have responses. designRows :\u2002 int : The number of rows of experiments that were designed. Rows after the designRows are \"extra\" experiments. table :\u2002 dict : A Python dict with colHeaders and data values, representing the experiments submitted or designed for the generation.","title":"Returns"},{"location":"daptics_client/#method-halt_session","text":"def halt_session(self, session_id) Close an connected session, to release all resources.","title":"Method halt_session"},{"location":"daptics_client/#parameters_19","text":"session_id :\u2002 str : The session id to close.","title":"Parameters"},{"location":"daptics_client/#returns_21","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with haltSession and/or errors keys. If the call is successful, the 'haltSession' value contains these keys: action :\u2002 str : The action taken, either 'close' (if the session was connected) or 'none' if had already been closed. status :\u2002 str : The session status, which should always be 'closed',","title":"Returns"},{"location":"daptics_client/#method-init_config","text":"def init_config(self) Read in the client configuration from possible sources.","title":"Method init_config"},{"location":"daptics_client/#returns_22","text":"Nothing :","title":"Returns"},{"location":"daptics_client/#raises_1","text":"MissingConfigError : If the config file specified does not exist. InvalidConfigError : If the config file specified cannot be parsed, or does not have a 'host' value.","title":"Raises"},{"location":"daptics_client/#method-list_sessions","text":"def list_sessions(self, user_id=None, name=None) Show a list of the user's sessions.","title":"Method list_sessions"},{"location":"daptics_client/#parameters_20","text":"user_id :\u2002 str : (optional) Limit the results to the user with this id. Omitting this argument is normal for regular users. name :\u2002 str : (optional) Limit the results to any session whose name, description, tag or id contains this string.","title":"Parameters"},{"location":"daptics_client/#returns_23","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with sessions and/or errors keys.","title":"Returns"},{"location":"daptics_client/#method-load","text":"def load(self, fname) Restore a previously saved client from a JSON file.","title":"Method load"},{"location":"daptics_client/#parameters_21","text":"fname :\u2002 str : The file path to restore the client state from.","title":"Parameters"},{"location":"daptics_client/#returns_24","text":"Nothing :","title":"Returns"},{"location":"daptics_client/#method-load_config_env","text":"def load_config_env(self)","title":"Method load_config_env"},{"location":"daptics_client/#method-load_config_file","text":"def load_config_file(self, config_path, config_must_exit)","title":"Method load_config_file"},{"location":"daptics_client/#method-login","text":"def login(self, email=None, password=None) Authenticate to a user record in the database as identified in the client's email and password attributes, and create an access token.","title":"Method login"},{"location":"daptics_client/#parameters_22","text":"email :\u2002 str : The email adddress of the database user that will be used for authentication. password :\u2002 str : The cleartext password of the database user that will be used for authentication. If called with default ( None ) arguments, the email and password will be retrieved from the credentials attribute.","title":"Parameters"},{"location":"daptics_client/#returns_25","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with login and/or errors keys. On successful authentication, the user id and access token are stored in the client's user_id and auth attributes.","title":"Returns"},{"location":"daptics_client/#method-poll_for_current_task","text":"def poll_for_current_task(self, task_type=None) If there is a currently running task saved in the client, poll the session to see if a result is ready.","title":"Method poll_for_current_task"},{"location":"daptics_client/#parameters_23","text":"task_type :\u2002 DapticsTaskType : SPACE , UPDATE , GENERATE , SIMULATE , ANALYTICS , or None. If None is supplied (the default), find the most recently started task of any type.","title":"Parameters"},{"location":"daptics_client/#returns_26","text":"response :\u2002( dict , dict ) : A tuple containing two dicts : The first element is the data component of the GraphQL response, a Python dict with currentTask , and the second element is the errors component of the GraphQL response. Either data or errors may be None.","title":"Returns"},{"location":"daptics_client/#notes_1","text":"The currentTask value returned is a Python dict with information on the task (if found). The values in the dict are as follows: taskId :\u2002 str : The unique identifier for the task. type :\u2002 str : The type of task, either space , update , generate , simulate , or analytics . description :\u2002 str : A user-friendly description of what the task is. startedAt :\u2002 str : An ISO 8601 string value of the UTC time at which the task was started. status :\u2002 str : The status of the task, either new , running , success , failed , or canceled . result :\u2002 dict : If the status of the task is success , the value of the result is another Python dict . The result dicts for each type of task are as follows:","title":"Notes"},{"location":"daptics_client/#result-for-space-tasks","text":"campaign :\u2002 dict : A Python dict with these components: gen : int The generation number for the session (0). remaining : int If available, how many more generations can be performed. completed : bool If available, whether the campaign has been completed. params :\u2002 dict : A Python dict with these components: validated : bool True if the space was validated. designCost : int If available, the cost in daptics credit that will be deducted from the user's account for each design generation. populationSize, replicates, and space: See the description for these values in the documentation for the arguments for the `put_experimetal_parameters` method. If a space task has successfully completed, the client's gen attribute is set to zero.","title":"## Result for space Tasks"},{"location":"daptics_client/#result-for-update-tasks","text":"The result for an update task will contain all the values as the result for a space task, described above, with this additional value: experiments :\u2002 dict : A Python dict with these components: gen : int The generation number for this set of experiments. validated : bool True if the experiments validated successfully. hasResponses : bool True if any of the experiments in this set were submitted with responses. designRows : int The number of rows of daptics-designed experiments in this set of experiments. `designRows` will be zero if these are initial experiments. table : dict A Python `dict` with `colHeaders` and `data` components, as described in the arguments for the `put_experiments` method. If the auto_generate_next_design option has been set on the client, when an update task completes, a generate task will be automatically started. The information on the generate task will be returned in the location data['currentTask']['autoDesignTask'] . If the auto_task_timeout option has also been set, and the generate task result has completed, the result (containing the next generation design), will be available at the location data['currentTask']['autoDesignTask']['result'] , formatted as described below.","title":"## Result for update Tasks"},{"location":"daptics_client/#result-for-generate-tasks","text":"The result for a generate task has the same structure as the result for a update task, described above. The experiments value will contain the generated design, and the hasResponses value within the design will be False , as the generated design returned in the result will not have responses. If a generate has successfully completed, the client's gen attribute is updated to a number greater than zero, and the generated design from the experiments value will be stored in the client's design attribute.","title":"### Result for generate Tasks"},{"location":"daptics_client/#result-for-simulate-tasks","text":"The result for a simulate task will contain all the values as the result for a space task, described above, with this additional value: experimentsHistory :\u2002 list : A list of all the experiments in generations 1 through N, that were simulated. Each element of the list will be a Python dict with gen , validated , hasResponses , designRows and table values as described above in the documentation for the result of an update task.","title":"## Result for simulate Tasks"},{"location":"daptics_client/#result-for-analytics-tasks","text":"analytics :\u2002 dict : A Python dict with these components: gen : int The current generation number that the analytics were generated for. files : list A list of Python `dict`s, with information about each analytics file generated. Information about each file is contained in a Python dict with these components: title :\u2002 str : The title (caption) describing the file. filename :\u2002 str : The suggested filename to save the file to. url :\u2002 str : The HTTP URL where the file can be downloaded. A valid authentication token for the user must be included in the Authorization header for the download request.","title":"## Result for analytics Tasks"},{"location":"daptics_client/#method-print","text":"def print(self) Print out debugging information about the session.","title":"Method print"},{"location":"daptics_client/#method-put_experimental_parameters","text":"def put_experimental_parameters(self, params) Validate the experimental parameters at the beginning of a session, and start a \"space\" task. The individual experimental parameter names, types and permissible values in the space definition are specified at the ['space']['table'] key of the params dict.","title":"Method put_experimental_parameters"},{"location":"daptics_client/#parameters_24","text":"params :\u2002 dict : A dictionary containing the experimental parameters to be used for the session. See the Notes section that describes the required keys for the params dict.","title":"Parameters"},{"location":"daptics_client/#returns_27","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with putExperimentalParameters and/or errors keys. If the task was successfully started, the task information is stored in the client's `task_info` attribute. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the task","title":"Returns"},{"location":"daptics_client/#notes_2","text":"These are the required keys for the params dict: populationSize :\u2002 int : The number of experiments per replicate. A positive integer. replicates :\u2002 int : The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space :\u2002 dict : The experimental space definition. Required keys for the space dict are: type :\u2002 str : The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits :\u2002 int : For mixture type spaces, this is the mixture constraint parameter, a non-negative integer. table :\u2002 dict : The (optional) column headers and rows of parameter data. See an example below. the colHeaders value is ignored when importing or validating the experimental space definition. To maintain uniformity, header and data row elements should be Python strings, even if they represent numeric values. For mixture type spaces, there should only be 4 columns of data in each row: the name of the parameter, the type of the parameter (which must always be the string \"unit\"), the minimum value of the parameter (a non-negative integer) and the maximum value of the parameter (a positive integer, less than or equal to the totalUnits constraint parameter). For factorial type spaces, there must be at least 4 columns of data in each row: the name of the parameter, the type of the parameter (a string, either \"numerical\" or \"categorical\"), and at least two possible distinct values that the parameter can have in an experiment. Different parameters can have either 2 or more than 2 possible values. The rows must be all be of the same size, so make sure to pad the rows with fewer values with empty strings at the end. In addition to the required params listed above, optional additional parameters may be submitted. Please contact daptics for more information about these advanced parameters.","title":"Notes"},{"location":"daptics_client/#examples","text":"Here is a mixture space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'mixture', 'totalUnits': 25, 'table': { 'colHeaders': [ 'Name', 'Type', 'Min', 'Max' ], 'data': [ [ 'param1', 'unit', '1', '10' ], [ 'param2', 'unit', '2', '10' ], [ 'param3', 'unit', '4', '8' ], [ 'param4', 'unit', '2', '5' ] ] } } } Here is a factorial space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'factorial', 'table': { 'colHeaders': [ 'Name', 'Type', 'Value.1', 'Value.2', 'Value.3', 'Value.4' ], 'data': [ [ 'param1', 'numerical', '0', '1', '2', '3' ], [ 'param2', 'numerical', '2', '3', '', '' ], [ 'param3', 'numerical', '0', '1', '2', '' ], [ 'param4', 'numerical', '0', '1', '2', '3' ] ] } } }","title":"Examples"},{"location":"daptics_client/#method-put_experimental_parameters_csv","text":"def put_experimental_parameters_csv(self, fname, params) Validate the experimental parameters at the beginning of a session, and start a \"space\" task. The individual experimental parameter names, types and permissible values in the space definition are read from a CSV file.","title":"Method put_experimental_parameters_csv"},{"location":"daptics_client/#parameters_25","text":"fname :\u2002 str : The location on the filesystem for a CSV file that will define the experimental space definition. See the Examples section below for an example. params :\u2002 dict : A dictionary containing the experimental parameters to be used for the session. See the Notes section for more information.","title":"Parameters"},{"location":"daptics_client/#returns_28","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with putExperimentalParameters and/or errors keys. If the task was successfully started, the task information is stored in the client's `task_info` attribute. Also, if the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded.","title":"Returns"},{"location":"daptics_client/#raises_2","text":"csv.Error : If the specified CSV file is incorrectly formatted.","title":"Raises"},{"location":"daptics_client/#notes_3","text":"Keys for the params dict are: populationSize :\u2002 int : The number of experiments per replicate. A positive integer. replicates :\u2002 int : The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space :\u2002 dict : The experimental space definition. The single required key for the space dict is: type :\u2002 str : factorial or mixture In addition to the required params listed above, optional additional parameters may be submitted. Please contact daptics for more information about these advanced parameters.","title":"Notes"},{"location":"daptics_client/#examples_1","text":"Here is a space design that will have enough combinations to be validated by the backend. >>> params = { 'populationSize': 30, 'replicates': 2, 'space': { 'type': 'factorial', } } The contents of an example CSV file for a factorial space might be: param1,numerical,0,1,2,3 param2,numerical,2,3,4, param3,numerical,0,1,, param4,numerical,0,1,2,3 Each parameter row in a factorial space definition should have the same number of columns. Parameter rows with fewer than the maximum number of values should have the empty columns at the end of the row, as shown above. The contents of an example CSV file for a mixture space might be: param1,unit,0,10 param2,unit,5,10 param3,unit,0,10 param4,unit,0,5 Each parameter fow in a mixture space defintion must specify a minimum and maximum unit volume, as shown above. Do not supply a header row for the space definition (for any type), just the parameter rows.","title":"Examples"},{"location":"daptics_client/#method-put_experiments","text":"def put_experiments(self, experiments_type, experiments) Validate the responses for designed experiments, and any extra experiments for the current generation in the session. This method, or the put_experiments_responses_csv method, must be called before generating the next design, or finalizing the campaign.","title":"Method put_experiments"},{"location":"daptics_client/#parameters_26","text":"experiments_type :\u2002 DapticsExperimentsType : Describes the types of experiments that are being added to the session. If you wish to submit calibrating or existing experimental responses prior to the first design generartion, use `INITIAL_EXTRAS_ONLY`. If you are submitting the responses for a daptics-generated design, along with any extra experiments, use `DESIGNED_WITH_OPTIONAL_EXTRAS`. If you wish to submit any final extra experiments when you are satisified with the session's optimization but do not want to include the last generated experimental design use `FINAL_EXTRAS_ONLY`. Note that this will end the session's optimization and that no more designs will be generated. experiments :\u2002 dict : A \"table\" of experiments that includes columns, defined in the colHeaders value of the table, for each of the defined space parameters, and a column named 'Response' to record the result of experiments. Each row in the `data` value for the table represents an individual experiment. If the `experiments type` is `DESIGNED_WITH_OPTIONAL_EXTRAS`, you must sumbit at least as many rows as exist in the currently generated design, and the parameter values for these rows must match the design exactly. Additional \"extra\" experiment rows, that use any valid experimental parameter values, can also be provided. For the `INITIAL_EXTRAS_ONLY` and `FINAL_EXTRAS_ONLY` experiments types, rows that use any valid experimental parameter values can be provided.","title":"Parameters"},{"location":"daptics_client/#returns_29","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with putExperiments and/or errors keys. The putExperiments value will contain information on the update task that was started, as described in the return value for the poll_for_current_task method. If the task was successfully started, the task information is stored in the client's `task_info` attribute. If the experiments were successfully validated, the following actions may be automatically performed: If the `auto_export_path` option is set, a CSV file of the validated experiments is saved at `auto_genN_experiments.csv`. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `update` task completes successfully, the result of the `update` task can be accessed at `data['putExperiments']['result']`. If the `auto_generate_next_design` option is set, a `generate` task is started, and the `autoDesignTask` key of the `putExperiments` key will contain information on the `generate` task that was started. If the `auto_generate_next_design` AND `auto_task_timeout` options are set, the `generate` task will be polled until it completes, fails, or times out. If the `generate` task completes, the generated design can be accessed at `data['putExperiments']['autoDesignTask']['result']['experiments']`. See the documentation for the `poll_for_current_task` for more information.","title":"Returns"},{"location":"daptics_client/#examples_2","text":"Here's an expamle of an experiments table: >>> experiments = { 'colHeaders': ['param1', 'param2', 'param3', 'param4', 'Response'], 'data': [ ['0', '4', '1', '1', '3.25'], ['1', '4', '1', '1', '4.5'], ... etc, matching generated design rows ] }","title":"Examples"},{"location":"daptics_client/#method-put_experiments_csv","text":"def put_experiments_csv(self, experiments_type, fname) Validate the responses for designed experiments, and any extra experiments for the current generation in the session. This method, or the put_experiments_responses method, must be called before generating the next design, or finalizing the campaign.","title":"Method put_experiments_csv"},{"location":"daptics_client/#parameters_27","text":"experiments_type :\u2002 DapticsExperimentsType : Describes the types of experiments that are being added to the session. If you wish to submit calibrating or existing experimental responses prior to the first design generartion, use `INITIAL_EXTRAS_ONLY`. If you are submitting the responses for a daptics-generated design, along with any extra experiments, use `DESIGNED_WITH_OPTIONAL_EXTRAS`. If you wish to submit any final extra experiments when you are satisified with the session's optimization but do not want to include the last generated experimental design use `FINAL_EXTRAS_ONLY`. Note that this will end the session's optimization and that no more designs will be generated. fname :\u2002 str : The location on the filesystem for a CSV file that will define the results of the designed and any extra experiments. See the Examples section below for an example.","title":"Parameters"},{"location":"daptics_client/#returns_30","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with putExperiments and/or errors keys. The putExperiments value will contain information on the update task that was started, as described in the return value for the poll_for_current_task method. If the experiments were successfully validated, the following actions may be automatically performed: If the `auto_export_path` option is set, a CSV file of the validated experiments is saved at `auto_genN_experiments.csv`. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `update` task completes successfully, the result of the `update` task can be accessed at `data['putExperiments']['result']`. If the `auto_generate_next_design` option is set, a `generate` task is started, and the `autoDesignTask` key of the `putExperiments` key will contain information on the `generate` task that was started. If the `auto_generate_next_design` AND `auto_task_timeout` options are set, the `generate` task will be polled until it completes, fails, or times out. If the `generate` task completes, the generated design can be accessed at `data['putExperiments']['autoDesignTask']['result']['experiments']`. See the documentation for the `poll_for_current_task` for more information.","title":"Returns"},{"location":"daptics_client/#examples_3","text":"A header row must be provided, the columns in the header row must match the names of the parameters defined by the experimental space definition exactly, and a final column named Response must be filled with the results of each experiment row. param1,param2,param3,param4,Response 0,4,1,1,3.25 1,4,1,1,4.5 Each non-header row in the file represents an individual experiment. There must be at least as many experiment rows as the current design has, and the parameter values for these rows must match the design exactly. Additional \"extra\" experiment rows can also be provided.","title":"Examples"},{"location":"daptics_client/#method-random_experiment_for_space","text":"def random_experiment_for_space(self, space, max_response_value=None) Uses a random number generator to select parameter values and optionally to create a random response value.","title":"Method random_experiment_for_space"},{"location":"daptics_client/#parameters_28","text":"space :\u2002 dict : A Python dict that defines the experimental space. max_response_value :\u2002 float , optional : If not given, the experiment is generated with an empty response. If a number, the response value is a randomly generated number in the range [0.0, max_response_value].","title":"Parameters"},{"location":"daptics_client/#returns_31","text":"experiment :\u2002 list : The list of randomly generated parameter values for an experiment, and the optionally generated response value. Each value is encoded as a string. If max_response_value is not given, the response value will be the empty string.","title":"Returns"},{"location":"daptics_client/#method-random_experiments_with_responses","text":"def random_experiments_with_responses(self, space, design, num_extras=0, max_response_value=5.0) Generate an experiments table with where each experiment row contains a randomly generated response value. The experiment rows are optionally composed of \"designed\" rows and \"extra\" rows. The \"designed\" rows have one experiment row for each row in the currently generated design. And the \"extra\" rows contain randomly generated parameter values as well as responses.","title":"Method random_experiments_with_responses"},{"location":"daptics_client/#parameters_29","text":"space :\u2002 dict : A Python dict that defines the experimental space. design :\u2002 dict or None : If supplied, a Python dict that defines the currently generated design as a table. The dict has colHeaders and data keys. num_extras :\u2002 int , optional : If non-zero, generate this number of extra rows. The extra rows will be appended to any designed rows. max_response_value :\u2002 float : The maximum value for generated responses. Each genreated response value is a randomly generated number in the range [0.0, max_response_value].","title":"Parameters"},{"location":"daptics_client/#returns_32","text":"response :\u2002 dict : A Python dict with colHeaders and data values, representing an experiments table.","title":"Returns"},{"location":"daptics_client/#method-random_parameter_value","text":"def random_parameter_value(self, space_type, param) Uses a random number generator to select a parameter value that is valid for the space type and specified parameter definition.","title":"Method random_parameter_value"},{"location":"daptics_client/#parameters_30","text":"space_type :\u2002 str : The space type, either \"mixture\" or \"factorial\". param :\u2002 list : The row from the experimental space definition table that defines a particular parameter in the space (name, type, and min / max or allowed values for the parameter). Each element in the list is encoded as a string.","title":"Parameters"},{"location":"daptics_client/#returns_33","text":"param_value :\u2002 str : A valid value for the parameter, encoded as a string.","title":"Returns"},{"location":"daptics_client/#method-reconnect_session","text":"def reconnect_session(self, session_id) Find an existing session.","title":"Method reconnect_session"},{"location":"daptics_client/#parameters_31","text":"session_id :\u2002 str : The session id to find.","title":"Parameters"},{"location":"daptics_client/#returns_34","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with session and/or errors keys.","title":"Returns"},{"location":"daptics_client/#method-save","text":"def save(self, fname) Save the user and session id to a JSON file.","title":"Method save"},{"location":"daptics_client/#parameters_32","text":"fname :\u2002 str : The file path to save the client state to.","title":"Parameters"},{"location":"daptics_client/#returns_35","text":"Nothing :","title":"Returns"},{"location":"daptics_client/#method-simulate_experiment_responses","text":"def simulate_experiment_responses(self, experiments=None) Generate values for the \"Response\" column. The values are a substitute for actual experimental results, computed with a synthetic data generator that takes as an input each experiment (i.e. each row of the experiments argument) and gives as output a single number, added as a 'Response'. The data generator samples a complex surface, constructed to have several peaks that are randomly placed in the space. There is a global optimum (highest peak), but optimization runs often will find one of the lower peaks.","title":"Method simulate_experiment_responses"},{"location":"daptics_client/#parameters_33","text":"experiments :\u2002 dict : A \"table\" of experiments that includes columns, defined in the colHeaders value of the table, for each of the defined space parameters, and a column named 'Response' to record the result of experiments. Each row in the `data` value for the table represents an individual experiment.","title":"Parameters"},{"location":"daptics_client/#returns_36","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with simulateExperiments and/or errors keys.","title":"Returns"},{"location":"daptics_client/#method-simulate_experiment_responses_csv","text":"def simulate_experiment_responses_csv(self, fname) Generate values for the \"Response\" column. The values are a substitute for actual experimental results, computed with a synthetic data generator that takes as an input each experiment (i.e. each row of the experiments argument) and gives as output a single number, added as a 'Response'. The data generator samples a complex surface, constructed to have several peaks that are randomly placed in the space. There is a global optimum (highest peak), but optimization runs often will find one of the lower peaks.","title":"Method simulate_experiment_responses_csv"},{"location":"daptics_client/#parameters_34","text":"fname :\u2002 str : The location on the filesystem for a CSV file that will define the parameters for designed and any extra experiments.","title":"Parameters"},{"location":"daptics_client/#returns_37","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with simulateExperiments and/or errors keys.","title":"Returns"},{"location":"daptics_client/#method-space_table_column_names","text":"def space_table_column_names(self, space) Generates the canonically formatted column header names for the experimental space table.","title":"Method space_table_column_names"},{"location":"daptics_client/#parameters_35","text":"space :\u2002 dict : A Python dict that defines the experimental space.","title":"Parameters"},{"location":"daptics_client/#returns_38","text":"column_headers :\u2002 list : A list of strings to build the column header for an experimental space. The list will contain \"Name\", \"Type\", \"Min\" and \"Max\" for a \"mixture\" space, or \"Name\", \"Type\", \"Value.1\", \"Value.2\", etc. for a \"factorial\" space.","title":"Returns"},{"location":"daptics_client/#method-space_table_value_column_name","text":"def space_table_value_column_name(self, space_type, i) Utility method to format a header column name for in an experimental space table.","title":"Method space_table_value_column_name"},{"location":"daptics_client/#parameters_36","text":"space_type :\u2002 str : \"mixture\" or \"factorial\" i :\u2002 int : Index of the value column (starting at zero).","title":"Parameters"},{"location":"daptics_client/#returns_39","text":"column_name :\u2002 str : \"Min\" or \"Max\" for a \"mixture\" space type, or \"Value.1\", \"Value.2\", etc. for a \"factorial\" space type.","title":"Returns"},{"location":"daptics_client/#method-start_simulation","text":"def start_simulation(self, ngens, params) Start a simulation task for several design generations, specifying the desired experimental parameters and the number of generations to run.","title":"Method start_simulation"},{"location":"daptics_client/#parameters_37","text":"ngens :\u2002 int : The number of generations to attempt to design. Must be greater than zero. If the experimental space is exhausted the actual number of generations designed may be less than this number. params :\u2002 dict : A dictionary containing the experimental parameters to be used for the session. See the Notes section that describes the required keys for the params dict.","title":"Parameters"},{"location":"daptics_client/#returns_40","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with runSimulation and/or errors keys. The runSimulation value will contain information on the simulate task that was started, as described in the return value for the poll_for_current_task method. If the `auto_export_path` option is set, a CSV file of each generation of simulated experiments is saved at `auto_genN_experiments.csv`. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `simulate` task completes successfully, the result of the `update` task can be accessed at `data['runSimulation']['result']`.","title":"Returns"},{"location":"daptics_client/#notes_4","text":"For more examples of how to submit space parameters, please see the documentation for the put_experimental_parameters method. Keys for the params dict are: populationSize :\u2002 int : The number of experiments per replicate. A positive integer. replicates :\u2002 int : The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space :\u2002 dict : The experimental space definition. Keys for the space dict are: type :\u2002 str : The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits :\u2002 int : For mixture type spaces, this is the mixture constraint parameter, a non-negative integer. table :\u2002 dict : The (optional) column headers and rows of parameter data. See an example below. the colHeaders value is ignored when importing or validating the experimental space definition.","title":"Notes"},{"location":"daptics_client/#method-start_simulation_csv","text":"def start_simulation_csv(self, ngens, fname, params) Run a simulation for several design generations, specifying the desired experimental parameters and the number of generations to run. The experimental space is read from a CSV file. If the space parameters are successfully validated a \"simulate\" task is started.","title":"Method start_simulation_csv"},{"location":"daptics_client/#parameters_38","text":"ngens :\u2002 int : The number of generations to attempt to design. Must be greater than zero. If the experimental space is exhausted the actual number of generations designed may be less than this number. fname :\u2002 str : The location on the filesystem for a CSV file that will define the experimental space definition. See the Examples section below for an example. params :\u2002 dict : A dictionary containing the experimental parameters to be used for the session. See the Notes section that describes the required keys for the params dict.","title":"Parameters"},{"location":"daptics_client/#returns_41","text":"response :\u2002 dict : The JSON response from the gql request, a Python dict with runSimulation and/or errors keys. The runSimulation value will contain information on the simulate task that was started, as described in the return value for the poll_for_current_task method. If the `auto_export_path` option is set, a CSV file of each generation of simulated experiments is saved at `auto_genN_experiments.csv`. If the `auto_task_timeout` option was set to a positive or negative number, the task will be retried until a result is obtained or the task failed, or the timeout is exceeded. If the `simulate` task completes successfully, the result of the `update` task can be accessed at `data['runSimulation']['result']`.","title":"Returns"},{"location":"daptics_client/#raises_3","text":"csv.Error : If the specified CSV file is incorrectly formatted.","title":"Raises"},{"location":"daptics_client/#notes_5","text":"For more examples of how to submit space parameters, please see the documentation for the put_experimental_parameters method. Keys for the params dict are: populationSize :\u2002 int : The number of experiments per replicate. A positive integer. replicates :\u2002 int : The number of replicates. A non-negative integer. The total number of experiments per design generation is populationSize * (replicates + 1) . space :\u2002 dict : The experimental space definition. Keys for the space dict are: type :\u2002 str : The type of the space, a string, either \"factorial\" or \"mixture\". totalUnits :\u2002 int : For mixture type spaces, this is the mixture constraint parameter, a non-negative integer.","title":"Notes"},{"location":"daptics_client/#method-wait_for_current_task","text":"def wait_for_current_task(self, task_type=None, timeout=None) Wraps poll_for_current_task in a loop. Repeat until task disappears, when status is success or failure .","title":"Method wait_for_current_task"},{"location":"daptics_client/#parameters_39","text":"task_type :\u2002 DapticsTaskType , optional : SPACE , UPDATE , GENERATE , SIMULATE , ANALYTICS , or None. If None is supplied (the default), find the most recently started task of any type. timeout :\u2002 float , optional : Maximum number of seconds to wait. If None or a negative number, wait forever.","title":"Parameters"},{"location":"daptics_client/#returns_42","text":"response :\u2002( dict , dict ) : A tuple containing two dicts : The first element is the data component of the GraphQL response, a Python dict with currentTask , and the second element is the errors component of the GraphQL response. Either data or errors may be None. See the documentation on the poll_for_current_task method for more information about the data returned for different types of tasks , and for how task completion : affects attributes of the DapticsClient instance.","title":"Returns"},{"location":"daptics_client/#class-dapticsexperimentstype","text":"class DapticsExperimentsType(*args, **kwargs) Enumerates the purpose for the experiments that are being uploaded to the session via the put_experiments or put_experiments_csv method.","title":"Class DapticsExperimentsType"},{"location":"daptics_client/#class-variables_1","text":"","title":"Class variables"},{"location":"daptics_client/#variable-designed_with_optional_extras","text":"Indicates that the experiments being submitted contain designed experiments, with optional extra experiments.","title":"Variable DESIGNED_WITH_OPTIONAL_EXTRAS"},{"location":"daptics_client/#variable-final_extras_only","text":"Indicates that the experiments being submitted are final experiments.","title":"Variable FINAL_EXTRAS_ONLY"},{"location":"daptics_client/#variable-initial_extras_only","text":"Indicates that the experiments being submitted are initial experiments.","title":"Variable INITIAL_EXTRAS_ONLY"},{"location":"daptics_client/#class-dapticstasktype","text":"class DapticsTaskType(*args, **kwargs) Enumerates the different asynchronous tasks that the daptics system can create and that can be searched for using the poll_for_current_task or wait_for_current_task methods.","title":"Class DapticsTaskType"},{"location":"daptics_client/#class-variables_2","text":"","title":"Class variables"},{"location":"daptics_client/#variable-analytics","text":"A task that generates analytics files at the current generation.","title":"Variable ANALYTICS"},{"location":"daptics_client/#variable-generate","text":"A task that generates the next generation of experiments.","title":"Variable GENERATE"},{"location":"daptics_client/#variable-simulate","text":"A task that simulates a given number of experimental generations.","title":"Variable SIMULATE"},{"location":"daptics_client/#variable-space","text":"A task that validates and saves experimental space parameters.","title":"Variable SPACE"},{"location":"daptics_client/#variable-update","text":"A task that validates and incorporates initial, designed, or final experiments.","title":"Variable UPDATE"},{"location":"daptics_client/#class-invalidconfigerror","text":"class InvalidConfigError(path) An error raised if the option configuration file cannot be parsed.","title":"Class InvalidConfigError"},{"location":"daptics_client/#class-invalidexperimentstypeerror","text":"class InvalidExperimentsTypeError(experiments_type) An error raised if the type of experiments is not a valid type.","title":"Class InvalidExperimentsTypeError"},{"location":"daptics_client/#class-invalidspaceparametererror","text":"class InvalidSpaceParameterError(space_type, param) An error raised if the specified experimental space parameters are missing or invalid.","title":"Class InvalidSpaceParameterError"},{"location":"daptics_client/#class-invalidtasktypeerror","text":"class InvalidTaskTypeError(task_type) An error raised if the task type specified was not a valid type.","title":"Class InvalidTaskTypeError"},{"location":"daptics_client/#class-missingconfigerror","text":"class MissingConfigError(path) An error raised if the option configuration file cannot be found.","title":"Class MissingConfigError"},{"location":"daptics_client/#class-nextgenerationerror","text":"class NextGenerationError(gen) An error raised if the generation number specified is not the next generation number for the session.","title":"Class NextGenerationError"},{"location":"daptics_client/#class-nocredentialserror","text":"class NoCredentialsError() An error raised if no login credentials were specified.","title":"Class NoCredentialsError"},{"location":"daptics_client/#class-nocurrenttaskerror","text":"class NoCurrentTaskError() An error raised if no current task could be found, when one was expected.","title":"Class NoCurrentTaskError"},{"location":"daptics_client/#class-nohosterror","text":"class NoHostError() An error raised if no host value was specified.","title":"Class NoHostError"},{"location":"daptics_client/#class-sessionparametersnotvalidatederror","text":"class SessionParametersNotValidatedError() An error raised if the method cannot be completed, because the experimental space parameters for the session have not been saved and validated yet.","title":"Class SessionParametersNotValidatedError"},{"location":"daptics_client/#class-spaceordesignrequirederror","text":"class SpaceOrDesignRequiredError() An error raised if neither an experimental space nor an experimental design was submitted for generating random experiments.","title":"Class SpaceOrDesignRequiredError"},{"location":"daptics_client/#class-taskfailederror","text":"class TaskFailedError(type_) An error raised if a completed task did not return a valid result.","title":"Class TaskFailedError"},{"location":"daptics_client/#class-tasktimeouterror","text":"class TaskTimeoutError() An error raised if a task was not completed within the specified timeout.","title":"Class TaskTimeoutError"},{"location":"daptics_client/#class-tokenauth","text":"class TokenAuth() A callable authentication object for the Python requests moudule. If acess token is set, add a \"Bearer\" authorization header to the HTTP request. Generated by pdoc 0.7.2 ( https://pdoc3.github.io ).","title":"Class TokenAuth"},{"location":"graphql_api/","text":"Schema Types Table of Contents * [Query](#query) * [Mutation](#mutation) * [Objects](#objects) * [Analytics](#analytics) * [AnalyticsFileInfo](#analyticsfileinfo) * [ApiParameters](#apiparameters) * [AuthenticationToken](#authenticationtoken) * [CampaignInfo](#campaigninfo) * [CategorizedError](#categorizederror) * [DataFrame](#dataframe) * [ExperimentalSpace](#experimentalspace) * [ExperimentalSpaceTemplate](#experimentalspacetemplate) * [Experiments](#experiments) * [GenerateTaskResult](#generatetaskresult) * [HaltSessionResult](#haltsessionresult) * [Loadavg](#loadavg) * [PasswordChanged](#passwordchanged) * [Server](#server) * [Session](#session) * [SessionAuth](#sessionauth) * [SessionParameters](#sessionparameters) * [SessionSummary](#sessionsummary) * [SimulateTaskResult](#simulatetaskresult) * [SpaceTaskResult](#spacetaskresult) * [Task](#task) * [TaskProgress](#taskprogress) * [TaskSummary](#tasksummary) * [TokenSent](#tokensent) * [Transaction](#transaction) * [UpdateTaskResult](#updatetaskresult) * [User](#user) * [UserCreated](#usercreated) * [UserProfile](#userprofile) * [UserSummary](#usersummary) * [Inputs](#inputs) * [AdditionalParameterInput](#additionalparameterinput) * [ChangePasswordInput](#changepasswordinput) * [DataFrameInput](#dataframeinput) * [ExperimentsInput](#experimentsinput) * [NewSessionInput](#newsessioninput) * [NewUserInput](#newuserinput) * [SessionParametersInput](#sessionparametersinput) * [SpaceInput](#spaceinput) * [TaskInput](#taskinput) * [UserProfileInput](#userprofileinput) * [Scalars](#scalars) * [Boolean](#boolean) * [DateTime](#datetime) * [Float](#float) * [Int](#int) * [String](#string) Query (RootQueryType) Field Argument Type Description currentTask Task Get the progress (if not completed) or the result (if completed) of the last un-archived task in the session. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. taskId String If provided, only returns information if the task's id matches. type String If provided, only returns information if the task's type ('space', 'generate', 'update', or 'simulate') matches. experiments Experiments Get the designed or completed experiments for the current or a previous generation. For non-admin users, returns information only if the session is owned by the user. designOnly Boolean ! If this argument is true , return only the designed experiments, not any extra experiments, and without responses. gen Int (optional) The generation number to fetch. Use zero to get any initial experiments. Return the latest designed generation (without responses) if omitted. sessionId String ! The session's id. experimentsHistory [ Experiments ] Get the experiments and responses for all generations. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. server Server Get the server by id. Admin-level users only. serverId String ! The server's id (unique name, like 'localhost'). servers [ Server ] Search all servers. Admin-level users only. q String A string to filter search on. If provided, will limit the response to matches on a server's name or url. status String Status to filter search on ('up' or 'down'). If provided, will limit the response to matches on a server's current runtime status. session Session Get PDT session information. For admin-level user, get the session by id. For non-admin user, get the session only if it is owned by the user. sessionId String ! The session's id. sessionParameters SessionParameters Get the experimental space and project parameters for a given session. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. sessions [ SessionSummary ] Search sessions. For Admin-level users, returns search over all sessions. q String A string to filter search on. If provided, will limit the response to matches on session's id, tag, name or description. userId String If provided, list only the sessions for this user. tasks [ Task ] Get list of all, or just un-archived tasks in the session. For non-admin users, returns information only if the session is owned by the user. includeArchivedTasks Boolean ! If false, limits the response to tasks that have not completed. sessionId String ! The session's id. transaction Transaction Get the transaction by id. Admin-level users only. txnId String ! The transaction's id. transactions [ Transaction ] Search transactions. For Admin-level users, returns search over all transactions. q String A string to filter search on. If provided, will limit the response to matches on the transaction's memo. sessionId String If provided, list only the transactions for this session. txnKind String If provided, list only the transactions matching this kind. txnStatus String If provided, list only the transactions matching this status. txnType String If provided, list only the transactions matching this type. userId String If provided, list only the transactions for this user. user User For admin-level user, get a user by id. For non-admin user, return the currently logged-in user if the user_id matches. userId String ! The user's id (a generated base-36 hash). users [ UserSummary ] For admin-level user, search all users. For non-admin user, returns a list containing just the currently logged-in user. q String A string to filter search on. If provided, will limit the response to matches on a user's first name, last name or email address. Mutation (RootMutationType) Field Argument Type Description changePassword PasswordChanged Change a user's password, authenticating via header or password change token. input ChangePasswordInput ! The data used to authenticate and set the new password. userId String The user's id, required if not authenticating via token. createAnalytics Analytics Generate a list of analytics files for all generations in the session. sessionId String ! The session's id. createSession Session Create and start a new PDT session on a server, installing and initializing required application and user data files on the server. session NewSessionInput ! The target server, the session's name and description, and whether this is a demo or regular session. createUser UserCreated Create an unverified user account. The account's email address must be verified before it is activated. createToken Boolean If true, an email message with a verification link will be mailed to the user. promotionCode String If present, the promotion code that will be applied to the new user. user NewUserInput ! The first name, last name, email address and password for the new user. generateDesign Task Start a 'generate' task using initial, extra and/or generated experiment responses. gen Int ! The generation number of the previously validated experiments and responses. sessionId String ! The session's id. haltSession HaltSessionResult Disconnect from a previously created PDT session. sessionId String ! The sesssion's id as returned by the createSession mutation. login AuthenticationToken Log in a user by email and password. Use the returned token to authenticate other requests. Use the returned user_id to create new sessions. email String ! The user's email address. password String ! The user's password (in cleartext). logout AuthenticationToken Log out a user, by revoking the access token. Returns information about the revoked token. token String ! The access token to revoke. putExperimentalParameters Task Validate and start a 'space' task to save a session's experimental space parameters (space type, population size, replicates, total volume and experimental parameter definitions). params SessionParametersInput ! The experimental space parameters to use for the session. sessionId String ! The session's id. putExperiments Experiments Validate initial, extra and/or generated experiment responses. experiments ExperimentsInput ! The experiments and responses to validate and save. sessionId String ! The session's id. restartSession Session Restart a previously created PDT session, re-initializing application and user data files. sessionId String ! The sesssion's id as returned by the createSession mutation. runSimulation Task Validate and start a 'simulate' task to process several design generations. ngens Int ! The number of design generations to attempt. params SessionParametersInput ! The experimental space parameters to use for the session. sessionId String ! The session's id. sendToken TokenSent Create and send a new verification or password reset token to a user. email String ! The user's email address. tokenType String ! The type of token requested ( verify or reset ). simulateResponses Experiments Generate simulated experiment responses for the current generation. experiments DataFrameInput (Optional) The experiments for which responses will be generated, including initial or extra experiments. sessionId String ! The session's id. updateTask Task Update, cancel or archive a task. For advanced users only! sessionId String ! The session's id. task TaskInput ! The task id and disposition. updateUserProfile UserProfile Update the user's profile. profile UserProfileInput ! The first name, last name, email address and other information about the user. userId String ! The user's id. verifyUser UserProfile Verify and activate an inactive user account. If successful (token matches and has not expired and user account is inactive), return the user account profile. Normally, verification tokens are sent to a non-API endpoint, but this mutation can also be used. token String ! The verification token that was emailed to the user. Objects Analytics Information about the analytics files available for the specified generation in a session. Field Argument Type Description files [ AnalyticsFileInfo ] The list of available file titles and locations. gen Int ! The last completed generation number. sessionId String ! The session's id. AnalyticsFileInfo Information about a single analytics file (PDF). Field Argument Type Description filename String ! The file's name, like 'RespSortBarplotSequence.pdf'. title String ! The file's title, like 'Response Barplot Time Series'. url String ! The file's url, like 'http://localhost:4041/session/sess_id/analytics/gen/1/RespSortBarplotSequence.pdf'. ApiParameters Parameters that a session must use to access other resources. Field Argument Type Description apiBaseUri String ! The URL for the session user to use to access the API. apiKey String ! The 'API key' for the session user to use to authenticate to the API. loginUri String ! The URL for the session user to use to log in. AuthenticationToken A user access (a JWT encoded and signed) token, used to authenticate to the API. Field Argument Type Description claims String ! All the claims stored in the token. createdAt DateTime ! The date and time that the token was created. expiresAt DateTime ! The date and time that the token will expire. status String ! The status of the the token ('active' or 'revoked'). token String ! The token. Use this as the 'Bearer' value for the HTTP authorization header. type String ! The type of token ('access'). user UserProfile The user account associated with this token. CampaignInfo Information on current and remaining generations. Field Argument Type Description completed Boolean ! True if the campaign has completed (no additional experiments can be generated). gen Int ! The generation number for the last-designed generation. -1 means experimental space parameters have not been validated. remaining Int The number of remaining generations in the session, if available. CategorizedError An error encountered while processing a query or mutation. Field Argument Type Description category String The type of error. fatalError Boolean True if the error is fatal. message String ! A description of the error. systemError Boolean True if the error is an internal system error. DataFrame A representation of a data table (similar to a CSV file). Numerical data is converted to strings, and NULL data is converted to empty strings. Field Argument Type Description colHeaders [ String ]! The header row for the table. data [[ String ]!]! A list of rows containing data. Each row in turn is a list of strings. index [ String ] If returned, the row names for table. ExperimentalSpace The definition for a session's experimental space. Field Argument Type Description spaceSize Int The number of possible or explorable parameter combinations. table DataFrame ! The table of experimental parameters. totalUnits Int For mixture spaces, the total number of volume units. type String ! The space's type ('factorial' or 'mixture'). ExperimentalSpaceTemplate A system-defined template for an experimental space. Field Argument Type Description name String ! The type of template, ('factorial-default', 'mixture-default', 'factorial-demo-default', or 'mixture-demo-default'). template ExperimentalSpace ! The experimental space parameters for this template. Experiments Information about initial or subsequent experiments in a session. Field Argument Type Description designRows Int The number of experiments generated by the system. gen Int ! The generation number for the experiments. hasResponses Boolean True if the experiment data in the associated table contains responses. table DataFrame The experiment inputs (and possible responses) for the experiments. validated Boolean True if the experiment data for this generation has been validated. GenerateTaskResult Result of a validate experiments task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experiments. experiments Experiments Designed experiments for current generation. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('generate'). HaltSessionResult Information about a session that was disconnected. Field Argument Type Description action String ! The action taken to halt the session. sessionId String ! The session's id. status String ! The current connection status of the session. Loadavg Process loadavg statistics for a linux server. Field Argument Type Description load1 Float 1 minute loadavg. load15 Float 15 minute loadavg. load5 Float 5 minute loadavg. PasswordChanged Confirming information for a password change. Field Argument Type Description updatedAt DateTime ! The time that the password was updated. Server Information about a PDT server. Field Argument Type Description bindir String ! The server's filesystem path to basic executable scripts (deprecated). cores Int The number of cores reported for the server. cost Float The last calulated cost metric for the server. host String ! The server's fully qualified hostname. loadavg Loadavg The last reported loadavg statistics for the server. procs Int The last reported number of processes running on the server. serverId String ! The server's id (a unique nickname or unqualified hostname). sshHost String ! The server's SSH hostname (deprecated). status String ! The server's current runtime status ('up' or 'down'). updatedAt DateTime ! The date and time that the data for the server was last updated. url String ! The server's root URL. Session Complete information about a session. Field Argument Type Description active Boolean ! True if this is an active (non-archived) session. api ApiParameters ! API location and key information. auth SessionAuth Authorization information, if available. campaign CampaignInfo ! Generation information. demo Boolean ! True if this was created as a demo session. description String ! The session's description. didCrash Boolean ! True if this session crashed. didRestart Boolean ! True if this session was restarted. experiments Experiments Designed experiments for current generation. host String ! The id for the server associated with the session. latestCompletedExperiments Experiments Completed experiments from the previous generation. name String ! The session's name (unique for the associated user). params SessionParameters ! Current unvalidated or validated experimental space parameters. path String ! The filesytem path on the server associated with the session that contains the session's system and user data files. platformMode String ! Settings for the runtime platform (`development`, `test` or `production`). restartedAt DateTime The date and time that this session was last restarted. sessionId String ! The session's id. spaceTemplates [ ExperimentalSpaceTemplate !]! Experimental space parameter templates that can be used as examples. startedAt DateTime True if the campaign has completed (no additional experiments can be generated). tag String ! The session's (unique) tag. tasks [ TaskSummary ] Non-archived tasks, active or completed, in this session. user UserProfile The user profile associated with the session. version String The build version for the session, if available. SessionAuth Information about the access token for the session. Field Argument Type Description expirationTime Int (TBD) message String (TBD) status String ! The status of the the token ('active' or 'revoked'). token String ! The token. SessionParameters Information about the experimental space parameters for a PDT session. Field Argument Type Description designCost Int If the experimental space has been validated, the cost in PDT credits for each design generation. populationSize Int ! The experimental space's population size. replicates Int ! The number of replicates for the experimental space. space ExperimentalSpace ! The experimental space type and parameters. validated Boolean ! True if the session parameters (including the space) were validated. SessionSummary Summary information about a session. Field Argument Type Description active Boolean ! True if this is an active (non-archived) session. campaign CampaignInfo Generation information, if available. demo Boolean ! True if this was created as a demo session. description String ! The session's description. host String ! The id for the server associated with the session. name String ! The session's name (unique for the associated user). params SessionParameters Current unvalidated or validated experimental space parameters, if available. path String ! The filesytem path on the server associated with the session that contains the session's system and user data files. sessionId String ! The session's id. tag String ! The session's (unique) tag. user UserProfile The user profile associated with the session. version String The build version for the session, if available. SimulateTaskResult Result of a simulate experiments task. Field Argument Type Description campaign CampaignInfo ! Information on the last generation. errors [ CategorizedError ] Errors encountered when validating the experimental space. experimentsHistory [ Experiments ] Experiments and responses for all generations. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('simulate'). SpaceTaskResult Result of a validate experimental space parameters task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experimental space. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('space'). Task Information on a long-running task in a daptics session. Field Argument Type Description archived Boolean ! True if the task is no longer active and has been flagged as archived. description String The task's description. errors [ CategorizedError ] Errors returned by a failed or canceled task. progress TaskProgress Progress message reported by a currently executing task. result TaskResult The validated session parameters or generated experimental design result returned by a completed task. sessionId String ! The session's id. startedAt DateTime The date and time the task was started. status String ! The task's status ('new', 'running', 'success', 'error', or 'canceled'). taskId String ! The task's id. type String ! The task's type ('space', 'generate', 'update', or 'simulate'). TaskProgress Progress information about a currently executing task. Field Argument Type Description message String ! A description of the last activity returned by the task. percent Int (TBD) phase String (TBD) TaskSummary Summary information on a long-running task in a daptics session. Field Argument Type Description description String The task's description. sessionId String ! The session's id. startedAt DateTime The date and time the task was started. status String ! The task's status ('new', 'running', 'success', 'error', or 'canceled'). taskId String ! The task's id. type String ! The task's type ('space', 'generate', 'update', or 'simulate'). TokenSent Confirming information returned when a verification code was sent to an unverified user. Field Argument Type Description sentAt DateTime ! The time when the code was delivered. sentTo [ String !]! The email address(es) the code was delivered to. tokenType String ! The type of token sent to the user. Transaction Information about a single pending, posted, or canceled financial transaction. Field Argument Type Description amountInCents Int ! The amount of the transaction (debit as negative, credit as positive), in cents. amountInPdt Int ! The amount of the transaction (debit as negative, credit as positive), in PDT credits. createdAt DateTime ! The date and time that the transaction was created. gatewayTransactionId String The payment processor's transaction id, if any. memo String ! A description of the transacation. promotionCode String The promotion code, if any. refTxnId String The transaction id of the original transaction if this is transaction is a refund. remainingBalanceInCents Int The user account's remaining available balance, in cents, after this transaction. remainingBalanceInPdt Int The user account's remaining available balance, in PDT credits, after this transaction. sessionId String The id of the associated session, if any. taskId String The id of the ('generate') task associated with the transaction, if any. txnAuthor String ! The user id of the user who created the transaction. txnId String ! The transaction's id (a generated hash). txnKind String ! The kind of the transaction. (`pdt_charge`, `sale`, `refund`, `sign_up`, `coupon`, or `bonus`). txnStatus String ! The status of the transaction (`authorized`, `posted`, or `canceled`). txnType String ! The type of the transaction. (`session`, `braintree`, `promotion` or `admin`). updatedAt DateTime ! The date and time that the transaction was last updated. user UserProfile ! Profile and activity information for the associated user's account. UpdateTaskResult Result of a save experiments task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experiments. experiments Experiments Validated experiments saved in current generation. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('update'). User Full information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). currentBalanceInCents Int ! The currently available balance for the user's account, in cemts. currentBalanceInPdt Int ! The currently available balance for the user's account, in PDT credits. email String ! The user's email address. firstName String ! The user's first name. lastLoginAt DateTime The date and time that the user account last logged into a PDT session. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. sessions [ SessionSummary ]! The sessions owned by the user. state String The user's state or province code (3 characters maximum). status String ! The user's account status ('unverified', 'active', or 'disabled'). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). updatedAt DateTime ! The date and time that data in the user's account was last updated. userId String ! The user's id. userLevel String ! The user's permission level. zip String The user's postal code. UserCreated Confirming information returned when a user account was successfully created. Field Argument Type Description email String The new user's email address. firstName String The new user's first name. lastName String The new user's last name. promotionCode String The promotion code applied to the new user account. regDate DateTime ! The date and time that the new user's account was created. UserProfile Profile information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). email String ! The user's email address. firstName String ! The user's first name. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. state String The user's state or province code (3 characters maximum). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). userId String ! The user's id. zip String The user's postal code. UserSummary Profile and activity information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). currentBalanceInCents Int ! The currently available balance for the user's account, in cemts. currentBalanceInPdt Int ! The currently available balance for the user's account, in PDT credits. email String ! The user's email address. firstName String ! The user's first name. lastLoginAt DateTime The date and time that the user account last logged into a PDT session. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. state String The user's state or province code (3 characters maximum). status String ! The user's account status ('unverified', 'active', or 'disabled'). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). updatedAt DateTime ! The date and time that data in the user's account was last updated. userId String ! The user's id. userLevel String ! The user's permission level. zip String The user's postal code. Inputs AdditionalParameterInput An advanced experimental space parameter. Field Type Description jsonValue String ! The parameter's value, encoded as a JSON string. name String ! The parameter name. ChangePasswordInput Input fields for changing the password on a user account. Field Type Description email String The user's email address, required if changing via token authentication. password String ! The cleartext password for the user account. passwordConfirmation String ! The cleartext password, again, for the user account. token String The password change token, required if changing via token authentication. DataFrameInput Table data for experimental parameters or experimental responses (similar to a CSV file). Field Type Description colHeaders [ String !]! Column headers for the table. data [[ String ]!]! Data rows for the table. Each row is a list of strings. Numerical data must be expressed as a string, and a NULL value must be expressed as an empty string. index [ String !] Row names for the table (ignored). ExperimentsInput Input fields for submitting experimental responses to be validated to then to create the next design gneration. Field Type Description gen Int ! The current generation number. Use zero to submit initial experiments or just to proceed to the first design generation without any initial experiments. table DataFrameInput The experiments and their responses. Required if gen is greater than zero. type String ! The type of experiments being submitted, 'initial', 'designed', or 'final'. NewSessionInput Input fields for create a new PDT session. Field Type Description demo Boolean ! True if this is a demo session. description String ! A description for the session. location String If provided, the id of the server on which the session will be created. name String ! The name of the session (unique for the user). userId String ! The id for the associated user account. NewUserInput Input fields for creating a new user account. Field Type Description email String ! The user's email address. firstName String ! The user's first name. lastName String ! The user's last name. password String ! The cleartext password for the user account. passwordConfirmation String ! The cleartext password, again, for the user account. SessionParametersInput Input fields for validating a session's experimental space parameters. Field Type Description additionalParams [ AdditionalParameterInput ] Additional advanced parameters for modeling and sampling. populationSize Int ! The population size. replicates Int ! The number of replicates (zero or greater). space SpaceInput ! The space type and definition of experimental parameters. willResetCampaign Boolean True to discard all experiments and reset any existing validated experimental space parameters. SpaceInput Input fields for validating an experimental space. Field Type Description table DataFrameInput ! The experimental parameters, in a table. totalUnits Int If a mixture space, the total number of volume units. type String ! The space type, 'factorial' or 'mixture'. TaskInput Input fields for updating or archiving a task. Field Type Description archived Boolean To archive this task, set the `archived` field to true. status String To cancel this task, set the `status` field to 'canceled'. taskId String ! The task's id. UserProfileInput Profile information for a user account. Field Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). email String The user's email address. firstName String The user's first name. lastName String The user's last name. phone String The user's telephone number. state String The user's state or province code (3 characters maximum). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). zip String The user's postal code. Scalars Boolean The Boolean scalar type represents true or false . DateTime The DateTime scalar type represents a date and time in the UTC timezone. The DateTime appears in a JSON response as an ISO8601 formatted string, including UTC timezone (\"Z\"). The parsed date and time string will be converted to UTC and any UTC offset other than 0 will be rejected. Float The Float scalar type represents signed double-precision fractional values as specified by IEEE 754 . Int The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^53 - 1) and 2^53 - 1 since it is represented in JSON as double-precision floating point numbers specified by IEEE 754 . String The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","title":"GraphQL API"},{"location":"graphql_api/#schema-types","text":"Table of Contents * [Query](#query) * [Mutation](#mutation) * [Objects](#objects) * [Analytics](#analytics) * [AnalyticsFileInfo](#analyticsfileinfo) * [ApiParameters](#apiparameters) * [AuthenticationToken](#authenticationtoken) * [CampaignInfo](#campaigninfo) * [CategorizedError](#categorizederror) * [DataFrame](#dataframe) * [ExperimentalSpace](#experimentalspace) * [ExperimentalSpaceTemplate](#experimentalspacetemplate) * [Experiments](#experiments) * [GenerateTaskResult](#generatetaskresult) * [HaltSessionResult](#haltsessionresult) * [Loadavg](#loadavg) * [PasswordChanged](#passwordchanged) * [Server](#server) * [Session](#session) * [SessionAuth](#sessionauth) * [SessionParameters](#sessionparameters) * [SessionSummary](#sessionsummary) * [SimulateTaskResult](#simulatetaskresult) * [SpaceTaskResult](#spacetaskresult) * [Task](#task) * [TaskProgress](#taskprogress) * [TaskSummary](#tasksummary) * [TokenSent](#tokensent) * [Transaction](#transaction) * [UpdateTaskResult](#updatetaskresult) * [User](#user) * [UserCreated](#usercreated) * [UserProfile](#userprofile) * [UserSummary](#usersummary) * [Inputs](#inputs) * [AdditionalParameterInput](#additionalparameterinput) * [ChangePasswordInput](#changepasswordinput) * [DataFrameInput](#dataframeinput) * [ExperimentsInput](#experimentsinput) * [NewSessionInput](#newsessioninput) * [NewUserInput](#newuserinput) * [SessionParametersInput](#sessionparametersinput) * [SpaceInput](#spaceinput) * [TaskInput](#taskinput) * [UserProfileInput](#userprofileinput) * [Scalars](#scalars) * [Boolean](#boolean) * [DateTime](#datetime) * [Float](#float) * [Int](#int) * [String](#string)","title":"Schema Types"},{"location":"graphql_api/#query-rootquerytype","text":"Field Argument Type Description currentTask Task Get the progress (if not completed) or the result (if completed) of the last un-archived task in the session. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. taskId String If provided, only returns information if the task's id matches. type String If provided, only returns information if the task's type ('space', 'generate', 'update', or 'simulate') matches. experiments Experiments Get the designed or completed experiments for the current or a previous generation. For non-admin users, returns information only if the session is owned by the user. designOnly Boolean ! If this argument is true , return only the designed experiments, not any extra experiments, and without responses. gen Int (optional) The generation number to fetch. Use zero to get any initial experiments. Return the latest designed generation (without responses) if omitted. sessionId String ! The session's id. experimentsHistory [ Experiments ] Get the experiments and responses for all generations. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. server Server Get the server by id. Admin-level users only. serverId String ! The server's id (unique name, like 'localhost'). servers [ Server ] Search all servers. Admin-level users only. q String A string to filter search on. If provided, will limit the response to matches on a server's name or url. status String Status to filter search on ('up' or 'down'). If provided, will limit the response to matches on a server's current runtime status. session Session Get PDT session information. For admin-level user, get the session by id. For non-admin user, get the session only if it is owned by the user. sessionId String ! The session's id. sessionParameters SessionParameters Get the experimental space and project parameters for a given session. For non-admin users, returns information only if the session is owned by the user. sessionId String ! The session's id. sessions [ SessionSummary ] Search sessions. For Admin-level users, returns search over all sessions. q String A string to filter search on. If provided, will limit the response to matches on session's id, tag, name or description. userId String If provided, list only the sessions for this user. tasks [ Task ] Get list of all, or just un-archived tasks in the session. For non-admin users, returns information only if the session is owned by the user. includeArchivedTasks Boolean ! If false, limits the response to tasks that have not completed. sessionId String ! The session's id. transaction Transaction Get the transaction by id. Admin-level users only. txnId String ! The transaction's id. transactions [ Transaction ] Search transactions. For Admin-level users, returns search over all transactions. q String A string to filter search on. If provided, will limit the response to matches on the transaction's memo. sessionId String If provided, list only the transactions for this session. txnKind String If provided, list only the transactions matching this kind. txnStatus String If provided, list only the transactions matching this status. txnType String If provided, list only the transactions matching this type. userId String If provided, list only the transactions for this user. user User For admin-level user, get a user by id. For non-admin user, return the currently logged-in user if the user_id matches. userId String ! The user's id (a generated base-36 hash). users [ UserSummary ] For admin-level user, search all users. For non-admin user, returns a list containing just the currently logged-in user. q String A string to filter search on. If provided, will limit the response to matches on a user's first name, last name or email address.","title":"Query (RootQueryType)"},{"location":"graphql_api/#mutation-rootmutationtype","text":"Field Argument Type Description changePassword PasswordChanged Change a user's password, authenticating via header or password change token. input ChangePasswordInput ! The data used to authenticate and set the new password. userId String The user's id, required if not authenticating via token. createAnalytics Analytics Generate a list of analytics files for all generations in the session. sessionId String ! The session's id. createSession Session Create and start a new PDT session on a server, installing and initializing required application and user data files on the server. session NewSessionInput ! The target server, the session's name and description, and whether this is a demo or regular session. createUser UserCreated Create an unverified user account. The account's email address must be verified before it is activated. createToken Boolean If true, an email message with a verification link will be mailed to the user. promotionCode String If present, the promotion code that will be applied to the new user. user NewUserInput ! The first name, last name, email address and password for the new user. generateDesign Task Start a 'generate' task using initial, extra and/or generated experiment responses. gen Int ! The generation number of the previously validated experiments and responses. sessionId String ! The session's id. haltSession HaltSessionResult Disconnect from a previously created PDT session. sessionId String ! The sesssion's id as returned by the createSession mutation. login AuthenticationToken Log in a user by email and password. Use the returned token to authenticate other requests. Use the returned user_id to create new sessions. email String ! The user's email address. password String ! The user's password (in cleartext). logout AuthenticationToken Log out a user, by revoking the access token. Returns information about the revoked token. token String ! The access token to revoke. putExperimentalParameters Task Validate and start a 'space' task to save a session's experimental space parameters (space type, population size, replicates, total volume and experimental parameter definitions). params SessionParametersInput ! The experimental space parameters to use for the session. sessionId String ! The session's id. putExperiments Experiments Validate initial, extra and/or generated experiment responses. experiments ExperimentsInput ! The experiments and responses to validate and save. sessionId String ! The session's id. restartSession Session Restart a previously created PDT session, re-initializing application and user data files. sessionId String ! The sesssion's id as returned by the createSession mutation. runSimulation Task Validate and start a 'simulate' task to process several design generations. ngens Int ! The number of design generations to attempt. params SessionParametersInput ! The experimental space parameters to use for the session. sessionId String ! The session's id. sendToken TokenSent Create and send a new verification or password reset token to a user. email String ! The user's email address. tokenType String ! The type of token requested ( verify or reset ). simulateResponses Experiments Generate simulated experiment responses for the current generation. experiments DataFrameInput (Optional) The experiments for which responses will be generated, including initial or extra experiments. sessionId String ! The session's id. updateTask Task Update, cancel or archive a task. For advanced users only! sessionId String ! The session's id. task TaskInput ! The task id and disposition. updateUserProfile UserProfile Update the user's profile. profile UserProfileInput ! The first name, last name, email address and other information about the user. userId String ! The user's id. verifyUser UserProfile Verify and activate an inactive user account. If successful (token matches and has not expired and user account is inactive), return the user account profile. Normally, verification tokens are sent to a non-API endpoint, but this mutation can also be used. token String ! The verification token that was emailed to the user.","title":"Mutation (RootMutationType)"},{"location":"graphql_api/#objects","text":"","title":"Objects"},{"location":"graphql_api/#analytics","text":"Information about the analytics files available for the specified generation in a session. Field Argument Type Description files [ AnalyticsFileInfo ] The list of available file titles and locations. gen Int ! The last completed generation number. sessionId String ! The session's id.","title":"Analytics"},{"location":"graphql_api/#analyticsfileinfo","text":"Information about a single analytics file (PDF). Field Argument Type Description filename String ! The file's name, like 'RespSortBarplotSequence.pdf'. title String ! The file's title, like 'Response Barplot Time Series'. url String ! The file's url, like 'http://localhost:4041/session/sess_id/analytics/gen/1/RespSortBarplotSequence.pdf'.","title":"AnalyticsFileInfo"},{"location":"graphql_api/#apiparameters","text":"Parameters that a session must use to access other resources. Field Argument Type Description apiBaseUri String ! The URL for the session user to use to access the API. apiKey String ! The 'API key' for the session user to use to authenticate to the API. loginUri String ! The URL for the session user to use to log in.","title":"ApiParameters"},{"location":"graphql_api/#authenticationtoken","text":"A user access (a JWT encoded and signed) token, used to authenticate to the API. Field Argument Type Description claims String ! All the claims stored in the token. createdAt DateTime ! The date and time that the token was created. expiresAt DateTime ! The date and time that the token will expire. status String ! The status of the the token ('active' or 'revoked'). token String ! The token. Use this as the 'Bearer' value for the HTTP authorization header. type String ! The type of token ('access'). user UserProfile The user account associated with this token.","title":"AuthenticationToken"},{"location":"graphql_api/#campaigninfo","text":"Information on current and remaining generations. Field Argument Type Description completed Boolean ! True if the campaign has completed (no additional experiments can be generated). gen Int ! The generation number for the last-designed generation. -1 means experimental space parameters have not been validated. remaining Int The number of remaining generations in the session, if available.","title":"CampaignInfo"},{"location":"graphql_api/#categorizederror","text":"An error encountered while processing a query or mutation. Field Argument Type Description category String The type of error. fatalError Boolean True if the error is fatal. message String ! A description of the error. systemError Boolean True if the error is an internal system error.","title":"CategorizedError"},{"location":"graphql_api/#dataframe","text":"A representation of a data table (similar to a CSV file). Numerical data is converted to strings, and NULL data is converted to empty strings. Field Argument Type Description colHeaders [ String ]! The header row for the table. data [[ String ]!]! A list of rows containing data. Each row in turn is a list of strings. index [ String ] If returned, the row names for table.","title":"DataFrame"},{"location":"graphql_api/#experimentalspace","text":"The definition for a session's experimental space. Field Argument Type Description spaceSize Int The number of possible or explorable parameter combinations. table DataFrame ! The table of experimental parameters. totalUnits Int For mixture spaces, the total number of volume units. type String ! The space's type ('factorial' or 'mixture').","title":"ExperimentalSpace"},{"location":"graphql_api/#experimentalspacetemplate","text":"A system-defined template for an experimental space. Field Argument Type Description name String ! The type of template, ('factorial-default', 'mixture-default', 'factorial-demo-default', or 'mixture-demo-default'). template ExperimentalSpace ! The experimental space parameters for this template.","title":"ExperimentalSpaceTemplate"},{"location":"graphql_api/#experiments","text":"Information about initial or subsequent experiments in a session. Field Argument Type Description designRows Int The number of experiments generated by the system. gen Int ! The generation number for the experiments. hasResponses Boolean True if the experiment data in the associated table contains responses. table DataFrame The experiment inputs (and possible responses) for the experiments. validated Boolean True if the experiment data for this generation has been validated.","title":"Experiments"},{"location":"graphql_api/#generatetaskresult","text":"Result of a validate experiments task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experiments. experiments Experiments Designed experiments for current generation. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('generate').","title":"GenerateTaskResult"},{"location":"graphql_api/#haltsessionresult","text":"Information about a session that was disconnected. Field Argument Type Description action String ! The action taken to halt the session. sessionId String ! The session's id. status String ! The current connection status of the session.","title":"HaltSessionResult"},{"location":"graphql_api/#loadavg","text":"Process loadavg statistics for a linux server. Field Argument Type Description load1 Float 1 minute loadavg. load15 Float 15 minute loadavg. load5 Float 5 minute loadavg.","title":"Loadavg"},{"location":"graphql_api/#passwordchanged","text":"Confirming information for a password change. Field Argument Type Description updatedAt DateTime ! The time that the password was updated.","title":"PasswordChanged"},{"location":"graphql_api/#server","text":"Information about a PDT server. Field Argument Type Description bindir String ! The server's filesystem path to basic executable scripts (deprecated). cores Int The number of cores reported for the server. cost Float The last calulated cost metric for the server. host String ! The server's fully qualified hostname. loadavg Loadavg The last reported loadavg statistics for the server. procs Int The last reported number of processes running on the server. serverId String ! The server's id (a unique nickname or unqualified hostname). sshHost String ! The server's SSH hostname (deprecated). status String ! The server's current runtime status ('up' or 'down'). updatedAt DateTime ! The date and time that the data for the server was last updated. url String ! The server's root URL.","title":"Server"},{"location":"graphql_api/#session","text":"Complete information about a session. Field Argument Type Description active Boolean ! True if this is an active (non-archived) session. api ApiParameters ! API location and key information. auth SessionAuth Authorization information, if available. campaign CampaignInfo ! Generation information. demo Boolean ! True if this was created as a demo session. description String ! The session's description. didCrash Boolean ! True if this session crashed. didRestart Boolean ! True if this session was restarted. experiments Experiments Designed experiments for current generation. host String ! The id for the server associated with the session. latestCompletedExperiments Experiments Completed experiments from the previous generation. name String ! The session's name (unique for the associated user). params SessionParameters ! Current unvalidated or validated experimental space parameters. path String ! The filesytem path on the server associated with the session that contains the session's system and user data files. platformMode String ! Settings for the runtime platform (`development`, `test` or `production`). restartedAt DateTime The date and time that this session was last restarted. sessionId String ! The session's id. spaceTemplates [ ExperimentalSpaceTemplate !]! Experimental space parameter templates that can be used as examples. startedAt DateTime True if the campaign has completed (no additional experiments can be generated). tag String ! The session's (unique) tag. tasks [ TaskSummary ] Non-archived tasks, active or completed, in this session. user UserProfile The user profile associated with the session. version String The build version for the session, if available.","title":"Session"},{"location":"graphql_api/#sessionauth","text":"Information about the access token for the session. Field Argument Type Description expirationTime Int (TBD) message String (TBD) status String ! The status of the the token ('active' or 'revoked'). token String ! The token.","title":"SessionAuth"},{"location":"graphql_api/#sessionparameters","text":"Information about the experimental space parameters for a PDT session. Field Argument Type Description designCost Int If the experimental space has been validated, the cost in PDT credits for each design generation. populationSize Int ! The experimental space's population size. replicates Int ! The number of replicates for the experimental space. space ExperimentalSpace ! The experimental space type and parameters. validated Boolean ! True if the session parameters (including the space) were validated.","title":"SessionParameters"},{"location":"graphql_api/#sessionsummary","text":"Summary information about a session. Field Argument Type Description active Boolean ! True if this is an active (non-archived) session. campaign CampaignInfo Generation information, if available. demo Boolean ! True if this was created as a demo session. description String ! The session's description. host String ! The id for the server associated with the session. name String ! The session's name (unique for the associated user). params SessionParameters Current unvalidated or validated experimental space parameters, if available. path String ! The filesytem path on the server associated with the session that contains the session's system and user data files. sessionId String ! The session's id. tag String ! The session's (unique) tag. user UserProfile The user profile associated with the session. version String The build version for the session, if available.","title":"SessionSummary"},{"location":"graphql_api/#simulatetaskresult","text":"Result of a simulate experiments task. Field Argument Type Description campaign CampaignInfo ! Information on the last generation. errors [ CategorizedError ] Errors encountered when validating the experimental space. experimentsHistory [ Experiments ] Experiments and responses for all generations. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('simulate').","title":"SimulateTaskResult"},{"location":"graphql_api/#spacetaskresult","text":"Result of a validate experimental space parameters task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experimental space. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('space').","title":"SpaceTaskResult"},{"location":"graphql_api/#task","text":"Information on a long-running task in a daptics session. Field Argument Type Description archived Boolean ! True if the task is no longer active and has been flagged as archived. description String The task's description. errors [ CategorizedError ] Errors returned by a failed or canceled task. progress TaskProgress Progress message reported by a currently executing task. result TaskResult The validated session parameters or generated experimental design result returned by a completed task. sessionId String ! The session's id. startedAt DateTime The date and time the task was started. status String ! The task's status ('new', 'running', 'success', 'error', or 'canceled'). taskId String ! The task's id. type String ! The task's type ('space', 'generate', 'update', or 'simulate').","title":"Task"},{"location":"graphql_api/#taskprogress","text":"Progress information about a currently executing task. Field Argument Type Description message String ! A description of the last activity returned by the task. percent Int (TBD) phase String (TBD)","title":"TaskProgress"},{"location":"graphql_api/#tasksummary","text":"Summary information on a long-running task in a daptics session. Field Argument Type Description description String The task's description. sessionId String ! The session's id. startedAt DateTime The date and time the task was started. status String ! The task's status ('new', 'running', 'success', 'error', or 'canceled'). taskId String ! The task's id. type String ! The task's type ('space', 'generate', 'update', or 'simulate').","title":"TaskSummary"},{"location":"graphql_api/#tokensent","text":"Confirming information returned when a verification code was sent to an unverified user. Field Argument Type Description sentAt DateTime ! The time when the code was delivered. sentTo [ String !]! The email address(es) the code was delivered to. tokenType String ! The type of token sent to the user.","title":"TokenSent"},{"location":"graphql_api/#transaction","text":"Information about a single pending, posted, or canceled financial transaction. Field Argument Type Description amountInCents Int ! The amount of the transaction (debit as negative, credit as positive), in cents. amountInPdt Int ! The amount of the transaction (debit as negative, credit as positive), in PDT credits. createdAt DateTime ! The date and time that the transaction was created. gatewayTransactionId String The payment processor's transaction id, if any. memo String ! A description of the transacation. promotionCode String The promotion code, if any. refTxnId String The transaction id of the original transaction if this is transaction is a refund. remainingBalanceInCents Int The user account's remaining available balance, in cents, after this transaction. remainingBalanceInPdt Int The user account's remaining available balance, in PDT credits, after this transaction. sessionId String The id of the associated session, if any. taskId String The id of the ('generate') task associated with the transaction, if any. txnAuthor String ! The user id of the user who created the transaction. txnId String ! The transaction's id (a generated hash). txnKind String ! The kind of the transaction. (`pdt_charge`, `sale`, `refund`, `sign_up`, `coupon`, or `bonus`). txnStatus String ! The status of the transaction (`authorized`, `posted`, or `canceled`). txnType String ! The type of the transaction. (`session`, `braintree`, `promotion` or `admin`). updatedAt DateTime ! The date and time that the transaction was last updated. user UserProfile ! Profile and activity information for the associated user's account.","title":"Transaction"},{"location":"graphql_api/#updatetaskresult","text":"Result of a save experiments task. Field Argument Type Description campaign CampaignInfo ! Generation information. errors [ CategorizedError ] Errors encountered when validating the experiments. experiments Experiments Validated experiments saved in current generation. params SessionParameters ! Current validated experimental space parameters. sessionId String ! The session's id. taskId String ! The task's id. type String ! The task's type ('update').","title":"UpdateTaskResult"},{"location":"graphql_api/#user","text":"Full information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). currentBalanceInCents Int ! The currently available balance for the user's account, in cemts. currentBalanceInPdt Int ! The currently available balance for the user's account, in PDT credits. email String ! The user's email address. firstName String ! The user's first name. lastLoginAt DateTime The date and time that the user account last logged into a PDT session. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. sessions [ SessionSummary ]! The sessions owned by the user. state String The user's state or province code (3 characters maximum). status String ! The user's account status ('unverified', 'active', or 'disabled'). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). updatedAt DateTime ! The date and time that data in the user's account was last updated. userId String ! The user's id. userLevel String ! The user's permission level. zip String The user's postal code.","title":"User"},{"location":"graphql_api/#usercreated","text":"Confirming information returned when a user account was successfully created. Field Argument Type Description email String The new user's email address. firstName String The new user's first name. lastName String The new user's last name. promotionCode String The promotion code applied to the new user account. regDate DateTime ! The date and time that the new user's account was created.","title":"UserCreated"},{"location":"graphql_api/#userprofile","text":"Profile information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). email String ! The user's email address. firstName String ! The user's first name. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. state String The user's state or province code (3 characters maximum). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). userId String ! The user's id. zip String The user's postal code.","title":"UserProfile"},{"location":"graphql_api/#usersummary","text":"Profile and activity information for a user account. Field Argument Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). currentBalanceInCents Int ! The currently available balance for the user's account, in cemts. currentBalanceInPdt Int ! The currently available balance for the user's account, in PDT credits. email String ! The user's email address. firstName String ! The user's first name. lastLoginAt DateTime The date and time that the user account last logged into a PDT session. lastName String ! The user's last name. phone String The user's telephone number. regDate DateTime ! The date and time that the user's account was created. state String The user's state or province code (3 characters maximum). status String ! The user's account status ('unverified', 'active', or 'disabled'). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). updatedAt DateTime ! The date and time that data in the user's account was last updated. userId String ! The user's id. userLevel String ! The user's permission level. zip String The user's postal code.","title":"UserSummary"},{"location":"graphql_api/#inputs","text":"","title":"Inputs"},{"location":"graphql_api/#additionalparameterinput","text":"An advanced experimental space parameter. Field Type Description jsonValue String ! The parameter's value, encoded as a JSON string. name String ! The parameter name.","title":"AdditionalParameterInput"},{"location":"graphql_api/#changepasswordinput","text":"Input fields for changing the password on a user account. Field Type Description email String The user's email address, required if changing via token authentication. password String ! The cleartext password for the user account. passwordConfirmation String ! The cleartext password, again, for the user account. token String The password change token, required if changing via token authentication.","title":"ChangePasswordInput"},{"location":"graphql_api/#dataframeinput","text":"Table data for experimental parameters or experimental responses (similar to a CSV file). Field Type Description colHeaders [ String !]! Column headers for the table. data [[ String ]!]! Data rows for the table. Each row is a list of strings. Numerical data must be expressed as a string, and a NULL value must be expressed as an empty string. index [ String !] Row names for the table (ignored).","title":"DataFrameInput"},{"location":"graphql_api/#experimentsinput","text":"Input fields for submitting experimental responses to be validated to then to create the next design gneration. Field Type Description gen Int ! The current generation number. Use zero to submit initial experiments or just to proceed to the first design generation without any initial experiments. table DataFrameInput The experiments and their responses. Required if gen is greater than zero. type String ! The type of experiments being submitted, 'initial', 'designed', or 'final'.","title":"ExperimentsInput"},{"location":"graphql_api/#newsessioninput","text":"Input fields for create a new PDT session. Field Type Description demo Boolean ! True if this is a demo session. description String ! A description for the session. location String If provided, the id of the server on which the session will be created. name String ! The name of the session (unique for the user). userId String ! The id for the associated user account.","title":"NewSessionInput"},{"location":"graphql_api/#newuserinput","text":"Input fields for creating a new user account. Field Type Description email String ! The user's email address. firstName String ! The user's first name. lastName String ! The user's last name. password String ! The cleartext password for the user account. passwordConfirmation String ! The cleartext password, again, for the user account.","title":"NewUserInput"},{"location":"graphql_api/#sessionparametersinput","text":"Input fields for validating a session's experimental space parameters. Field Type Description additionalParams [ AdditionalParameterInput ] Additional advanced parameters for modeling and sampling. populationSize Int ! The population size. replicates Int ! The number of replicates (zero or greater). space SpaceInput ! The space type and definition of experimental parameters. willResetCampaign Boolean True to discard all experiments and reset any existing validated experimental space parameters.","title":"SessionParametersInput"},{"location":"graphql_api/#spaceinput","text":"Input fields for validating an experimental space. Field Type Description table DataFrameInput ! The experimental parameters, in a table. totalUnits Int If a mixture space, the total number of volume units. type String ! The space type, 'factorial' or 'mixture'.","title":"SpaceInput"},{"location":"graphql_api/#taskinput","text":"Input fields for updating or archiving a task. Field Type Description archived Boolean To archive this task, set the `archived` field to true. status String To cancel this task, set the `status` field to 'canceled'. taskId String ! The task's id.","title":"TaskInput"},{"location":"graphql_api/#userprofileinput","text":"Profile information for a user account. Field Type Description addr String The first line of the user's address. addr2 String The second line of the user's address. addr3 String The third line of the user's address. city String The user's city. company String The user's company. country String The user's country code (4 characters maximum). email String The user's email address. firstName String The user's first name. lastName String The user's last name. phone String The user's telephone number. state String The user's state or province code (3 characters maximum). suffix String The user's suffix (`Jr.`, etc.). title String The user's title (`Mr.`, etc.). zip String The user's postal code.","title":"UserProfileInput"},{"location":"graphql_api/#scalars","text":"","title":"Scalars"},{"location":"graphql_api/#boolean","text":"The Boolean scalar type represents true or false .","title":"Boolean"},{"location":"graphql_api/#datetime","text":"The DateTime scalar type represents a date and time in the UTC timezone. The DateTime appears in a JSON response as an ISO8601 formatted string, including UTC timezone (\"Z\"). The parsed date and time string will be converted to UTC and any UTC offset other than 0 will be rejected.","title":"DateTime"},{"location":"graphql_api/#float","text":"The Float scalar type represents signed double-precision fractional values as specified by IEEE 754 .","title":"Float"},{"location":"graphql_api/#int","text":"The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^53 - 1) and 2^53 - 1 since it is represented in JSON as double-precision floating point numbers specified by IEEE 754 .","title":"Int"},{"location":"graphql_api/#string","text":"The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","title":"String"}]}